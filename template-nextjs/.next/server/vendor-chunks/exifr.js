"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/exifr";
exports.ids = ["vendor-chunks/exifr"];
exports.modules = {

/***/ "(ssr)/./node_modules/exifr/dist/full.esm.mjs":
/*!**********************************************!*\
  !*** ./node_modules/exifr/dist/full.esm.mjs ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Exifr: () => (/* binding */ te),\n/* harmony export */   Options: () => (/* binding */ q),\n/* harmony export */   allFormatters: () => (/* binding */ X),\n/* harmony export */   chunkedProps: () => (/* binding */ G),\n/* harmony export */   createDictionary: () => (/* binding */ U),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   extendDictionary: () => (/* binding */ F),\n/* harmony export */   fetchUrlAsArrayBuffer: () => (/* binding */ M),\n/* harmony export */   fileParsers: () => (/* binding */ w),\n/* harmony export */   fileReaders: () => (/* binding */ A),\n/* harmony export */   gps: () => (/* binding */ Se),\n/* harmony export */   gpsOnlyOptions: () => (/* binding */ me),\n/* harmony export */   inheritables: () => (/* binding */ K),\n/* harmony export */   orientation: () => (/* binding */ Pe),\n/* harmony export */   orientationOnlyOptions: () => (/* binding */ Ie),\n/* harmony export */   otherSegments: () => (/* binding */ V),\n/* harmony export */   parse: () => (/* binding */ ie),\n/* harmony export */   readBlobAsArrayBuffer: () => (/* binding */ R),\n/* harmony export */   rotateCanvas: () => (/* binding */ we),\n/* harmony export */   rotateCss: () => (/* binding */ Te),\n/* harmony export */   rotation: () => (/* binding */ Ae),\n/* harmony export */   rotations: () => (/* binding */ ke),\n/* harmony export */   segmentParsers: () => (/* binding */ T),\n/* harmony export */   segments: () => (/* binding */ z),\n/* harmony export */   segmentsAndBlocks: () => (/* binding */ j),\n/* harmony export */   sidecar: () => (/* binding */ st),\n/* harmony export */   tagKeys: () => (/* binding */ E),\n/* harmony export */   tagRevivers: () => (/* binding */ N),\n/* harmony export */   tagValues: () => (/* binding */ B),\n/* harmony export */   thumbnail: () => (/* binding */ ye),\n/* harmony export */   thumbnailOnlyOptions: () => (/* binding */ Ce),\n/* harmony export */   thumbnailUrl: () => (/* binding */ be),\n/* harmony export */   tiffBlocks: () => (/* binding */ H),\n/* harmony export */   tiffExtractables: () => (/* binding */ W)\n/* harmony export */ });\nvar e = \"undefined\" != typeof self ? self : global;\nconst t = \"undefined\" != typeof navigator, i = t && \"undefined\" == typeof HTMLImageElement, n = !(\"undefined\" == typeof global || \"undefined\" == typeof process || !process.versions || !process.versions.node), s = e.Buffer, r = e.BigInt, a = !!s, o = (e)=>e;\nfunction l(e, t = o) {\n    if (n) try {\n        return \"function\" == typeof require ? Promise.resolve(t(require(e))) : import(/* webpackIgnore: true */ e).then(t);\n    } catch (t) {\n        console.warn(`Couldn't load ${e}`);\n    }\n}\nlet h = e.fetch;\nconst u = (e)=>h = e;\nif (!e.fetch) {\n    const e = l(\"http\", (e)=>e), t = l(\"https\", (e)=>e), i = (n, { headers: s } = {})=>new Promise(async (r, a)=>{\n            let { port: o, hostname: l, pathname: h, protocol: u, search: c } = new URL(n);\n            const f = {\n                method: \"GET\",\n                hostname: l,\n                path: encodeURI(h) + c,\n                headers: s\n            };\n            \"\" !== o && (f.port = Number(o));\n            const d = (\"https:\" === u ? await t : await e).request(f, (e)=>{\n                if (301 === e.statusCode || 302 === e.statusCode) {\n                    let t = new URL(e.headers.location, n).toString();\n                    return i(t, {\n                        headers: s\n                    }).then(r).catch(a);\n                }\n                r({\n                    status: e.statusCode,\n                    arrayBuffer: ()=>new Promise((t)=>{\n                            let i = [];\n                            e.on(\"data\", (e)=>i.push(e)), e.on(\"end\", ()=>t(Buffer.concat(i)));\n                        })\n                });\n            });\n            d.on(\"error\", a), d.end();\n        });\n    u(i);\n}\nfunction c(e, t, i) {\n    return t in e ? Object.defineProperty(e, t, {\n        value: i,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : e[t] = i, e;\n}\nconst f = (e)=>p(e) ? void 0 : e, d = (e)=>void 0 !== e;\nfunction p(e) {\n    return void 0 === e || (e instanceof Map ? 0 === e.size : 0 === Object.values(e).filter(d).length);\n}\nfunction g(e) {\n    let t = new Error(e);\n    throw delete t.stack, t;\n}\nfunction m(e) {\n    return \"\" === (e = (function(e) {\n        for(; e.endsWith(\"\\x00\");)e = e.slice(0, -1);\n        return e;\n    })(e).trim()) ? void 0 : e;\n}\nfunction S(e) {\n    let t = function(e) {\n        let t = 0;\n        return e.ifd0.enabled && (t += 1024), e.exif.enabled && (t += 2048), e.makerNote && (t += 2048), e.userComment && (t += 1024), e.gps.enabled && (t += 512), e.interop.enabled && (t += 100), e.ifd1.enabled && (t += 1024), t + 2048;\n    }(e);\n    return e.jfif.enabled && (t += 50), e.xmp.enabled && (t += 2e4), e.iptc.enabled && (t += 14e3), e.icc.enabled && (t += 6e3), t;\n}\nconst C = (e)=>String.fromCharCode.apply(null, e), y = \"undefined\" != typeof TextDecoder ? new TextDecoder(\"utf-8\") : void 0;\nfunction b(e) {\n    return y ? y.decode(e) : a ? Buffer.from(e).toString(\"utf8\") : decodeURIComponent(escape(C(e)));\n}\nclass I {\n    static from(e, t) {\n        return e instanceof this && e.le === t ? e : new I(e, void 0, void 0, t);\n    }\n    constructor(e, t = 0, i, n){\n        if (\"boolean\" == typeof n && (this.le = n), Array.isArray(e) && (e = new Uint8Array(e)), 0 === e) this.byteOffset = 0, this.byteLength = 0;\n        else if (e instanceof ArrayBuffer) {\n            void 0 === i && (i = e.byteLength - t);\n            let n = new DataView(e, t, i);\n            this._swapDataView(n);\n        } else if (e instanceof Uint8Array || e instanceof DataView || e instanceof I) {\n            void 0 === i && (i = e.byteLength - t), (t += e.byteOffset) + i > e.byteOffset + e.byteLength && g(\"Creating view outside of available memory in ArrayBuffer\");\n            let n = new DataView(e.buffer, t, i);\n            this._swapDataView(n);\n        } else if (\"number\" == typeof e) {\n            let t = new DataView(new ArrayBuffer(e));\n            this._swapDataView(t);\n        } else g(\"Invalid input argument for BufferView: \" + e);\n    }\n    _swapArrayBuffer(e) {\n        this._swapDataView(new DataView(e));\n    }\n    _swapBuffer(e) {\n        this._swapDataView(new DataView(e.buffer, e.byteOffset, e.byteLength));\n    }\n    _swapDataView(e) {\n        this.dataView = e, this.buffer = e.buffer, this.byteOffset = e.byteOffset, this.byteLength = e.byteLength;\n    }\n    _lengthToEnd(e) {\n        return this.byteLength - e;\n    }\n    set(e, t, i = I) {\n        return e instanceof DataView || e instanceof I ? e = new Uint8Array(e.buffer, e.byteOffset, e.byteLength) : e instanceof ArrayBuffer && (e = new Uint8Array(e)), e instanceof Uint8Array || g(\"BufferView.set(): Invalid data argument.\"), this.toUint8().set(e, t), new i(this, t, e.byteLength);\n    }\n    subarray(e, t) {\n        return t = t || this._lengthToEnd(e), new I(this, e, t);\n    }\n    toUint8() {\n        return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);\n    }\n    getUint8Array(e, t) {\n        return new Uint8Array(this.buffer, this.byteOffset + e, t);\n    }\n    getString(e = 0, t = this.byteLength) {\n        return b(this.getUint8Array(e, t));\n    }\n    getLatin1String(e = 0, t = this.byteLength) {\n        let i = this.getUint8Array(e, t);\n        return C(i);\n    }\n    getUnicodeString(e = 0, t = this.byteLength) {\n        const i = [];\n        for(let n = 0; n < t && e + n < this.byteLength; n += 2)i.push(this.getUint16(e + n));\n        return C(i);\n    }\n    getInt8(e) {\n        return this.dataView.getInt8(e);\n    }\n    getUint8(e) {\n        return this.dataView.getUint8(e);\n    }\n    getInt16(e, t = this.le) {\n        return this.dataView.getInt16(e, t);\n    }\n    getInt32(e, t = this.le) {\n        return this.dataView.getInt32(e, t);\n    }\n    getUint16(e, t = this.le) {\n        return this.dataView.getUint16(e, t);\n    }\n    getUint32(e, t = this.le) {\n        return this.dataView.getUint32(e, t);\n    }\n    getFloat32(e, t = this.le) {\n        return this.dataView.getFloat32(e, t);\n    }\n    getFloat64(e, t = this.le) {\n        return this.dataView.getFloat64(e, t);\n    }\n    getFloat(e, t = this.le) {\n        return this.dataView.getFloat32(e, t);\n    }\n    getDouble(e, t = this.le) {\n        return this.dataView.getFloat64(e, t);\n    }\n    getUintBytes(e, t, i) {\n        switch(t){\n            case 1:\n                return this.getUint8(e, i);\n            case 2:\n                return this.getUint16(e, i);\n            case 4:\n                return this.getUint32(e, i);\n            case 8:\n                return this.getUint64 && this.getUint64(e, i);\n        }\n    }\n    getUint(e, t, i) {\n        switch(t){\n            case 8:\n                return this.getUint8(e, i);\n            case 16:\n                return this.getUint16(e, i);\n            case 32:\n                return this.getUint32(e, i);\n            case 64:\n                return this.getUint64 && this.getUint64(e, i);\n        }\n    }\n    toString(e) {\n        return this.dataView.toString(e, this.constructor.name);\n    }\n    ensureChunk() {}\n}\nfunction P(e, t) {\n    g(`${e} '${t}' was not loaded, try using full build of exifr.`);\n}\nclass k extends Map {\n    constructor(e){\n        super(), this.kind = e;\n    }\n    get(e, t) {\n        return this.has(e) || P(this.kind, e), t && (e in t || function(e, t) {\n            g(`Unknown ${e} '${t}'.`);\n        }(this.kind, e), t[e].enabled || P(this.kind, e)), super.get(e);\n    }\n    keyList() {\n        return Array.from(this.keys());\n    }\n}\nvar w = new k(\"file parser\"), T = new k(\"segment parser\"), A = new k(\"file reader\");\nfunction D(e, n) {\n    return \"string\" == typeof e ? O(e, n) : t && !i && e instanceof HTMLImageElement ? O(e.src, n) : e instanceof Uint8Array || e instanceof ArrayBuffer || e instanceof DataView ? new I(e) : t && e instanceof Blob ? x(e, n, \"blob\", R) : void g(\"Invalid input argument\");\n}\nfunction O(e, i) {\n    return (s = e).startsWith(\"data:\") || s.length > 1e4 ? v(e, i, \"base64\") : n && e.includes(\"://\") ? x(e, i, \"url\", M) : n ? v(e, i, \"fs\") : t ? x(e, i, \"url\", M) : void g(\"Invalid input argument\");\n    var s;\n}\nasync function x(e, t, i, n) {\n    return A.has(i) ? v(e, t, i) : n ? async function(e, t) {\n        let i = await t(e);\n        return new I(i);\n    }(e, n) : void g(`Parser ${i} is not loaded`);\n}\nasync function v(e, t, i) {\n    let n = new (A.get(i))(e, t);\n    return await n.read(), n;\n}\nconst M = (e)=>h(e).then((e)=>e.arrayBuffer()), R = (e)=>new Promise((t, i)=>{\n        let n = new FileReader;\n        n.onloadend = ()=>t(n.result || new ArrayBuffer), n.onerror = i, n.readAsArrayBuffer(e);\n    });\nclass L extends Map {\n    get tagKeys() {\n        return this.allKeys || (this.allKeys = Array.from(this.keys())), this.allKeys;\n    }\n    get tagValues() {\n        return this.allValues || (this.allValues = Array.from(this.values())), this.allValues;\n    }\n}\nfunction U(e, t, i) {\n    let n = new L;\n    for (let [e, t] of i)n.set(e, t);\n    if (Array.isArray(t)) for (let i of t)e.set(i, n);\n    else e.set(t, n);\n    return n;\n}\nfunction F(e, t, i) {\n    let n, s = e.get(t);\n    for (n of i)s.set(n[0], n[1]);\n}\nconst E = new Map, B = new Map, N = new Map, G = [\n    \"chunked\",\n    \"firstChunkSize\",\n    \"firstChunkSizeNode\",\n    \"firstChunkSizeBrowser\",\n    \"chunkSize\",\n    \"chunkLimit\"\n], V = [\n    \"jfif\",\n    \"xmp\",\n    \"icc\",\n    \"iptc\",\n    \"ihdr\"\n], z = [\n    \"tiff\",\n    ...V\n], H = [\n    \"ifd0\",\n    \"ifd1\",\n    \"exif\",\n    \"gps\",\n    \"interop\"\n], j = [\n    ...z,\n    ...H\n], W = [\n    \"makerNote\",\n    \"userComment\"\n], K = [\n    \"translateKeys\",\n    \"translateValues\",\n    \"reviveValues\",\n    \"multiSegment\"\n], X = [\n    ...K,\n    \"sanitize\",\n    \"mergeOutput\",\n    \"silentErrors\"\n];\nclass _ {\n    get translate() {\n        return this.translateKeys || this.translateValues || this.reviveValues;\n    }\n}\nclass Y extends _ {\n    get needed() {\n        return this.enabled || this.deps.size > 0;\n    }\n    constructor(e, t, i, n){\n        if (super(), c(this, \"enabled\", !1), c(this, \"skip\", new Set), c(this, \"pick\", new Set), c(this, \"deps\", new Set), c(this, \"translateKeys\", !1), c(this, \"translateValues\", !1), c(this, \"reviveValues\", !1), this.key = e, this.enabled = t, this.parse = this.enabled, this.applyInheritables(n), this.canBeFiltered = H.includes(e), this.canBeFiltered && (this.dict = E.get(e)), void 0 !== i) if (Array.isArray(i)) this.parse = this.enabled = !0, this.canBeFiltered && i.length > 0 && this.translateTagSet(i, this.pick);\n        else if (\"object\" == typeof i) {\n            if (this.enabled = !0, this.parse = !1 !== i.parse, this.canBeFiltered) {\n                let { pick: e, skip: t } = i;\n                e && e.length > 0 && this.translateTagSet(e, this.pick), t && t.length > 0 && this.translateTagSet(t, this.skip);\n            }\n            this.applyInheritables(i);\n        } else !0 === i || !1 === i ? this.parse = this.enabled = i : g(`Invalid options argument: ${i}`);\n    }\n    applyInheritables(e) {\n        let t, i;\n        for (t of K)i = e[t], void 0 !== i && (this[t] = i);\n    }\n    translateTagSet(e, t) {\n        if (this.dict) {\n            let i, n, { tagKeys: s, tagValues: r } = this.dict;\n            for (i of e)\"string\" == typeof i ? (n = r.indexOf(i), -1 === n && (n = s.indexOf(Number(i))), -1 !== n && t.add(Number(s[n]))) : t.add(i);\n        } else for (let i of e)t.add(i);\n    }\n    finalizeFilters() {\n        !this.enabled && this.deps.size > 0 ? (this.enabled = !0, ee(this.pick, this.deps)) : this.enabled && this.pick.size > 0 && ee(this.pick, this.deps);\n    }\n}\nvar $ = {\n    jfif: !1,\n    tiff: !0,\n    xmp: !1,\n    icc: !1,\n    iptc: !1,\n    ifd0: !0,\n    ifd1: !1,\n    exif: !0,\n    gps: !0,\n    interop: !1,\n    ihdr: void 0,\n    makerNote: !1,\n    userComment: !1,\n    multiSegment: !1,\n    skip: [],\n    pick: [],\n    translateKeys: !0,\n    translateValues: !0,\n    reviveValues: !0,\n    sanitize: !0,\n    mergeOutput: !0,\n    silentErrors: !0,\n    chunked: !0,\n    firstChunkSize: void 0,\n    firstChunkSizeNode: 512,\n    firstChunkSizeBrowser: 65536,\n    chunkSize: 65536,\n    chunkLimit: 5\n}, J = new Map;\nclass q extends _ {\n    static useCached(e) {\n        let t = J.get(e);\n        return void 0 !== t || (t = new this(e), J.set(e, t)), t;\n    }\n    constructor(e){\n        super(), !0 === e ? this.setupFromTrue() : void 0 === e ? this.setupFromUndefined() : Array.isArray(e) ? this.setupFromArray(e) : \"object\" == typeof e ? this.setupFromObject(e) : g(`Invalid options argument ${e}`), void 0 === this.firstChunkSize && (this.firstChunkSize = t ? this.firstChunkSizeBrowser : this.firstChunkSizeNode), this.mergeOutput && (this.ifd1.enabled = !1), this.filterNestedSegmentTags(), this.traverseTiffDependencyTree(), this.checkLoadedPlugins();\n    }\n    setupFromUndefined() {\n        let e;\n        for (e of G)this[e] = $[e];\n        for (e of X)this[e] = $[e];\n        for (e of W)this[e] = $[e];\n        for (e of j)this[e] = new Y(e, $[e], void 0, this);\n    }\n    setupFromTrue() {\n        let e;\n        for (e of G)this[e] = $[e];\n        for (e of X)this[e] = $[e];\n        for (e of W)this[e] = !0;\n        for (e of j)this[e] = new Y(e, !0, void 0, this);\n    }\n    setupFromArray(e) {\n        let t;\n        for (t of G)this[t] = $[t];\n        for (t of X)this[t] = $[t];\n        for (t of W)this[t] = $[t];\n        for (t of j)this[t] = new Y(t, !1, void 0, this);\n        this.setupGlobalFilters(e, void 0, H);\n    }\n    setupFromObject(e) {\n        let t;\n        for (t of (H.ifd0 = H.ifd0 || H.image, H.ifd1 = H.ifd1 || H.thumbnail, Object.assign(this, e), G))this[t] = Z(e[t], $[t]);\n        for (t of X)this[t] = Z(e[t], $[t]);\n        for (t of W)this[t] = Z(e[t], $[t]);\n        for (t of z)this[t] = new Y(t, $[t], e[t], this);\n        for (t of H)this[t] = new Y(t, $[t], e[t], this.tiff);\n        this.setupGlobalFilters(e.pick, e.skip, H, j), !0 === e.tiff ? this.batchEnableWithBool(H, !0) : !1 === e.tiff ? this.batchEnableWithUserValue(H, e) : Array.isArray(e.tiff) ? this.setupGlobalFilters(e.tiff, void 0, H) : \"object\" == typeof e.tiff && this.setupGlobalFilters(e.tiff.pick, e.tiff.skip, H);\n    }\n    batchEnableWithBool(e, t) {\n        for (let i of e)this[i].enabled = t;\n    }\n    batchEnableWithUserValue(e, t) {\n        for (let i of e){\n            let e = t[i];\n            this[i].enabled = !1 !== e && void 0 !== e;\n        }\n    }\n    setupGlobalFilters(e, t, i, n = i) {\n        if (e && e.length) {\n            for (let e of n)this[e].enabled = !1;\n            let t = Q(e, i);\n            for (let [e, i] of t)ee(this[e].pick, i), this[e].enabled = !0;\n        } else if (t && t.length) {\n            let e = Q(t, i);\n            for (let [t, i] of e)ee(this[t].skip, i);\n        }\n    }\n    filterNestedSegmentTags() {\n        let { ifd0: e, exif: t, xmp: i, iptc: n, icc: s } = this;\n        this.makerNote ? t.deps.add(37500) : t.skip.add(37500), this.userComment ? t.deps.add(37510) : t.skip.add(37510), i.enabled || e.skip.add(700), n.enabled || e.skip.add(33723), s.enabled || e.skip.add(34675);\n    }\n    traverseTiffDependencyTree() {\n        let { ifd0: e, exif: t, gps: i, interop: n } = this;\n        n.needed && (t.deps.add(40965), e.deps.add(40965)), t.needed && e.deps.add(34665), i.needed && e.deps.add(34853), this.tiff.enabled = H.some((e)=>!0 === this[e].enabled) || this.makerNote || this.userComment;\n        for (let e of H)this[e].finalizeFilters();\n    }\n    get onlyTiff() {\n        return !V.map((e)=>this[e].enabled).some((e)=>!0 === e) && this.tiff.enabled;\n    }\n    checkLoadedPlugins() {\n        for (let e of z)this[e].enabled && !T.has(e) && P(\"segment parser\", e);\n    }\n}\nfunction Q(e, t) {\n    let i, n, s, r, a = [];\n    for (s of t){\n        for (r of (i = E.get(s), n = [], i))(e.includes(r[0]) || e.includes(r[1])) && n.push(r[0]);\n        n.length && a.push([\n            s,\n            n\n        ]);\n    }\n    return a;\n}\nfunction Z(e, t) {\n    return void 0 !== e ? e : void 0 !== t ? t : void 0;\n}\nfunction ee(e, t) {\n    for (let i of t)e.add(i);\n}\nc(q, \"default\", $);\nclass te {\n    constructor(e){\n        c(this, \"parsers\", {}), c(this, \"output\", {}), c(this, \"errors\", []), c(this, \"pushToErrors\", (e)=>this.errors.push(e)), this.options = q.useCached(e);\n    }\n    async read(e) {\n        this.file = await D(e, this.options);\n    }\n    setup() {\n        if (this.fileParser) return;\n        let { file: e } = this, t = e.getUint16(0);\n        for (let [i, n] of w)if (n.canHandle(e, t)) return this.fileParser = new n(this.options, this.file, this.parsers), e[i] = !0;\n        this.file.close && this.file.close(), g(\"Unknown file format\");\n    }\n    async parse() {\n        let { output: e, errors: t } = this;\n        return this.setup(), this.options.silentErrors ? (await this.executeParsers().catch(this.pushToErrors), t.push(...this.fileParser.errors)) : await this.executeParsers(), this.file.close && this.file.close(), this.options.silentErrors && t.length > 0 && (e.errors = t), f(e);\n    }\n    async executeParsers() {\n        let { output: e } = this;\n        await this.fileParser.parse();\n        let t = Object.values(this.parsers).map(async (t)=>{\n            let i = await t.parse();\n            t.assignToOutput(e, i);\n        });\n        this.options.silentErrors && (t = t.map((e)=>e.catch(this.pushToErrors))), await Promise.all(t);\n    }\n    async extractThumbnail() {\n        this.setup();\n        let { options: e, file: t } = this, i = T.get(\"tiff\", e);\n        var n;\n        if (t.tiff ? n = {\n            start: 0,\n            type: \"tiff\"\n        } : t.jpeg && (n = await this.fileParser.getOrFindSegment(\"tiff\")), void 0 === n) return;\n        let s = await this.fileParser.ensureSegmentChunk(n), r = this.parsers.tiff = new i(s, e, t), a = await r.extractThumbnail();\n        return t.close && t.close(), a;\n    }\n}\nasync function ie(e, t) {\n    let i = new te(t);\n    return await i.read(e), i.parse();\n}\nvar ne = Object.freeze({\n    __proto__: null,\n    parse: ie,\n    Exifr: te,\n    fileParsers: w,\n    segmentParsers: T,\n    fileReaders: A,\n    tagKeys: E,\n    tagValues: B,\n    tagRevivers: N,\n    createDictionary: U,\n    extendDictionary: F,\n    fetchUrlAsArrayBuffer: M,\n    readBlobAsArrayBuffer: R,\n    chunkedProps: G,\n    otherSegments: V,\n    segments: z,\n    tiffBlocks: H,\n    segmentsAndBlocks: j,\n    tiffExtractables: W,\n    inheritables: K,\n    allFormatters: X,\n    Options: q\n});\nclass se {\n    constructor(e, t, i){\n        c(this, \"errors\", []), c(this, \"ensureSegmentChunk\", async (e)=>{\n            let t = e.start, i = e.size || 65536;\n            if (this.file.chunked) if (this.file.available(t, i)) e.chunk = this.file.subarray(t, i);\n            else try {\n                e.chunk = await this.file.readChunk(t, i);\n            } catch (t) {\n                g(`Couldn't read segment: ${JSON.stringify(e)}. ${t.message}`);\n            }\n            else this.file.byteLength > t + i ? e.chunk = this.file.subarray(t, i) : void 0 === e.size ? e.chunk = this.file.subarray(t) : g(\"Segment unreachable: \" + JSON.stringify(e));\n            return e.chunk;\n        }), this.extendOptions && this.extendOptions(e), this.options = e, this.file = t, this.parsers = i;\n    }\n    injectSegment(e, t) {\n        this.options[e].enabled && this.createParser(e, t);\n    }\n    createParser(e, t) {\n        let i = new (T.get(e))(t, this.options, this.file);\n        return this.parsers[e] = i;\n    }\n    createParsers(e) {\n        for (let t of e){\n            let { type: e, chunk: i } = t, n = this.options[e];\n            if (n && n.enabled) {\n                let t = this.parsers[e];\n                t && t.append || t || this.createParser(e, i);\n            }\n        }\n    }\n    async readSegments(e) {\n        let t = e.map(this.ensureSegmentChunk);\n        await Promise.all(t);\n    }\n}\nclass re {\n    static findPosition(e, t) {\n        let i = e.getUint16(t + 2) + 2, n = \"function\" == typeof this.headerLength ? this.headerLength(e, t, i) : this.headerLength, s = t + n, r = i - n;\n        return {\n            offset: t,\n            length: i,\n            headerLength: n,\n            start: s,\n            size: r,\n            end: s + r\n        };\n    }\n    static parse(e, t = {}) {\n        return new this(e, new q({\n            [this.type]: t\n        }), e).parse();\n    }\n    normalizeInput(e) {\n        return e instanceof I ? e : new I(e);\n    }\n    constructor(e, t = {}, i){\n        c(this, \"errors\", []), c(this, \"raw\", new Map), c(this, \"handleError\", (e)=>{\n            if (!this.options.silentErrors) throw e;\n            this.errors.push(e.message);\n        }), this.chunk = this.normalizeInput(e), this.file = i, this.type = this.constructor.type, this.globalOptions = this.options = t, this.localOptions = t[this.type], this.canTranslate = this.localOptions && this.localOptions.translate;\n    }\n    translate() {\n        this.canTranslate && (this.translated = this.translateBlock(this.raw, this.type));\n    }\n    get output() {\n        return this.translated ? this.translated : this.raw ? Object.fromEntries(this.raw) : void 0;\n    }\n    translateBlock(e, t) {\n        let i = N.get(t), n = B.get(t), s = E.get(t), r = this.options[t], a = r.reviveValues && !!i, o = r.translateValues && !!n, l = r.translateKeys && !!s, h = {};\n        for (let [t, r] of e)a && i.has(t) ? r = i.get(t)(r) : o && n.has(t) && (r = this.translateValue(r, n.get(t))), l && s.has(t) && (t = s.get(t) || t), h[t] = r;\n        return h;\n    }\n    translateValue(e, t) {\n        return t[e] || t.DEFAULT || e;\n    }\n    assignToOutput(e, t) {\n        this.assignObjectToOutput(e, this.constructor.type, t);\n    }\n    assignObjectToOutput(e, t, i) {\n        if (this.globalOptions.mergeOutput) return Object.assign(e, i);\n        e[t] ? Object.assign(e[t], i) : e[t] = i;\n    }\n}\nc(re, \"headerLength\", 4), c(re, \"type\", void 0), c(re, \"multiSegment\", !1), c(re, \"canHandle\", ()=>!1);\nfunction ae(e) {\n    return 192 === e || 194 === e || 196 === e || 219 === e || 221 === e || 218 === e || 254 === e;\n}\nfunction oe(e) {\n    return e >= 224 && e <= 239;\n}\nfunction le(e, t, i) {\n    for (let [n, s] of T)if (s.canHandle(e, t, i)) return n;\n}\nclass he extends se {\n    constructor(...e){\n        super(...e), c(this, \"appSegments\", []), c(this, \"jpegSegments\", []), c(this, \"unknownSegments\", []);\n    }\n    static canHandle(e, t) {\n        return 65496 === t;\n    }\n    async parse() {\n        await this.findAppSegments(), await this.readSegments(this.appSegments), this.mergeMultiSegments(), this.createParsers(this.mergedAppSegments || this.appSegments);\n    }\n    setupSegmentFinderArgs(e) {\n        !0 === e ? (this.findAll = !0, this.wanted = new Set(T.keyList())) : (e = void 0 === e ? T.keyList().filter((e)=>this.options[e].enabled) : e.filter((e)=>this.options[e].enabled && T.has(e)), this.findAll = !1, this.remaining = new Set(e), this.wanted = new Set(e)), this.unfinishedMultiSegment = !1;\n    }\n    async findAppSegments(e = 0, t) {\n        this.setupSegmentFinderArgs(t);\n        let { file: i, findAll: n, wanted: s, remaining: r } = this;\n        if (!n && this.file.chunked && (n = Array.from(s).some((e)=>{\n            let t = T.get(e), i = this.options[e];\n            return t.multiSegment && i.multiSegment;\n        }), n && await this.file.readWhole()), e = this.findAppSegmentsInRange(e, i.byteLength), !this.options.onlyTiff && i.chunked) {\n            let t = !1;\n            for(; r.size > 0 && !t && (i.canReadNextChunk || this.unfinishedMultiSegment);){\n                let { nextChunkOffset: n } = i, s = this.appSegments.some((e)=>!this.file.available(e.offset || e.start, e.length || e.size));\n                if (t = e > n && !s ? !await i.readNextChunk(e) : !await i.readNextChunk(n), void 0 === (e = this.findAppSegmentsInRange(e, i.byteLength))) return;\n            }\n        }\n    }\n    findAppSegmentsInRange(e, t) {\n        t -= 2;\n        let i, n, s, r, a, o, { file: l, findAll: h, wanted: u, remaining: c, options: f } = this;\n        for(; e < t; e++)if (255 === l.getUint8(e)) {\n            if (i = l.getUint8(e + 1), oe(i)) {\n                if (n = l.getUint16(e + 2), s = le(l, e, n), s && u.has(s) && (r = T.get(s), a = r.findPosition(l, e), o = f[s], a.type = s, this.appSegments.push(a), !h && (r.multiSegment && o.multiSegment ? (this.unfinishedMultiSegment = a.chunkNumber < a.chunkCount, this.unfinishedMultiSegment || c.delete(s)) : c.delete(s), 0 === c.size))) break;\n                f.recordUnknownSegments && (a = re.findPosition(l, e), a.marker = i, this.unknownSegments.push(a)), e += n + 1;\n            } else if (ae(i)) {\n                if (n = l.getUint16(e + 2), 218 === i && !1 !== f.stopAfterSos) return;\n                f.recordJpegSegments && this.jpegSegments.push({\n                    offset: e,\n                    length: n,\n                    marker: i\n                }), e += n + 1;\n            }\n        }\n        return e;\n    }\n    mergeMultiSegments() {\n        if (!this.appSegments.some((e)=>e.multiSegment)) return;\n        let e = function(e, t) {\n            let i, n, s, r = new Map;\n            for(let a = 0; a < e.length; a++)i = e[a], n = i[t], r.has(n) ? s = r.get(n) : r.set(n, s = []), s.push(i);\n            return Array.from(r);\n        }(this.appSegments, \"type\");\n        this.mergedAppSegments = e.map(([e, t])=>{\n            let i = T.get(e, this.options);\n            if (i.handleMultiSegments) {\n                return {\n                    type: e,\n                    chunk: i.handleMultiSegments(t)\n                };\n            }\n            return t[0];\n        });\n    }\n    getSegment(e) {\n        return this.appSegments.find((t)=>t.type === e);\n    }\n    async getOrFindSegment(e) {\n        let t = this.getSegment(e);\n        return void 0 === t && (await this.findAppSegments(0, [\n            e\n        ]), t = this.getSegment(e)), t;\n    }\n}\nc(he, \"type\", \"jpeg\"), w.set(\"jpeg\", he);\nconst ue = [\n    void 0,\n    1,\n    1,\n    2,\n    4,\n    8,\n    1,\n    1,\n    2,\n    4,\n    8,\n    4,\n    8,\n    4\n];\nclass ce extends re {\n    parseHeader() {\n        var e = this.chunk.getUint16();\n        18761 === e ? this.le = !0 : 19789 === e && (this.le = !1), this.chunk.le = this.le, this.headerParsed = !0;\n    }\n    parseTags(e, t, i = new Map) {\n        let { pick: n, skip: s } = this.options[t];\n        n = new Set(n);\n        let r = n.size > 0, a = 0 === s.size, o = this.chunk.getUint16(e);\n        e += 2;\n        for(let l = 0; l < o; l++){\n            let o = this.chunk.getUint16(e);\n            if (r) {\n                if (n.has(o) && (i.set(o, this.parseTag(e, o, t)), n.delete(o), 0 === n.size)) break;\n            } else !a && s.has(o) || i.set(o, this.parseTag(e, o, t));\n            e += 12;\n        }\n        return i;\n    }\n    parseTag(e, t, i) {\n        let { chunk: n } = this, s = n.getUint16(e + 2), r = n.getUint32(e + 4), a = ue[s];\n        if (a * r <= 4 ? e += 8 : e = n.getUint32(e + 8), (s < 1 || s > 13) && g(`Invalid TIFF value type. block: ${i.toUpperCase()}, tag: ${t.toString(16)}, type: ${s}, offset ${e}`), e > n.byteLength && g(`Invalid TIFF value offset. block: ${i.toUpperCase()}, tag: ${t.toString(16)}, type: ${s}, offset ${e} is outside of chunk size ${n.byteLength}`), 1 === s) return n.getUint8Array(e, r);\n        if (2 === s) return m(n.getString(e, r));\n        if (7 === s) return n.getUint8Array(e, r);\n        if (1 === r) return this.parseTagValue(s, e);\n        {\n            let t = new (function(e) {\n                switch(e){\n                    case 1:\n                        return Uint8Array;\n                    case 3:\n                        return Uint16Array;\n                    case 4:\n                        return Uint32Array;\n                    case 5:\n                        return Array;\n                    case 6:\n                        return Int8Array;\n                    case 8:\n                        return Int16Array;\n                    case 9:\n                        return Int32Array;\n                    case 10:\n                        return Array;\n                    case 11:\n                        return Float32Array;\n                    case 12:\n                        return Float64Array;\n                    default:\n                        return Array;\n                }\n            }(s))(r), i = a;\n            for(let n = 0; n < r; n++)t[n] = this.parseTagValue(s, e), e += i;\n            return t;\n        }\n    }\n    parseTagValue(e, t) {\n        let { chunk: i } = this;\n        switch(e){\n            case 1:\n                return i.getUint8(t);\n            case 3:\n                return i.getUint16(t);\n            case 4:\n                return i.getUint32(t);\n            case 5:\n                return i.getUint32(t) / i.getUint32(t + 4);\n            case 6:\n                return i.getInt8(t);\n            case 8:\n                return i.getInt16(t);\n            case 9:\n                return i.getInt32(t);\n            case 10:\n                return i.getInt32(t) / i.getInt32(t + 4);\n            case 11:\n                return i.getFloat(t);\n            case 12:\n                return i.getDouble(t);\n            case 13:\n                return i.getUint32(t);\n            default:\n                g(`Invalid tiff type ${e}`);\n        }\n    }\n}\nclass fe extends ce {\n    static canHandle(e, t) {\n        return 225 === e.getUint8(t + 1) && 1165519206 === e.getUint32(t + 4) && 0 === e.getUint16(t + 8);\n    }\n    async parse() {\n        this.parseHeader();\n        let { options: e } = this;\n        return e.ifd0.enabled && await this.parseIfd0Block(), e.exif.enabled && await this.safeParse(\"parseExifBlock\"), e.gps.enabled && await this.safeParse(\"parseGpsBlock\"), e.interop.enabled && await this.safeParse(\"parseInteropBlock\"), e.ifd1.enabled && await this.safeParse(\"parseThumbnailBlock\"), this.createOutput();\n    }\n    safeParse(e) {\n        let t = this[e]();\n        return void 0 !== t.catch && (t = t.catch(this.handleError)), t;\n    }\n    findIfd0Offset() {\n        void 0 === this.ifd0Offset && (this.ifd0Offset = this.chunk.getUint32(4));\n    }\n    findIfd1Offset() {\n        if (void 0 === this.ifd1Offset) {\n            this.findIfd0Offset();\n            let e = this.chunk.getUint16(this.ifd0Offset), t = this.ifd0Offset + 2 + 12 * e;\n            this.ifd1Offset = this.chunk.getUint32(t);\n        }\n    }\n    parseBlock(e, t) {\n        let i = new Map;\n        return this[t] = i, this.parseTags(e, t, i), i;\n    }\n    async parseIfd0Block() {\n        if (this.ifd0) return;\n        let { file: e } = this;\n        this.findIfd0Offset(), this.ifd0Offset < 8 && g(\"Malformed EXIF data\"), !e.chunked && this.ifd0Offset > e.byteLength && g(`IFD0 offset points to outside of file.\\nthis.ifd0Offset: ${this.ifd0Offset}, file.byteLength: ${e.byteLength}`), e.tiff && await e.ensureChunk(this.ifd0Offset, S(this.options));\n        let t = this.parseBlock(this.ifd0Offset, \"ifd0\");\n        return 0 !== t.size ? (this.exifOffset = t.get(34665), this.interopOffset = t.get(40965), this.gpsOffset = t.get(34853), this.xmp = t.get(700), this.iptc = t.get(33723), this.icc = t.get(34675), this.options.sanitize && (t.delete(34665), t.delete(40965), t.delete(34853), t.delete(700), t.delete(33723), t.delete(34675)), t) : void 0;\n    }\n    async parseExifBlock() {\n        if (this.exif) return;\n        if (this.ifd0 || await this.parseIfd0Block(), void 0 === this.exifOffset) return;\n        this.file.tiff && await this.file.ensureChunk(this.exifOffset, S(this.options));\n        let e = this.parseBlock(this.exifOffset, \"exif\");\n        return this.interopOffset || (this.interopOffset = e.get(40965)), this.makerNote = e.get(37500), this.userComment = e.get(37510), this.options.sanitize && (e.delete(40965), e.delete(37500), e.delete(37510)), this.unpack(e, 41728), this.unpack(e, 41729), e;\n    }\n    unpack(e, t) {\n        let i = e.get(t);\n        i && 1 === i.length && e.set(t, i[0]);\n    }\n    async parseGpsBlock() {\n        if (this.gps) return;\n        if (this.ifd0 || await this.parseIfd0Block(), void 0 === this.gpsOffset) return;\n        let e = this.parseBlock(this.gpsOffset, \"gps\");\n        return e && e.has(2) && e.has(4) && (e.set(\"latitude\", de(...e.get(2), e.get(1))), e.set(\"longitude\", de(...e.get(4), e.get(3)))), e;\n    }\n    async parseInteropBlock() {\n        if (!this.interop && (this.ifd0 || await this.parseIfd0Block(), void 0 !== this.interopOffset || this.exif || await this.parseExifBlock(), void 0 !== this.interopOffset)) return this.parseBlock(this.interopOffset, \"interop\");\n    }\n    async parseThumbnailBlock(e = !1) {\n        if (!this.ifd1 && !this.ifd1Parsed && (!this.options.mergeOutput || e)) return this.findIfd1Offset(), this.ifd1Offset > 0 && (this.parseBlock(this.ifd1Offset, \"ifd1\"), this.ifd1Parsed = !0), this.ifd1;\n    }\n    async extractThumbnail() {\n        if (this.headerParsed || this.parseHeader(), this.ifd1Parsed || await this.parseThumbnailBlock(!0), void 0 === this.ifd1) return;\n        let e = this.ifd1.get(513), t = this.ifd1.get(514);\n        return this.chunk.getUint8Array(e, t);\n    }\n    get image() {\n        return this.ifd0;\n    }\n    get thumbnail() {\n        return this.ifd1;\n    }\n    createOutput() {\n        let e, t, i, n = {};\n        for (t of H)if (e = this[t], !p(e)) if (i = this.canTranslate ? this.translateBlock(e, t) : Object.fromEntries(e), this.options.mergeOutput) {\n            if (\"ifd1\" === t) continue;\n            Object.assign(n, i);\n        } else n[t] = i;\n        return this.makerNote && (n.makerNote = this.makerNote), this.userComment && (n.userComment = this.userComment), n;\n    }\n    assignToOutput(e, t) {\n        if (this.globalOptions.mergeOutput) Object.assign(e, t);\n        else for (let [i, n] of Object.entries(t))this.assignObjectToOutput(e, i, n);\n    }\n}\nfunction de(e, t, i, n) {\n    var s = e + t / 60 + i / 3600;\n    return \"S\" !== n && \"W\" !== n || (s *= -1), s;\n}\nc(fe, \"type\", \"tiff\"), c(fe, \"headerLength\", 10), T.set(\"tiff\", fe);\nvar pe = Object.freeze({\n    __proto__: null,\n    default: ne,\n    Exifr: te,\n    fileParsers: w,\n    segmentParsers: T,\n    fileReaders: A,\n    tagKeys: E,\n    tagValues: B,\n    tagRevivers: N,\n    createDictionary: U,\n    extendDictionary: F,\n    fetchUrlAsArrayBuffer: M,\n    readBlobAsArrayBuffer: R,\n    chunkedProps: G,\n    otherSegments: V,\n    segments: z,\n    tiffBlocks: H,\n    segmentsAndBlocks: j,\n    tiffExtractables: W,\n    inheritables: K,\n    allFormatters: X,\n    Options: q,\n    parse: ie\n});\nconst ge = {\n    ifd0: !1,\n    ifd1: !1,\n    exif: !1,\n    gps: !1,\n    interop: !1,\n    sanitize: !1,\n    reviveValues: !0,\n    translateKeys: !1,\n    translateValues: !1,\n    mergeOutput: !1\n}, me = Object.assign({}, ge, {\n    firstChunkSize: 4e4,\n    gps: [\n        1,\n        2,\n        3,\n        4\n    ]\n});\nasync function Se(e) {\n    let t = new te(me);\n    await t.read(e);\n    let i = await t.parse();\n    if (i && i.gps) {\n        let { latitude: e, longitude: t } = i.gps;\n        return {\n            latitude: e,\n            longitude: t\n        };\n    }\n}\nconst Ce = Object.assign({}, ge, {\n    tiff: !1,\n    ifd1: !0,\n    mergeOutput: !1\n});\nasync function ye(e) {\n    let t = new te(Ce);\n    await t.read(e);\n    let i = await t.extractThumbnail();\n    return i && a ? s.from(i) : i;\n}\nasync function be(e) {\n    let t = await this.thumbnail(e);\n    if (void 0 !== t) {\n        let e = new Blob([\n            t\n        ]);\n        return URL.createObjectURL(e);\n    }\n}\nconst Ie = Object.assign({}, ge, {\n    firstChunkSize: 4e4,\n    ifd0: [\n        274\n    ]\n});\nasync function Pe(e) {\n    let t = new te(Ie);\n    await t.read(e);\n    let i = await t.parse();\n    if (i && i.ifd0) return i.ifd0[274];\n}\nconst ke = Object.freeze({\n    1: {\n        dimensionSwapped: !1,\n        scaleX: 1,\n        scaleY: 1,\n        deg: 0,\n        rad: 0\n    },\n    2: {\n        dimensionSwapped: !1,\n        scaleX: -1,\n        scaleY: 1,\n        deg: 0,\n        rad: 0\n    },\n    3: {\n        dimensionSwapped: !1,\n        scaleX: 1,\n        scaleY: 1,\n        deg: 180,\n        rad: 180 * Math.PI / 180\n    },\n    4: {\n        dimensionSwapped: !1,\n        scaleX: -1,\n        scaleY: 1,\n        deg: 180,\n        rad: 180 * Math.PI / 180\n    },\n    5: {\n        dimensionSwapped: !0,\n        scaleX: 1,\n        scaleY: -1,\n        deg: 90,\n        rad: 90 * Math.PI / 180\n    },\n    6: {\n        dimensionSwapped: !0,\n        scaleX: 1,\n        scaleY: 1,\n        deg: 90,\n        rad: 90 * Math.PI / 180\n    },\n    7: {\n        dimensionSwapped: !0,\n        scaleX: 1,\n        scaleY: -1,\n        deg: 270,\n        rad: 270 * Math.PI / 180\n    },\n    8: {\n        dimensionSwapped: !0,\n        scaleX: 1,\n        scaleY: 1,\n        deg: 270,\n        rad: 270 * Math.PI / 180\n    }\n});\nlet we = !0, Te = !0;\nif (\"object\" == typeof navigator) {\n    let e = navigator.userAgent;\n    if (e.includes(\"iPad\") || e.includes(\"iPhone\")) {\n        let t = e.match(/OS (\\d+)_(\\d+)/);\n        if (t) {\n            let [, e, i] = t, n = Number(e) + .1 * Number(i);\n            we = n < 13.4, Te = !1;\n        }\n    } else if (e.includes(\"OS X 10\")) {\n        let [, t] = e.match(/OS X 10[_.](\\d+)/);\n        we = Te = Number(t) < 15;\n    }\n    if (e.includes(\"Chrome/\")) {\n        let [, t] = e.match(/Chrome\\/(\\d+)/);\n        we = Te = Number(t) < 81;\n    } else if (e.includes(\"Firefox/\")) {\n        let [, t] = e.match(/Firefox\\/(\\d+)/);\n        we = Te = Number(t) < 77;\n    }\n}\nasync function Ae(e) {\n    let t = await Pe(e);\n    return Object.assign({\n        canvas: we,\n        css: Te\n    }, ke[t]);\n}\nclass De extends I {\n    constructor(...e){\n        super(...e), c(this, \"ranges\", new Oe), 0 !== this.byteLength && this.ranges.add(0, this.byteLength);\n    }\n    _tryExtend(e, t, i) {\n        if (0 === e && 0 === this.byteLength && i) {\n            let e = new DataView(i.buffer || i, i.byteOffset, i.byteLength);\n            this._swapDataView(e);\n        } else {\n            let i = e + t;\n            if (i > this.byteLength) {\n                let { dataView: e } = this._extend(i);\n                this._swapDataView(e);\n            }\n        }\n    }\n    _extend(e) {\n        let t;\n        t = a ? s.allocUnsafe(e) : new Uint8Array(e);\n        let i = new DataView(t.buffer, t.byteOffset, t.byteLength);\n        return t.set(new Uint8Array(this.buffer, this.byteOffset, this.byteLength), 0), {\n            uintView: t,\n            dataView: i\n        };\n    }\n    subarray(e, t, i = !1) {\n        return t = t || this._lengthToEnd(e), i && this._tryExtend(e, t), this.ranges.add(e, t), super.subarray(e, t);\n    }\n    set(e, t, i = !1) {\n        i && this._tryExtend(t, e.byteLength, e);\n        let n = super.set(e, t);\n        return this.ranges.add(t, n.byteLength), n;\n    }\n    async ensureChunk(e, t) {\n        this.chunked && (this.ranges.available(e, t) || await this.readChunk(e, t));\n    }\n    available(e, t) {\n        return this.ranges.available(e, t);\n    }\n}\nclass Oe {\n    constructor(){\n        c(this, \"list\", []);\n    }\n    get length() {\n        return this.list.length;\n    }\n    add(e, t, i = 0) {\n        let n = e + t, s = this.list.filter((t)=>xe(e, t.offset, n) || xe(e, t.end, n));\n        if (s.length > 0) {\n            e = Math.min(e, ...s.map((e)=>e.offset)), n = Math.max(n, ...s.map((e)=>e.end)), t = n - e;\n            let i = s.shift();\n            i.offset = e, i.length = t, i.end = n, this.list = this.list.filter((e)=>!s.includes(e));\n        } else this.list.push({\n            offset: e,\n            length: t,\n            end: n\n        });\n    }\n    available(e, t) {\n        let i = e + t;\n        return this.list.some((t)=>t.offset <= e && i <= t.end);\n    }\n}\nfunction xe(e, t, i) {\n    return e <= t && t <= i;\n}\nclass ve extends De {\n    constructor(e, t){\n        super(0), c(this, \"chunksRead\", 0), this.input = e, this.options = t;\n    }\n    async readWhole() {\n        this.chunked = !1, await this.readChunk(this.nextChunkOffset);\n    }\n    async readChunked() {\n        this.chunked = !0, await this.readChunk(0, this.options.firstChunkSize);\n    }\n    async readNextChunk(e = this.nextChunkOffset) {\n        if (this.fullyRead) return this.chunksRead++, !1;\n        let t = this.options.chunkSize, i = await this.readChunk(e, t);\n        return !!i && i.byteLength === t;\n    }\n    async readChunk(e, t) {\n        if (this.chunksRead++, 0 !== (t = this.safeWrapAddress(e, t))) return this._readChunk(e, t);\n    }\n    safeWrapAddress(e, t) {\n        return void 0 !== this.size && e + t > this.size ? Math.max(0, this.size - e) : t;\n    }\n    get nextChunkOffset() {\n        if (0 !== this.ranges.list.length) return this.ranges.list[0].length;\n    }\n    get canReadNextChunk() {\n        return this.chunksRead < this.options.chunkLimit;\n    }\n    get fullyRead() {\n        return void 0 !== this.size && this.nextChunkOffset === this.size;\n    }\n    read() {\n        return this.options.chunked ? this.readChunked() : this.readWhole();\n    }\n    close() {}\n}\nA.set(\"blob\", class extends ve {\n    async readWhole() {\n        this.chunked = !1;\n        let e = await R(this.input);\n        this._swapArrayBuffer(e);\n    }\n    readChunked() {\n        return this.chunked = !0, this.size = this.input.size, super.readChunked();\n    }\n    async _readChunk(e, t) {\n        let i = t ? e + t : void 0, n = this.input.slice(e, i), s = await R(n);\n        return this.set(s, e, !0);\n    }\n});\nvar Me = Object.freeze({\n    __proto__: null,\n    default: pe,\n    Exifr: te,\n    fileParsers: w,\n    segmentParsers: T,\n    fileReaders: A,\n    tagKeys: E,\n    tagValues: B,\n    tagRevivers: N,\n    createDictionary: U,\n    extendDictionary: F,\n    fetchUrlAsArrayBuffer: M,\n    readBlobAsArrayBuffer: R,\n    chunkedProps: G,\n    otherSegments: V,\n    segments: z,\n    tiffBlocks: H,\n    segmentsAndBlocks: j,\n    tiffExtractables: W,\n    inheritables: K,\n    allFormatters: X,\n    Options: q,\n    parse: ie,\n    gpsOnlyOptions: me,\n    gps: Se,\n    thumbnailOnlyOptions: Ce,\n    thumbnail: ye,\n    thumbnailUrl: be,\n    orientationOnlyOptions: Ie,\n    orientation: Pe,\n    rotations: ke,\n    get rotateCanvas () {\n        return we;\n    },\n    get rotateCss () {\n        return Te;\n    },\n    rotation: Ae\n});\nA.set(\"url\", class extends ve {\n    async readWhole() {\n        this.chunked = !1;\n        let e = await M(this.input);\n        e instanceof ArrayBuffer ? this._swapArrayBuffer(e) : e instanceof Uint8Array && this._swapBuffer(e);\n    }\n    async _readChunk(e, t) {\n        let i = t ? e + t - 1 : void 0, n = this.options.httpHeaders || {};\n        (e || i) && (n.range = `bytes=${[\n            e,\n            i\n        ].join(\"-\")}`);\n        let s = await h(this.input, {\n            headers: n\n        }), r = await s.arrayBuffer(), a = r.byteLength;\n        if (416 !== s.status) return a !== t && (this.size = e + a), this.set(r, e, !0);\n    }\n});\nI.prototype.getUint64 = function(e) {\n    let t = this.getUint32(e), i = this.getUint32(e + 4);\n    return t < 1048575 ? t << 32 | i : void 0 !== typeof r ? (console.warn(\"Using BigInt because of type 64uint but JS can only handle 53b numbers.\"), r(t) << r(32) | r(i)) : void g(\"Trying to read 64b value but JS can only handle 53b numbers.\");\n};\nclass Re extends se {\n    parseBoxes(e = 0) {\n        let t = [];\n        for(; e < this.file.byteLength - 4;){\n            let i = this.parseBoxHead(e);\n            if (t.push(i), 0 === i.length) break;\n            e += i.length;\n        }\n        return t;\n    }\n    parseSubBoxes(e) {\n        e.boxes = this.parseBoxes(e.start);\n    }\n    findBox(e, t) {\n        return void 0 === e.boxes && this.parseSubBoxes(e), e.boxes.find((e)=>e.kind === t);\n    }\n    parseBoxHead(e) {\n        let t = this.file.getUint32(e), i = this.file.getString(e + 4, 4), n = e + 8;\n        return 1 === t && (t = this.file.getUint64(e + 8), n += 8), {\n            offset: e,\n            length: t,\n            kind: i,\n            start: n\n        };\n    }\n    parseBoxFullHead(e) {\n        if (void 0 !== e.version) return;\n        let t = this.file.getUint32(e.start);\n        e.version = t >> 24, e.start += 4;\n    }\n}\nclass Le extends Re {\n    static canHandle(e, t) {\n        if (0 !== t) return !1;\n        let i = e.getUint16(2);\n        if (i > 50) return !1;\n        let n = 16, s = [];\n        for(; n < i;)s.push(e.getString(n, 4)), n += 4;\n        return s.includes(this.type);\n    }\n    async parse() {\n        let e = this.file.getUint32(0), t = this.parseBoxHead(e);\n        for(; \"meta\" !== t.kind;)e += t.length, await this.file.ensureChunk(e, 16), t = this.parseBoxHead(e);\n        await this.file.ensureChunk(t.offset, t.length), this.parseBoxFullHead(t), this.parseSubBoxes(t), this.options.icc.enabled && await this.findIcc(t), this.options.tiff.enabled && await this.findExif(t);\n    }\n    async registerSegment(e, t, i) {\n        await this.file.ensureChunk(t, i);\n        let n = this.file.subarray(t, i);\n        this.createParser(e, n);\n    }\n    async findIcc(e) {\n        let t = this.findBox(e, \"iprp\");\n        if (void 0 === t) return;\n        let i = this.findBox(t, \"ipco\");\n        if (void 0 === i) return;\n        let n = this.findBox(i, \"colr\");\n        void 0 !== n && await this.registerSegment(\"icc\", n.offset + 12, n.length);\n    }\n    async findExif(e) {\n        let t = this.findBox(e, \"iinf\");\n        if (void 0 === t) return;\n        let i = this.findBox(e, \"iloc\");\n        if (void 0 === i) return;\n        let n = this.findExifLocIdInIinf(t), s = this.findExtentInIloc(i, n);\n        if (void 0 === s) return;\n        let [r, a] = s;\n        await this.file.ensureChunk(r, a);\n        let o = 4 + this.file.getUint32(r);\n        r += o, a -= o, await this.registerSegment(\"tiff\", r, a);\n    }\n    findExifLocIdInIinf(e) {\n        this.parseBoxFullHead(e);\n        let t, i, n, s, r = e.start, a = this.file.getUint16(r);\n        for(r += 2; a--;){\n            if (t = this.parseBoxHead(r), this.parseBoxFullHead(t), i = t.start, t.version >= 2 && (n = 3 === t.version ? 4 : 2, s = this.file.getString(i + n + 2, 4), \"Exif\" === s)) return this.file.getUintBytes(i, n);\n            r += t.length;\n        }\n    }\n    get8bits(e) {\n        let t = this.file.getUint8(e);\n        return [\n            t >> 4,\n            15 & t\n        ];\n    }\n    findExtentInIloc(e, t) {\n        this.parseBoxFullHead(e);\n        let i = e.start, [n, s] = this.get8bits(i++), [r, a] = this.get8bits(i++), o = 2 === e.version ? 4 : 2, l = 1 === e.version || 2 === e.version ? 2 : 0, h = a + n + s, u = 2 === e.version ? 4 : 2, c = this.file.getUintBytes(i, u);\n        for(i += u; c--;){\n            let e = this.file.getUintBytes(i, o);\n            i += o + l + 2 + r;\n            let u = this.file.getUint16(i);\n            if (i += 2, e === t) return u > 1 && console.warn(\"ILOC box has more than one extent but we're only processing one\\nPlease create an issue at https://github.com/MikeKovarik/exifr with this file\"), [\n                this.file.getUintBytes(i + a, n),\n                this.file.getUintBytes(i + a + n, s)\n            ];\n            i += u * h;\n        }\n    }\n}\nclass Ue extends Le {\n}\nc(Ue, \"type\", \"heic\");\nclass Fe extends Le {\n}\nc(Fe, \"type\", \"avif\"), w.set(\"heic\", Ue), w.set(\"avif\", Fe), U(E, [\n    \"ifd0\",\n    \"ifd1\"\n], [\n    [\n        256,\n        \"ImageWidth\"\n    ],\n    [\n        257,\n        \"ImageHeight\"\n    ],\n    [\n        258,\n        \"BitsPerSample\"\n    ],\n    [\n        259,\n        \"Compression\"\n    ],\n    [\n        262,\n        \"PhotometricInterpretation\"\n    ],\n    [\n        270,\n        \"ImageDescription\"\n    ],\n    [\n        271,\n        \"Make\"\n    ],\n    [\n        272,\n        \"Model\"\n    ],\n    [\n        273,\n        \"StripOffsets\"\n    ],\n    [\n        274,\n        \"Orientation\"\n    ],\n    [\n        277,\n        \"SamplesPerPixel\"\n    ],\n    [\n        278,\n        \"RowsPerStrip\"\n    ],\n    [\n        279,\n        \"StripByteCounts\"\n    ],\n    [\n        282,\n        \"XResolution\"\n    ],\n    [\n        283,\n        \"YResolution\"\n    ],\n    [\n        284,\n        \"PlanarConfiguration\"\n    ],\n    [\n        296,\n        \"ResolutionUnit\"\n    ],\n    [\n        301,\n        \"TransferFunction\"\n    ],\n    [\n        305,\n        \"Software\"\n    ],\n    [\n        306,\n        \"ModifyDate\"\n    ],\n    [\n        315,\n        \"Artist\"\n    ],\n    [\n        316,\n        \"HostComputer\"\n    ],\n    [\n        317,\n        \"Predictor\"\n    ],\n    [\n        318,\n        \"WhitePoint\"\n    ],\n    [\n        319,\n        \"PrimaryChromaticities\"\n    ],\n    [\n        513,\n        \"ThumbnailOffset\"\n    ],\n    [\n        514,\n        \"ThumbnailLength\"\n    ],\n    [\n        529,\n        \"YCbCrCoefficients\"\n    ],\n    [\n        530,\n        \"YCbCrSubSampling\"\n    ],\n    [\n        531,\n        \"YCbCrPositioning\"\n    ],\n    [\n        532,\n        \"ReferenceBlackWhite\"\n    ],\n    [\n        700,\n        \"ApplicationNotes\"\n    ],\n    [\n        33432,\n        \"Copyright\"\n    ],\n    [\n        33723,\n        \"IPTC\"\n    ],\n    [\n        34665,\n        \"ExifIFD\"\n    ],\n    [\n        34675,\n        \"ICC\"\n    ],\n    [\n        34853,\n        \"GpsIFD\"\n    ],\n    [\n        330,\n        \"SubIFD\"\n    ],\n    [\n        40965,\n        \"InteropIFD\"\n    ],\n    [\n        40091,\n        \"XPTitle\"\n    ],\n    [\n        40092,\n        \"XPComment\"\n    ],\n    [\n        40093,\n        \"XPAuthor\"\n    ],\n    [\n        40094,\n        \"XPKeywords\"\n    ],\n    [\n        40095,\n        \"XPSubject\"\n    ]\n]), U(E, \"exif\", [\n    [\n        33434,\n        \"ExposureTime\"\n    ],\n    [\n        33437,\n        \"FNumber\"\n    ],\n    [\n        34850,\n        \"ExposureProgram\"\n    ],\n    [\n        34852,\n        \"SpectralSensitivity\"\n    ],\n    [\n        34855,\n        \"ISO\"\n    ],\n    [\n        34858,\n        \"TimeZoneOffset\"\n    ],\n    [\n        34859,\n        \"SelfTimerMode\"\n    ],\n    [\n        34864,\n        \"SensitivityType\"\n    ],\n    [\n        34865,\n        \"StandardOutputSensitivity\"\n    ],\n    [\n        34866,\n        \"RecommendedExposureIndex\"\n    ],\n    [\n        34867,\n        \"ISOSpeed\"\n    ],\n    [\n        34868,\n        \"ISOSpeedLatitudeyyy\"\n    ],\n    [\n        34869,\n        \"ISOSpeedLatitudezzz\"\n    ],\n    [\n        36864,\n        \"ExifVersion\"\n    ],\n    [\n        36867,\n        \"DateTimeOriginal\"\n    ],\n    [\n        36868,\n        \"CreateDate\"\n    ],\n    [\n        36873,\n        \"GooglePlusUploadCode\"\n    ],\n    [\n        36880,\n        \"OffsetTime\"\n    ],\n    [\n        36881,\n        \"OffsetTimeOriginal\"\n    ],\n    [\n        36882,\n        \"OffsetTimeDigitized\"\n    ],\n    [\n        37121,\n        \"ComponentsConfiguration\"\n    ],\n    [\n        37122,\n        \"CompressedBitsPerPixel\"\n    ],\n    [\n        37377,\n        \"ShutterSpeedValue\"\n    ],\n    [\n        37378,\n        \"ApertureValue\"\n    ],\n    [\n        37379,\n        \"BrightnessValue\"\n    ],\n    [\n        37380,\n        \"ExposureCompensation\"\n    ],\n    [\n        37381,\n        \"MaxApertureValue\"\n    ],\n    [\n        37382,\n        \"SubjectDistance\"\n    ],\n    [\n        37383,\n        \"MeteringMode\"\n    ],\n    [\n        37384,\n        \"LightSource\"\n    ],\n    [\n        37385,\n        \"Flash\"\n    ],\n    [\n        37386,\n        \"FocalLength\"\n    ],\n    [\n        37393,\n        \"ImageNumber\"\n    ],\n    [\n        37394,\n        \"SecurityClassification\"\n    ],\n    [\n        37395,\n        \"ImageHistory\"\n    ],\n    [\n        37396,\n        \"SubjectArea\"\n    ],\n    [\n        37500,\n        \"MakerNote\"\n    ],\n    [\n        37510,\n        \"UserComment\"\n    ],\n    [\n        37520,\n        \"SubSecTime\"\n    ],\n    [\n        37521,\n        \"SubSecTimeOriginal\"\n    ],\n    [\n        37522,\n        \"SubSecTimeDigitized\"\n    ],\n    [\n        37888,\n        \"AmbientTemperature\"\n    ],\n    [\n        37889,\n        \"Humidity\"\n    ],\n    [\n        37890,\n        \"Pressure\"\n    ],\n    [\n        37891,\n        \"WaterDepth\"\n    ],\n    [\n        37892,\n        \"Acceleration\"\n    ],\n    [\n        37893,\n        \"CameraElevationAngle\"\n    ],\n    [\n        40960,\n        \"FlashpixVersion\"\n    ],\n    [\n        40961,\n        \"ColorSpace\"\n    ],\n    [\n        40962,\n        \"ExifImageWidth\"\n    ],\n    [\n        40963,\n        \"ExifImageHeight\"\n    ],\n    [\n        40964,\n        \"RelatedSoundFile\"\n    ],\n    [\n        41483,\n        \"FlashEnergy\"\n    ],\n    [\n        41486,\n        \"FocalPlaneXResolution\"\n    ],\n    [\n        41487,\n        \"FocalPlaneYResolution\"\n    ],\n    [\n        41488,\n        \"FocalPlaneResolutionUnit\"\n    ],\n    [\n        41492,\n        \"SubjectLocation\"\n    ],\n    [\n        41493,\n        \"ExposureIndex\"\n    ],\n    [\n        41495,\n        \"SensingMethod\"\n    ],\n    [\n        41728,\n        \"FileSource\"\n    ],\n    [\n        41729,\n        \"SceneType\"\n    ],\n    [\n        41730,\n        \"CFAPattern\"\n    ],\n    [\n        41985,\n        \"CustomRendered\"\n    ],\n    [\n        41986,\n        \"ExposureMode\"\n    ],\n    [\n        41987,\n        \"WhiteBalance\"\n    ],\n    [\n        41988,\n        \"DigitalZoomRatio\"\n    ],\n    [\n        41989,\n        \"FocalLengthIn35mmFormat\"\n    ],\n    [\n        41990,\n        \"SceneCaptureType\"\n    ],\n    [\n        41991,\n        \"GainControl\"\n    ],\n    [\n        41992,\n        \"Contrast\"\n    ],\n    [\n        41993,\n        \"Saturation\"\n    ],\n    [\n        41994,\n        \"Sharpness\"\n    ],\n    [\n        41996,\n        \"SubjectDistanceRange\"\n    ],\n    [\n        42016,\n        \"ImageUniqueID\"\n    ],\n    [\n        42032,\n        \"OwnerName\"\n    ],\n    [\n        42033,\n        \"SerialNumber\"\n    ],\n    [\n        42034,\n        \"LensInfo\"\n    ],\n    [\n        42035,\n        \"LensMake\"\n    ],\n    [\n        42036,\n        \"LensModel\"\n    ],\n    [\n        42037,\n        \"LensSerialNumber\"\n    ],\n    [\n        42080,\n        \"CompositeImage\"\n    ],\n    [\n        42081,\n        \"CompositeImageCount\"\n    ],\n    [\n        42082,\n        \"CompositeImageExposureTimes\"\n    ],\n    [\n        42240,\n        \"Gamma\"\n    ],\n    [\n        59932,\n        \"Padding\"\n    ],\n    [\n        59933,\n        \"OffsetSchema\"\n    ],\n    [\n        65e3,\n        \"OwnerName\"\n    ],\n    [\n        65001,\n        \"SerialNumber\"\n    ],\n    [\n        65002,\n        \"Lens\"\n    ],\n    [\n        65100,\n        \"RawFile\"\n    ],\n    [\n        65101,\n        \"Converter\"\n    ],\n    [\n        65102,\n        \"WhiteBalance\"\n    ],\n    [\n        65105,\n        \"Exposure\"\n    ],\n    [\n        65106,\n        \"Shadows\"\n    ],\n    [\n        65107,\n        \"Brightness\"\n    ],\n    [\n        65108,\n        \"Contrast\"\n    ],\n    [\n        65109,\n        \"Saturation\"\n    ],\n    [\n        65110,\n        \"Sharpness\"\n    ],\n    [\n        65111,\n        \"Smoothness\"\n    ],\n    [\n        65112,\n        \"MoireFilter\"\n    ],\n    [\n        40965,\n        \"InteropIFD\"\n    ]\n]), U(E, \"gps\", [\n    [\n        0,\n        \"GPSVersionID\"\n    ],\n    [\n        1,\n        \"GPSLatitudeRef\"\n    ],\n    [\n        2,\n        \"GPSLatitude\"\n    ],\n    [\n        3,\n        \"GPSLongitudeRef\"\n    ],\n    [\n        4,\n        \"GPSLongitude\"\n    ],\n    [\n        5,\n        \"GPSAltitudeRef\"\n    ],\n    [\n        6,\n        \"GPSAltitude\"\n    ],\n    [\n        7,\n        \"GPSTimeStamp\"\n    ],\n    [\n        8,\n        \"GPSSatellites\"\n    ],\n    [\n        9,\n        \"GPSStatus\"\n    ],\n    [\n        10,\n        \"GPSMeasureMode\"\n    ],\n    [\n        11,\n        \"GPSDOP\"\n    ],\n    [\n        12,\n        \"GPSSpeedRef\"\n    ],\n    [\n        13,\n        \"GPSSpeed\"\n    ],\n    [\n        14,\n        \"GPSTrackRef\"\n    ],\n    [\n        15,\n        \"GPSTrack\"\n    ],\n    [\n        16,\n        \"GPSImgDirectionRef\"\n    ],\n    [\n        17,\n        \"GPSImgDirection\"\n    ],\n    [\n        18,\n        \"GPSMapDatum\"\n    ],\n    [\n        19,\n        \"GPSDestLatitudeRef\"\n    ],\n    [\n        20,\n        \"GPSDestLatitude\"\n    ],\n    [\n        21,\n        \"GPSDestLongitudeRef\"\n    ],\n    [\n        22,\n        \"GPSDestLongitude\"\n    ],\n    [\n        23,\n        \"GPSDestBearingRef\"\n    ],\n    [\n        24,\n        \"GPSDestBearing\"\n    ],\n    [\n        25,\n        \"GPSDestDistanceRef\"\n    ],\n    [\n        26,\n        \"GPSDestDistance\"\n    ],\n    [\n        27,\n        \"GPSProcessingMethod\"\n    ],\n    [\n        28,\n        \"GPSAreaInformation\"\n    ],\n    [\n        29,\n        \"GPSDateStamp\"\n    ],\n    [\n        30,\n        \"GPSDifferential\"\n    ],\n    [\n        31,\n        \"GPSHPositioningError\"\n    ]\n]), U(B, [\n    \"ifd0\",\n    \"ifd1\"\n], [\n    [\n        274,\n        {\n            1: \"Horizontal (normal)\",\n            2: \"Mirror horizontal\",\n            3: \"Rotate 180\",\n            4: \"Mirror vertical\",\n            5: \"Mirror horizontal and rotate 270 CW\",\n            6: \"Rotate 90 CW\",\n            7: \"Mirror horizontal and rotate 90 CW\",\n            8: \"Rotate 270 CW\"\n        }\n    ],\n    [\n        296,\n        {\n            1: \"None\",\n            2: \"inches\",\n            3: \"cm\"\n        }\n    ]\n]);\nlet Ee = U(B, \"exif\", [\n    [\n        34850,\n        {\n            0: \"Not defined\",\n            1: \"Manual\",\n            2: \"Normal program\",\n            3: \"Aperture priority\",\n            4: \"Shutter priority\",\n            5: \"Creative program\",\n            6: \"Action program\",\n            7: \"Portrait mode\",\n            8: \"Landscape mode\"\n        }\n    ],\n    [\n        37121,\n        {\n            0: \"-\",\n            1: \"Y\",\n            2: \"Cb\",\n            3: \"Cr\",\n            4: \"R\",\n            5: \"G\",\n            6: \"B\"\n        }\n    ],\n    [\n        37383,\n        {\n            0: \"Unknown\",\n            1: \"Average\",\n            2: \"CenterWeightedAverage\",\n            3: \"Spot\",\n            4: \"MultiSpot\",\n            5: \"Pattern\",\n            6: \"Partial\",\n            255: \"Other\"\n        }\n    ],\n    [\n        37384,\n        {\n            0: \"Unknown\",\n            1: \"Daylight\",\n            2: \"Fluorescent\",\n            3: \"Tungsten (incandescent light)\",\n            4: \"Flash\",\n            9: \"Fine weather\",\n            10: \"Cloudy weather\",\n            11: \"Shade\",\n            12: \"Daylight fluorescent (D 5700 - 7100K)\",\n            13: \"Day white fluorescent (N 4600 - 5400K)\",\n            14: \"Cool white fluorescent (W 3900 - 4500K)\",\n            15: \"White fluorescent (WW 3200 - 3700K)\",\n            17: \"Standard light A\",\n            18: \"Standard light B\",\n            19: \"Standard light C\",\n            20: \"D55\",\n            21: \"D65\",\n            22: \"D75\",\n            23: \"D50\",\n            24: \"ISO studio tungsten\",\n            255: \"Other\"\n        }\n    ],\n    [\n        37385,\n        {\n            0: \"Flash did not fire\",\n            1: \"Flash fired\",\n            5: \"Strobe return light not detected\",\n            7: \"Strobe return light detected\",\n            9: \"Flash fired, compulsory flash mode\",\n            13: \"Flash fired, compulsory flash mode, return light not detected\",\n            15: \"Flash fired, compulsory flash mode, return light detected\",\n            16: \"Flash did not fire, compulsory flash mode\",\n            24: \"Flash did not fire, auto mode\",\n            25: \"Flash fired, auto mode\",\n            29: \"Flash fired, auto mode, return light not detected\",\n            31: \"Flash fired, auto mode, return light detected\",\n            32: \"No flash function\",\n            65: \"Flash fired, red-eye reduction mode\",\n            69: \"Flash fired, red-eye reduction mode, return light not detected\",\n            71: \"Flash fired, red-eye reduction mode, return light detected\",\n            73: \"Flash fired, compulsory flash mode, red-eye reduction mode\",\n            77: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected\",\n            79: \"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected\",\n            89: \"Flash fired, auto mode, red-eye reduction mode\",\n            93: \"Flash fired, auto mode, return light not detected, red-eye reduction mode\",\n            95: \"Flash fired, auto mode, return light detected, red-eye reduction mode\"\n        }\n    ],\n    [\n        41495,\n        {\n            1: \"Not defined\",\n            2: \"One-chip color area sensor\",\n            3: \"Two-chip color area sensor\",\n            4: \"Three-chip color area sensor\",\n            5: \"Color sequential area sensor\",\n            7: \"Trilinear sensor\",\n            8: \"Color sequential linear sensor\"\n        }\n    ],\n    [\n        41728,\n        {\n            1: \"Film Scanner\",\n            2: \"Reflection Print Scanner\",\n            3: \"Digital Camera\"\n        }\n    ],\n    [\n        41729,\n        {\n            1: \"Directly photographed\"\n        }\n    ],\n    [\n        41985,\n        {\n            0: \"Normal\",\n            1: \"Custom\",\n            2: \"HDR (no original saved)\",\n            3: \"HDR (original saved)\",\n            4: \"Original (for HDR)\",\n            6: \"Panorama\",\n            7: \"Portrait HDR\",\n            8: \"Portrait\"\n        }\n    ],\n    [\n        41986,\n        {\n            0: \"Auto\",\n            1: \"Manual\",\n            2: \"Auto bracket\"\n        }\n    ],\n    [\n        41987,\n        {\n            0: \"Auto\",\n            1: \"Manual\"\n        }\n    ],\n    [\n        41990,\n        {\n            0: \"Standard\",\n            1: \"Landscape\",\n            2: \"Portrait\",\n            3: \"Night\",\n            4: \"Other\"\n        }\n    ],\n    [\n        41991,\n        {\n            0: \"None\",\n            1: \"Low gain up\",\n            2: \"High gain up\",\n            3: \"Low gain down\",\n            4: \"High gain down\"\n        }\n    ],\n    [\n        41996,\n        {\n            0: \"Unknown\",\n            1: \"Macro\",\n            2: \"Close\",\n            3: \"Distant\"\n        }\n    ],\n    [\n        42080,\n        {\n            0: \"Unknown\",\n            1: \"Not a Composite Image\",\n            2: \"General Composite Image\",\n            3: \"Composite Image Captured While Shooting\"\n        }\n    ]\n]);\nconst Be = {\n    1: \"No absolute unit of measurement\",\n    2: \"Inch\",\n    3: \"Centimeter\"\n};\nEe.set(37392, Be), Ee.set(41488, Be);\nconst Ne = {\n    0: \"Normal\",\n    1: \"Low\",\n    2: \"High\"\n};\nfunction Ge(e) {\n    return \"object\" == typeof e && void 0 !== e.length ? e[0] : e;\n}\nfunction Ve(e) {\n    let t = Array.from(e).slice(1);\n    return t[1] > 15 && (t = t.map((e)=>String.fromCharCode(e))), \"0\" !== t[2] && 0 !== t[2] || t.pop(), t.join(\".\");\n}\nfunction ze(e) {\n    if (\"string\" == typeof e) {\n        var [t, i, n, s, r, a] = e.trim().split(/[-: ]/g).map(Number), o = new Date(t, i - 1, n);\n        return Number.isNaN(s) || Number.isNaN(r) || Number.isNaN(a) || (o.setHours(s), o.setMinutes(r), o.setSeconds(a)), Number.isNaN(+o) ? e : o;\n    }\n}\nfunction He(e) {\n    if (\"string\" == typeof e) return e;\n    let t = [];\n    if (0 === e[1] && 0 === e[e.length - 1]) for(let i = 0; i < e.length; i += 2)t.push(je(e[i + 1], e[i]));\n    else for(let i = 0; i < e.length; i += 2)t.push(je(e[i], e[i + 1]));\n    return m(String.fromCodePoint(...t));\n}\nfunction je(e, t) {\n    return e << 8 | t;\n}\nEe.set(41992, Ne), Ee.set(41993, Ne), Ee.set(41994, Ne), U(N, [\n    \"ifd0\",\n    \"ifd1\"\n], [\n    [\n        50827,\n        function(e) {\n            return \"string\" != typeof e ? b(e) : e;\n        }\n    ],\n    [\n        306,\n        ze\n    ],\n    [\n        40091,\n        He\n    ],\n    [\n        40092,\n        He\n    ],\n    [\n        40093,\n        He\n    ],\n    [\n        40094,\n        He\n    ],\n    [\n        40095,\n        He\n    ]\n]), U(N, \"exif\", [\n    [\n        40960,\n        Ve\n    ],\n    [\n        36864,\n        Ve\n    ],\n    [\n        36867,\n        ze\n    ],\n    [\n        36868,\n        ze\n    ],\n    [\n        40962,\n        Ge\n    ],\n    [\n        40963,\n        Ge\n    ]\n]), U(N, \"gps\", [\n    [\n        0,\n        (e)=>Array.from(e).join(\".\")\n    ],\n    [\n        7,\n        (e)=>Array.from(e).join(\":\")\n    ]\n]);\nclass We extends re {\n    static canHandle(e, t) {\n        return 225 === e.getUint8(t + 1) && 1752462448 === e.getUint32(t + 4) && \"http://ns.adobe.com/\" === e.getString(t + 4, \"http://ns.adobe.com/\".length);\n    }\n    static headerLength(e, t) {\n        return \"http://ns.adobe.com/xmp/extension/\" === e.getString(t + 4, \"http://ns.adobe.com/xmp/extension/\".length) ? 79 : 4 + \"http://ns.adobe.com/xap/1.0/\".length + 1;\n    }\n    static findPosition(e, t) {\n        let i = super.findPosition(e, t);\n        return i.multiSegment = i.extended = 79 === i.headerLength, i.multiSegment ? (i.chunkCount = e.getUint8(t + 72), i.chunkNumber = e.getUint8(t + 76), 0 !== e.getUint8(t + 77) && i.chunkNumber++) : (i.chunkCount = 1 / 0, i.chunkNumber = -1), i;\n    }\n    static handleMultiSegments(e) {\n        return e.map((e)=>e.chunk.getString()).join(\"\");\n    }\n    normalizeInput(e) {\n        return \"string\" == typeof e ? e : I.from(e).getString();\n    }\n    parse(e = this.chunk) {\n        if (!this.localOptions.parse) return e;\n        e = function(e) {\n            let t = {}, i = {};\n            for (let e of Ze)t[e] = [], i[e] = 0;\n            return e.replace(et, (e, n, s)=>{\n                if (\"<\" === n) {\n                    let n = ++i[s];\n                    return t[s].push(n), `${e}#${n}`;\n                }\n                return `${e}#${t[s].pop()}`;\n            });\n        }(e);\n        let t = Xe.findAll(e, \"rdf\", \"Description\");\n        0 === t.length && t.push(new Xe(\"rdf\", \"Description\", void 0, e));\n        let i, n = {};\n        for (let e of t)for (let t of e.properties)i = Je(t.ns, n), _e(t, i);\n        return function(e) {\n            let t;\n            for(let i in e)t = e[i] = f(e[i]), void 0 === t && delete e[i];\n            return f(e);\n        }(n);\n    }\n    assignToOutput(e, t) {\n        if (this.localOptions.parse) for (let [i, n] of Object.entries(t))switch(i){\n            case \"tiff\":\n                this.assignObjectToOutput(e, \"ifd0\", n);\n                break;\n            case \"exif\":\n                this.assignObjectToOutput(e, \"exif\", n);\n                break;\n            case \"xmlns\":\n                break;\n            default:\n                this.assignObjectToOutput(e, i, n);\n        }\n        else e.xmp = t;\n    }\n}\nc(We, \"type\", \"xmp\"), c(We, \"multiSegment\", !0), T.set(\"xmp\", We);\nclass Ke {\n    static findAll(e) {\n        return qe(e, /([a-zA-Z0-9-]+):([a-zA-Z0-9-]+)=(\"[^\"]*\"|'[^']*')/gm).map(Ke.unpackMatch);\n    }\n    static unpackMatch(e) {\n        let t = e[1], i = e[2], n = e[3].slice(1, -1);\n        return n = Qe(n), new Ke(t, i, n);\n    }\n    constructor(e, t, i){\n        this.ns = e, this.name = t, this.value = i;\n    }\n    serialize() {\n        return this.value;\n    }\n}\nclass Xe {\n    static findAll(e, t, i) {\n        if (void 0 !== t || void 0 !== i) {\n            t = t || \"[\\\\w\\\\d-]+\", i = i || \"[\\\\w\\\\d-]+\";\n            var n = new RegExp(`<(${t}):(${i})(#\\\\d+)?((\\\\s+?[\\\\w\\\\d-:]+=(\"[^\"]*\"|'[^']*'))*\\\\s*)(\\\\/>|>([\\\\s\\\\S]*?)<\\\\/\\\\1:\\\\2\\\\3>)`, \"gm\");\n        } else n = /<([\\w\\d-]+):([\\w\\d-]+)(#\\d+)?((\\s+?[\\w\\d-:]+=(\"[^\"]*\"|'[^']*'))*\\s*)(\\/>|>([\\s\\S]*?)<\\/\\1:\\2\\3>)/gm;\n        return qe(e, n).map(Xe.unpackMatch);\n    }\n    static unpackMatch(e) {\n        let t = e[1], i = e[2], n = e[4], s = e[8];\n        return new Xe(t, i, n, s);\n    }\n    constructor(e, t, i, n){\n        this.ns = e, this.name = t, this.attrString = i, this.innerXml = n, this.attrs = Ke.findAll(i), this.children = Xe.findAll(n), this.value = 0 === this.children.length ? Qe(n) : void 0, this.properties = [\n            ...this.attrs,\n            ...this.children\n        ];\n    }\n    get isPrimitive() {\n        return void 0 !== this.value && 0 === this.attrs.length && 0 === this.children.length;\n    }\n    get isListContainer() {\n        return 1 === this.children.length && this.children[0].isList;\n    }\n    get isList() {\n        let { ns: e, name: t } = this;\n        return \"rdf\" === e && (\"Seq\" === t || \"Bag\" === t || \"Alt\" === t);\n    }\n    get isListItem() {\n        return \"rdf\" === this.ns && \"li\" === this.name;\n    }\n    serialize() {\n        if (0 === this.properties.length && void 0 === this.value) return;\n        if (this.isPrimitive) return this.value;\n        if (this.isListContainer) return this.children[0].serialize();\n        if (this.isList) return $e(this.children.map(Ye));\n        if (this.isListItem && 1 === this.children.length && 0 === this.attrs.length) return this.children[0].serialize();\n        let e = {};\n        for (let t of this.properties)_e(t, e);\n        return void 0 !== this.value && (e.value = this.value), f(e);\n    }\n}\nfunction _e(e, t) {\n    let i = e.serialize();\n    void 0 !== i && (t[e.name] = i);\n}\nvar Ye = (e)=>e.serialize(), $e = (e)=>1 === e.length ? e[0] : e, Je = (e, t)=>t[e] ? t[e] : t[e] = {};\nfunction qe(e, t) {\n    let i, n = [];\n    if (!e) return n;\n    for(; null !== (i = t.exec(e));)n.push(i);\n    return n;\n}\nfunction Qe(e) {\n    if (function(e) {\n        return null == e || \"null\" === e || \"undefined\" === e || \"\" === e || \"\" === e.trim();\n    }(e)) return;\n    let t = Number(e);\n    if (!Number.isNaN(t)) return t;\n    let i = e.toLowerCase();\n    return \"true\" === i || \"false\" !== i && e.trim();\n}\nconst Ze = [\n    \"rdf:li\",\n    \"rdf:Seq\",\n    \"rdf:Bag\",\n    \"rdf:Alt\",\n    \"rdf:Description\"\n], et = new RegExp(`(<|\\\\/)(${Ze.join(\"|\")})`, \"g\");\nvar tt = Object.freeze({\n    __proto__: null,\n    default: Me,\n    Exifr: te,\n    fileParsers: w,\n    segmentParsers: T,\n    fileReaders: A,\n    tagKeys: E,\n    tagValues: B,\n    tagRevivers: N,\n    createDictionary: U,\n    extendDictionary: F,\n    fetchUrlAsArrayBuffer: M,\n    readBlobAsArrayBuffer: R,\n    chunkedProps: G,\n    otherSegments: V,\n    segments: z,\n    tiffBlocks: H,\n    segmentsAndBlocks: j,\n    tiffExtractables: W,\n    inheritables: K,\n    allFormatters: X,\n    Options: q,\n    parse: ie,\n    gpsOnlyOptions: me,\n    gps: Se,\n    thumbnailOnlyOptions: Ce,\n    thumbnail: ye,\n    thumbnailUrl: be,\n    orientationOnlyOptions: Ie,\n    orientation: Pe,\n    rotations: ke,\n    get rotateCanvas () {\n        return we;\n    },\n    get rotateCss () {\n        return Te;\n    },\n    rotation: Ae\n});\nconst it = [\n    \"xmp\",\n    \"icc\",\n    \"iptc\",\n    \"tiff\"\n], nt = ()=>{};\nasync function st(e, t, i) {\n    let n = new q(t);\n    n.chunked = !1, void 0 === i && \"string\" == typeof e && (i = function(e) {\n        let t = e.toLowerCase().split(\".\").pop();\n        if (function(e) {\n            return \"exif\" === e || \"tiff\" === e || \"tif\" === e;\n        }(t)) return \"tiff\";\n        if (it.includes(t)) return t;\n    }(e));\n    let s = await D(e, n);\n    if (i) {\n        if (it.includes(i)) return rt(i, s, n);\n        g(\"Invalid segment type\");\n    } else {\n        if (function(e) {\n            let t = e.getString(0, 50).trim();\n            return t.includes(\"<?xpacket\") || t.includes(\"<x:\");\n        }(s)) return rt(\"xmp\", s, n);\n        for (let [e] of T){\n            if (!it.includes(e)) continue;\n            let t = await rt(e, s, n).catch(nt);\n            if (t) return t;\n        }\n        g(\"Unknown file format\");\n    }\n}\nasync function rt(e, t, i) {\n    let n = i[e];\n    return n.enabled = !0, n.parse = !0, T.get(e).parse(t, n);\n}\nlet at = l(\"fs\", (e)=>e.promises);\nA.set(\"fs\", class extends ve {\n    async readWhole() {\n        this.chunked = !1, this.fs = await at;\n        let e = await this.fs.readFile(this.input);\n        this._swapBuffer(e);\n    }\n    async readChunked() {\n        this.chunked = !0, this.fs = await at, await this.open(), await this.readChunk(0, this.options.firstChunkSize);\n    }\n    async open() {\n        void 0 === this.fh && (this.fh = await this.fs.open(this.input, \"r\"), this.size = (await this.fh.stat(this.input)).size);\n    }\n    async _readChunk(e, t) {\n        void 0 === this.fh && await this.open(), e + t > this.size && (t = this.size - e);\n        var i = this.subarray(e, t, !0);\n        return await this.fh.read(i.dataView, 0, t, e), i;\n    }\n    async close() {\n        if (this.fh) {\n            let e = this.fh;\n            this.fh = void 0, await e.close();\n        }\n    }\n});\nA.set(\"base64\", class extends ve {\n    constructor(...e){\n        super(...e), this.input = this.input.replace(/^data:([^;]+);base64,/gim, \"\"), this.size = this.input.length / 4 * 3, this.input.endsWith(\"==\") ? this.size -= 2 : this.input.endsWith(\"=\") && (this.size -= 1);\n    }\n    async _readChunk(e, t) {\n        let i, n, r = this.input;\n        void 0 === e ? (e = 0, i = 0, n = 0) : (i = 4 * Math.floor(e / 3), n = e - i / 4 * 3), void 0 === t && (t = this.size);\n        let o = e + t, l = i + 4 * Math.ceil(o / 3);\n        r = r.slice(i, l);\n        let h = Math.min(t, this.size - e);\n        if (a) {\n            let t = s.from(r, \"base64\").slice(n, n + h);\n            return this.set(t, e, !0);\n        }\n        {\n            let t = this.subarray(e, h, !0), i = atob(r), s = t.toUint8();\n            for(let e = 0; e < h; e++)s[e] = i.charCodeAt(n + e);\n            return t;\n        }\n    }\n});\nclass ot extends se {\n    static canHandle(e, t) {\n        return 18761 === t || 19789 === t;\n    }\n    extendOptions(e) {\n        let { ifd0: t, xmp: i, iptc: n, icc: s } = e;\n        i.enabled && t.deps.add(700), n.enabled && t.deps.add(33723), s.enabled && t.deps.add(34675), t.finalizeFilters();\n    }\n    async parse() {\n        let { tiff: e, xmp: t, iptc: i, icc: n } = this.options;\n        if (e.enabled || t.enabled || i.enabled || n.enabled) {\n            let e = Math.max(S(this.options), this.options.chunkSize);\n            await this.file.ensureChunk(0, e), this.createParser(\"tiff\", this.file), this.parsers.tiff.parseHeader(), await this.parsers.tiff.parseIfd0Block(), this.adaptTiffPropAsSegment(\"xmp\"), this.adaptTiffPropAsSegment(\"iptc\"), this.adaptTiffPropAsSegment(\"icc\");\n        }\n    }\n    adaptTiffPropAsSegment(e) {\n        if (this.parsers.tiff[e]) {\n            let t = this.parsers.tiff[e];\n            this.injectSegment(e, t);\n        }\n    }\n}\nc(ot, \"type\", \"tiff\"), w.set(\"tiff\", ot);\nlet lt = l(\"zlib\");\nconst ht = [\n    \"ihdr\",\n    \"iccp\",\n    \"text\",\n    \"itxt\",\n    \"exif\"\n];\nclass ut extends se {\n    constructor(...e){\n        super(...e), c(this, \"catchError\", (e)=>this.errors.push(e)), c(this, \"metaChunks\", []), c(this, \"unknownChunks\", []);\n    }\n    static canHandle(e, t) {\n        return 35152 === t && 2303741511 === e.getUint32(0) && 218765834 === e.getUint32(4);\n    }\n    async parse() {\n        let { file: e } = this;\n        await this.findPngChunksInRange(\"\\x89PNG\\r\\n\\x1a\\n\".length, e.byteLength), await this.readSegments(this.metaChunks), this.findIhdr(), this.parseTextChunks(), await this.findExif().catch(this.catchError), await this.findXmp().catch(this.catchError), await this.findIcc().catch(this.catchError);\n    }\n    async findPngChunksInRange(e, t) {\n        let { file: i } = this;\n        for(; e < t;){\n            let t = i.getUint32(e), n = i.getUint32(e + 4), s = i.getString(e + 4, 4).toLowerCase(), r = t + 4 + 4 + 4, a = {\n                type: s,\n                offset: e,\n                length: r,\n                start: e + 4 + 4,\n                size: t,\n                marker: n\n            };\n            ht.includes(s) ? this.metaChunks.push(a) : this.unknownChunks.push(a), e += r;\n        }\n    }\n    parseTextChunks() {\n        let e = this.metaChunks.filter((e)=>\"text\" === e.type);\n        for (let t of e){\n            let [e, i] = this.file.getString(t.start, t.size).split(\"\\x00\");\n            this.injectKeyValToIhdr(e, i);\n        }\n    }\n    injectKeyValToIhdr(e, t) {\n        let i = this.parsers.ihdr;\n        i && i.raw.set(e, t);\n    }\n    findIhdr() {\n        let e = this.metaChunks.find((e)=>\"ihdr\" === e.type);\n        e && !1 !== this.options.ihdr.enabled && this.createParser(\"ihdr\", e.chunk);\n    }\n    async findExif() {\n        let e = this.metaChunks.find((e)=>\"exif\" === e.type);\n        e && this.injectSegment(\"tiff\", e.chunk);\n    }\n    async findXmp() {\n        let e = this.metaChunks.filter((e)=>\"itxt\" === e.type);\n        for (let t of e){\n            \"XML:com.adobe.xmp\" === t.chunk.getString(0, \"XML:com.adobe.xmp\".length) && this.injectSegment(\"xmp\", t.chunk);\n        }\n    }\n    async findIcc() {\n        let e = this.metaChunks.find((e)=>\"iccp\" === e.type);\n        if (!e) return;\n        let { chunk: t } = e, i = t.getUint8Array(0, 81), s = 0;\n        for(; s < 80 && 0 !== i[s];)s++;\n        let r = s + 2, a = t.getString(0, s);\n        if (this.injectKeyValToIhdr(\"ProfileName\", a), n) {\n            let e = await lt, i = t.getUint8Array(r);\n            i = e.inflateSync(i), this.injectSegment(\"icc\", i);\n        }\n    }\n}\nc(ut, \"type\", \"png\"), w.set(\"png\", ut), U(E, \"interop\", [\n    [\n        1,\n        \"InteropIndex\"\n    ],\n    [\n        2,\n        \"InteropVersion\"\n    ],\n    [\n        4096,\n        \"RelatedImageFileFormat\"\n    ],\n    [\n        4097,\n        \"RelatedImageWidth\"\n    ],\n    [\n        4098,\n        \"RelatedImageHeight\"\n    ]\n]), F(E, \"ifd0\", [\n    [\n        11,\n        \"ProcessingSoftware\"\n    ],\n    [\n        254,\n        \"SubfileType\"\n    ],\n    [\n        255,\n        \"OldSubfileType\"\n    ],\n    [\n        263,\n        \"Thresholding\"\n    ],\n    [\n        264,\n        \"CellWidth\"\n    ],\n    [\n        265,\n        \"CellLength\"\n    ],\n    [\n        266,\n        \"FillOrder\"\n    ],\n    [\n        269,\n        \"DocumentName\"\n    ],\n    [\n        280,\n        \"MinSampleValue\"\n    ],\n    [\n        281,\n        \"MaxSampleValue\"\n    ],\n    [\n        285,\n        \"PageName\"\n    ],\n    [\n        286,\n        \"XPosition\"\n    ],\n    [\n        287,\n        \"YPosition\"\n    ],\n    [\n        290,\n        \"GrayResponseUnit\"\n    ],\n    [\n        297,\n        \"PageNumber\"\n    ],\n    [\n        321,\n        \"HalftoneHints\"\n    ],\n    [\n        322,\n        \"TileWidth\"\n    ],\n    [\n        323,\n        \"TileLength\"\n    ],\n    [\n        332,\n        \"InkSet\"\n    ],\n    [\n        337,\n        \"TargetPrinter\"\n    ],\n    [\n        18246,\n        \"Rating\"\n    ],\n    [\n        18249,\n        \"RatingPercent\"\n    ],\n    [\n        33550,\n        \"PixelScale\"\n    ],\n    [\n        34264,\n        \"ModelTransform\"\n    ],\n    [\n        34377,\n        \"PhotoshopSettings\"\n    ],\n    [\n        50706,\n        \"DNGVersion\"\n    ],\n    [\n        50707,\n        \"DNGBackwardVersion\"\n    ],\n    [\n        50708,\n        \"UniqueCameraModel\"\n    ],\n    [\n        50709,\n        \"LocalizedCameraModel\"\n    ],\n    [\n        50736,\n        \"DNGLensInfo\"\n    ],\n    [\n        50739,\n        \"ShadowScale\"\n    ],\n    [\n        50740,\n        \"DNGPrivateData\"\n    ],\n    [\n        33920,\n        \"IntergraphMatrix\"\n    ],\n    [\n        33922,\n        \"ModelTiePoint\"\n    ],\n    [\n        34118,\n        \"SEMInfo\"\n    ],\n    [\n        34735,\n        \"GeoTiffDirectory\"\n    ],\n    [\n        34736,\n        \"GeoTiffDoubleParams\"\n    ],\n    [\n        34737,\n        \"GeoTiffAsciiParams\"\n    ],\n    [\n        50341,\n        \"PrintIM\"\n    ],\n    [\n        50721,\n        \"ColorMatrix1\"\n    ],\n    [\n        50722,\n        \"ColorMatrix2\"\n    ],\n    [\n        50723,\n        \"CameraCalibration1\"\n    ],\n    [\n        50724,\n        \"CameraCalibration2\"\n    ],\n    [\n        50725,\n        \"ReductionMatrix1\"\n    ],\n    [\n        50726,\n        \"ReductionMatrix2\"\n    ],\n    [\n        50727,\n        \"AnalogBalance\"\n    ],\n    [\n        50728,\n        \"AsShotNeutral\"\n    ],\n    [\n        50729,\n        \"AsShotWhiteXY\"\n    ],\n    [\n        50730,\n        \"BaselineExposure\"\n    ],\n    [\n        50731,\n        \"BaselineNoise\"\n    ],\n    [\n        50732,\n        \"BaselineSharpness\"\n    ],\n    [\n        50734,\n        \"LinearResponseLimit\"\n    ],\n    [\n        50735,\n        \"CameraSerialNumber\"\n    ],\n    [\n        50741,\n        \"MakerNoteSafety\"\n    ],\n    [\n        50778,\n        \"CalibrationIlluminant1\"\n    ],\n    [\n        50779,\n        \"CalibrationIlluminant2\"\n    ],\n    [\n        50781,\n        \"RawDataUniqueID\"\n    ],\n    [\n        50827,\n        \"OriginalRawFileName\"\n    ],\n    [\n        50828,\n        \"OriginalRawFileData\"\n    ],\n    [\n        50831,\n        \"AsShotICCProfile\"\n    ],\n    [\n        50832,\n        \"AsShotPreProfileMatrix\"\n    ],\n    [\n        50833,\n        \"CurrentICCProfile\"\n    ],\n    [\n        50834,\n        \"CurrentPreProfileMatrix\"\n    ],\n    [\n        50879,\n        \"ColorimetricReference\"\n    ],\n    [\n        50885,\n        \"SRawType\"\n    ],\n    [\n        50898,\n        \"PanasonicTitle\"\n    ],\n    [\n        50899,\n        \"PanasonicTitle2\"\n    ],\n    [\n        50931,\n        \"CameraCalibrationSig\"\n    ],\n    [\n        50932,\n        \"ProfileCalibrationSig\"\n    ],\n    [\n        50933,\n        \"ProfileIFD\"\n    ],\n    [\n        50934,\n        \"AsShotProfileName\"\n    ],\n    [\n        50936,\n        \"ProfileName\"\n    ],\n    [\n        50937,\n        \"ProfileHueSatMapDims\"\n    ],\n    [\n        50938,\n        \"ProfileHueSatMapData1\"\n    ],\n    [\n        50939,\n        \"ProfileHueSatMapData2\"\n    ],\n    [\n        50940,\n        \"ProfileToneCurve\"\n    ],\n    [\n        50941,\n        \"ProfileEmbedPolicy\"\n    ],\n    [\n        50942,\n        \"ProfileCopyright\"\n    ],\n    [\n        50964,\n        \"ForwardMatrix1\"\n    ],\n    [\n        50965,\n        \"ForwardMatrix2\"\n    ],\n    [\n        50966,\n        \"PreviewApplicationName\"\n    ],\n    [\n        50967,\n        \"PreviewApplicationVersion\"\n    ],\n    [\n        50968,\n        \"PreviewSettingsName\"\n    ],\n    [\n        50969,\n        \"PreviewSettingsDigest\"\n    ],\n    [\n        50970,\n        \"PreviewColorSpace\"\n    ],\n    [\n        50971,\n        \"PreviewDateTime\"\n    ],\n    [\n        50972,\n        \"RawImageDigest\"\n    ],\n    [\n        50973,\n        \"OriginalRawFileDigest\"\n    ],\n    [\n        50981,\n        \"ProfileLookTableDims\"\n    ],\n    [\n        50982,\n        \"ProfileLookTableData\"\n    ],\n    [\n        51043,\n        \"TimeCodes\"\n    ],\n    [\n        51044,\n        \"FrameRate\"\n    ],\n    [\n        51058,\n        \"TStop\"\n    ],\n    [\n        51081,\n        \"ReelName\"\n    ],\n    [\n        51089,\n        \"OriginalDefaultFinalSize\"\n    ],\n    [\n        51090,\n        \"OriginalBestQualitySize\"\n    ],\n    [\n        51091,\n        \"OriginalDefaultCropSize\"\n    ],\n    [\n        51105,\n        \"CameraLabel\"\n    ],\n    [\n        51107,\n        \"ProfileHueSatMapEncoding\"\n    ],\n    [\n        51108,\n        \"ProfileLookTableEncoding\"\n    ],\n    [\n        51109,\n        \"BaselineExposureOffset\"\n    ],\n    [\n        51110,\n        \"DefaultBlackRender\"\n    ],\n    [\n        51111,\n        \"NewRawImageDigest\"\n    ],\n    [\n        51112,\n        \"RawToPreviewGain\"\n    ]\n]);\nlet ct = [\n    [\n        273,\n        \"StripOffsets\"\n    ],\n    [\n        279,\n        \"StripByteCounts\"\n    ],\n    [\n        288,\n        \"FreeOffsets\"\n    ],\n    [\n        289,\n        \"FreeByteCounts\"\n    ],\n    [\n        291,\n        \"GrayResponseCurve\"\n    ],\n    [\n        292,\n        \"T4Options\"\n    ],\n    [\n        293,\n        \"T6Options\"\n    ],\n    [\n        300,\n        \"ColorResponseUnit\"\n    ],\n    [\n        320,\n        \"ColorMap\"\n    ],\n    [\n        324,\n        \"TileOffsets\"\n    ],\n    [\n        325,\n        \"TileByteCounts\"\n    ],\n    [\n        326,\n        \"BadFaxLines\"\n    ],\n    [\n        327,\n        \"CleanFaxData\"\n    ],\n    [\n        328,\n        \"ConsecutiveBadFaxLines\"\n    ],\n    [\n        330,\n        \"SubIFD\"\n    ],\n    [\n        333,\n        \"InkNames\"\n    ],\n    [\n        334,\n        \"NumberofInks\"\n    ],\n    [\n        336,\n        \"DotRange\"\n    ],\n    [\n        338,\n        \"ExtraSamples\"\n    ],\n    [\n        339,\n        \"SampleFormat\"\n    ],\n    [\n        340,\n        \"SMinSampleValue\"\n    ],\n    [\n        341,\n        \"SMaxSampleValue\"\n    ],\n    [\n        342,\n        \"TransferRange\"\n    ],\n    [\n        343,\n        \"ClipPath\"\n    ],\n    [\n        344,\n        \"XClipPathUnits\"\n    ],\n    [\n        345,\n        \"YClipPathUnits\"\n    ],\n    [\n        346,\n        \"Indexed\"\n    ],\n    [\n        347,\n        \"JPEGTables\"\n    ],\n    [\n        351,\n        \"OPIProxy\"\n    ],\n    [\n        400,\n        \"GlobalParametersIFD\"\n    ],\n    [\n        401,\n        \"ProfileType\"\n    ],\n    [\n        402,\n        \"FaxProfile\"\n    ],\n    [\n        403,\n        \"CodingMethods\"\n    ],\n    [\n        404,\n        \"VersionYear\"\n    ],\n    [\n        405,\n        \"ModeNumber\"\n    ],\n    [\n        433,\n        \"Decode\"\n    ],\n    [\n        434,\n        \"DefaultImageColor\"\n    ],\n    [\n        435,\n        \"T82Options\"\n    ],\n    [\n        437,\n        \"JPEGTables\"\n    ],\n    [\n        512,\n        \"JPEGProc\"\n    ],\n    [\n        515,\n        \"JPEGRestartInterval\"\n    ],\n    [\n        517,\n        \"JPEGLosslessPredictors\"\n    ],\n    [\n        518,\n        \"JPEGPointTransforms\"\n    ],\n    [\n        519,\n        \"JPEGQTables\"\n    ],\n    [\n        520,\n        \"JPEGDCTables\"\n    ],\n    [\n        521,\n        \"JPEGACTables\"\n    ],\n    [\n        559,\n        \"StripRowCounts\"\n    ],\n    [\n        999,\n        \"USPTOMiscellaneous\"\n    ],\n    [\n        18247,\n        \"XP_DIP_XML\"\n    ],\n    [\n        18248,\n        \"StitchInfo\"\n    ],\n    [\n        28672,\n        \"SonyRawFileType\"\n    ],\n    [\n        28688,\n        \"SonyToneCurve\"\n    ],\n    [\n        28721,\n        \"VignettingCorrection\"\n    ],\n    [\n        28722,\n        \"VignettingCorrParams\"\n    ],\n    [\n        28724,\n        \"ChromaticAberrationCorrection\"\n    ],\n    [\n        28725,\n        \"ChromaticAberrationCorrParams\"\n    ],\n    [\n        28726,\n        \"DistortionCorrection\"\n    ],\n    [\n        28727,\n        \"DistortionCorrParams\"\n    ],\n    [\n        29895,\n        \"SonyCropTopLeft\"\n    ],\n    [\n        29896,\n        \"SonyCropSize\"\n    ],\n    [\n        32781,\n        \"ImageID\"\n    ],\n    [\n        32931,\n        \"WangTag1\"\n    ],\n    [\n        32932,\n        \"WangAnnotation\"\n    ],\n    [\n        32933,\n        \"WangTag3\"\n    ],\n    [\n        32934,\n        \"WangTag4\"\n    ],\n    [\n        32953,\n        \"ImageReferencePoints\"\n    ],\n    [\n        32954,\n        \"RegionXformTackPoint\"\n    ],\n    [\n        32955,\n        \"WarpQuadrilateral\"\n    ],\n    [\n        32956,\n        \"AffineTransformMat\"\n    ],\n    [\n        32995,\n        \"Matteing\"\n    ],\n    [\n        32996,\n        \"DataType\"\n    ],\n    [\n        32997,\n        \"ImageDepth\"\n    ],\n    [\n        32998,\n        \"TileDepth\"\n    ],\n    [\n        33300,\n        \"ImageFullWidth\"\n    ],\n    [\n        33301,\n        \"ImageFullHeight\"\n    ],\n    [\n        33302,\n        \"TextureFormat\"\n    ],\n    [\n        33303,\n        \"WrapModes\"\n    ],\n    [\n        33304,\n        \"FovCot\"\n    ],\n    [\n        33305,\n        \"MatrixWorldToScreen\"\n    ],\n    [\n        33306,\n        \"MatrixWorldToCamera\"\n    ],\n    [\n        33405,\n        \"Model2\"\n    ],\n    [\n        33421,\n        \"CFARepeatPatternDim\"\n    ],\n    [\n        33422,\n        \"CFAPattern2\"\n    ],\n    [\n        33423,\n        \"BatteryLevel\"\n    ],\n    [\n        33424,\n        \"KodakIFD\"\n    ],\n    [\n        33445,\n        \"MDFileTag\"\n    ],\n    [\n        33446,\n        \"MDScalePixel\"\n    ],\n    [\n        33447,\n        \"MDColorTable\"\n    ],\n    [\n        33448,\n        \"MDLabName\"\n    ],\n    [\n        33449,\n        \"MDSampleInfo\"\n    ],\n    [\n        33450,\n        \"MDPrepDate\"\n    ],\n    [\n        33451,\n        \"MDPrepTime\"\n    ],\n    [\n        33452,\n        \"MDFileUnits\"\n    ],\n    [\n        33589,\n        \"AdventScale\"\n    ],\n    [\n        33590,\n        \"AdventRevision\"\n    ],\n    [\n        33628,\n        \"UIC1Tag\"\n    ],\n    [\n        33629,\n        \"UIC2Tag\"\n    ],\n    [\n        33630,\n        \"UIC3Tag\"\n    ],\n    [\n        33631,\n        \"UIC4Tag\"\n    ],\n    [\n        33918,\n        \"IntergraphPacketData\"\n    ],\n    [\n        33919,\n        \"IntergraphFlagRegisters\"\n    ],\n    [\n        33921,\n        \"INGRReserved\"\n    ],\n    [\n        34016,\n        \"Site\"\n    ],\n    [\n        34017,\n        \"ColorSequence\"\n    ],\n    [\n        34018,\n        \"IT8Header\"\n    ],\n    [\n        34019,\n        \"RasterPadding\"\n    ],\n    [\n        34020,\n        \"BitsPerRunLength\"\n    ],\n    [\n        34021,\n        \"BitsPerExtendedRunLength\"\n    ],\n    [\n        34022,\n        \"ColorTable\"\n    ],\n    [\n        34023,\n        \"ImageColorIndicator\"\n    ],\n    [\n        34024,\n        \"BackgroundColorIndicator\"\n    ],\n    [\n        34025,\n        \"ImageColorValue\"\n    ],\n    [\n        34026,\n        \"BackgroundColorValue\"\n    ],\n    [\n        34027,\n        \"PixelIntensityRange\"\n    ],\n    [\n        34028,\n        \"TransparencyIndicator\"\n    ],\n    [\n        34029,\n        \"ColorCharacterization\"\n    ],\n    [\n        34030,\n        \"HCUsage\"\n    ],\n    [\n        34031,\n        \"TrapIndicator\"\n    ],\n    [\n        34032,\n        \"CMYKEquivalent\"\n    ],\n    [\n        34152,\n        \"AFCP_IPTC\"\n    ],\n    [\n        34232,\n        \"PixelMagicJBIGOptions\"\n    ],\n    [\n        34263,\n        \"JPLCartoIFD\"\n    ],\n    [\n        34306,\n        \"WB_GRGBLevels\"\n    ],\n    [\n        34310,\n        \"LeafData\"\n    ],\n    [\n        34687,\n        \"TIFF_FXExtensions\"\n    ],\n    [\n        34688,\n        \"MultiProfiles\"\n    ],\n    [\n        34689,\n        \"SharedData\"\n    ],\n    [\n        34690,\n        \"T88Options\"\n    ],\n    [\n        34732,\n        \"ImageLayer\"\n    ],\n    [\n        34750,\n        \"JBIGOptions\"\n    ],\n    [\n        34856,\n        \"Opto-ElectricConvFactor\"\n    ],\n    [\n        34857,\n        \"Interlace\"\n    ],\n    [\n        34908,\n        \"FaxRecvParams\"\n    ],\n    [\n        34909,\n        \"FaxSubAddress\"\n    ],\n    [\n        34910,\n        \"FaxRecvTime\"\n    ],\n    [\n        34929,\n        \"FedexEDR\"\n    ],\n    [\n        34954,\n        \"LeafSubIFD\"\n    ],\n    [\n        37387,\n        \"FlashEnergy\"\n    ],\n    [\n        37388,\n        \"SpatialFrequencyResponse\"\n    ],\n    [\n        37389,\n        \"Noise\"\n    ],\n    [\n        37390,\n        \"FocalPlaneXResolution\"\n    ],\n    [\n        37391,\n        \"FocalPlaneYResolution\"\n    ],\n    [\n        37392,\n        \"FocalPlaneResolutionUnit\"\n    ],\n    [\n        37397,\n        \"ExposureIndex\"\n    ],\n    [\n        37398,\n        \"TIFF-EPStandardID\"\n    ],\n    [\n        37399,\n        \"SensingMethod\"\n    ],\n    [\n        37434,\n        \"CIP3DataFile\"\n    ],\n    [\n        37435,\n        \"CIP3Sheet\"\n    ],\n    [\n        37436,\n        \"CIP3Side\"\n    ],\n    [\n        37439,\n        \"StoNits\"\n    ],\n    [\n        37679,\n        \"MSDocumentText\"\n    ],\n    [\n        37680,\n        \"MSPropertySetStorage\"\n    ],\n    [\n        37681,\n        \"MSDocumentTextPosition\"\n    ],\n    [\n        37724,\n        \"ImageSourceData\"\n    ],\n    [\n        40965,\n        \"InteropIFD\"\n    ],\n    [\n        40976,\n        \"SamsungRawPointersOffset\"\n    ],\n    [\n        40977,\n        \"SamsungRawPointersLength\"\n    ],\n    [\n        41217,\n        \"SamsungRawByteOrder\"\n    ],\n    [\n        41218,\n        \"SamsungRawUnknown\"\n    ],\n    [\n        41484,\n        \"SpatialFrequencyResponse\"\n    ],\n    [\n        41485,\n        \"Noise\"\n    ],\n    [\n        41489,\n        \"ImageNumber\"\n    ],\n    [\n        41490,\n        \"SecurityClassification\"\n    ],\n    [\n        41491,\n        \"ImageHistory\"\n    ],\n    [\n        41494,\n        \"TIFF-EPStandardID\"\n    ],\n    [\n        41995,\n        \"DeviceSettingDescription\"\n    ],\n    [\n        42112,\n        \"GDALMetadata\"\n    ],\n    [\n        42113,\n        \"GDALNoData\"\n    ],\n    [\n        44992,\n        \"ExpandSoftware\"\n    ],\n    [\n        44993,\n        \"ExpandLens\"\n    ],\n    [\n        44994,\n        \"ExpandFilm\"\n    ],\n    [\n        44995,\n        \"ExpandFilterLens\"\n    ],\n    [\n        44996,\n        \"ExpandScanner\"\n    ],\n    [\n        44997,\n        \"ExpandFlashLamp\"\n    ],\n    [\n        46275,\n        \"HasselbladRawImage\"\n    ],\n    [\n        48129,\n        \"PixelFormat\"\n    ],\n    [\n        48130,\n        \"Transformation\"\n    ],\n    [\n        48131,\n        \"Uncompressed\"\n    ],\n    [\n        48132,\n        \"ImageType\"\n    ],\n    [\n        48256,\n        \"ImageWidth\"\n    ],\n    [\n        48257,\n        \"ImageHeight\"\n    ],\n    [\n        48258,\n        \"WidthResolution\"\n    ],\n    [\n        48259,\n        \"HeightResolution\"\n    ],\n    [\n        48320,\n        \"ImageOffset\"\n    ],\n    [\n        48321,\n        \"ImageByteCount\"\n    ],\n    [\n        48322,\n        \"AlphaOffset\"\n    ],\n    [\n        48323,\n        \"AlphaByteCount\"\n    ],\n    [\n        48324,\n        \"ImageDataDiscard\"\n    ],\n    [\n        48325,\n        \"AlphaDataDiscard\"\n    ],\n    [\n        50215,\n        \"OceScanjobDesc\"\n    ],\n    [\n        50216,\n        \"OceApplicationSelector\"\n    ],\n    [\n        50217,\n        \"OceIDNumber\"\n    ],\n    [\n        50218,\n        \"OceImageLogic\"\n    ],\n    [\n        50255,\n        \"Annotations\"\n    ],\n    [\n        50459,\n        \"HasselbladExif\"\n    ],\n    [\n        50547,\n        \"OriginalFileName\"\n    ],\n    [\n        50560,\n        \"USPTOOriginalContentType\"\n    ],\n    [\n        50656,\n        \"CR2CFAPattern\"\n    ],\n    [\n        50710,\n        \"CFAPlaneColor\"\n    ],\n    [\n        50711,\n        \"CFALayout\"\n    ],\n    [\n        50712,\n        \"LinearizationTable\"\n    ],\n    [\n        50713,\n        \"BlackLevelRepeatDim\"\n    ],\n    [\n        50714,\n        \"BlackLevel\"\n    ],\n    [\n        50715,\n        \"BlackLevelDeltaH\"\n    ],\n    [\n        50716,\n        \"BlackLevelDeltaV\"\n    ],\n    [\n        50717,\n        \"WhiteLevel\"\n    ],\n    [\n        50718,\n        \"DefaultScale\"\n    ],\n    [\n        50719,\n        \"DefaultCropOrigin\"\n    ],\n    [\n        50720,\n        \"DefaultCropSize\"\n    ],\n    [\n        50733,\n        \"BayerGreenSplit\"\n    ],\n    [\n        50737,\n        \"ChromaBlurRadius\"\n    ],\n    [\n        50738,\n        \"AntiAliasStrength\"\n    ],\n    [\n        50752,\n        \"RawImageSegmentation\"\n    ],\n    [\n        50780,\n        \"BestQualityScale\"\n    ],\n    [\n        50784,\n        \"AliasLayerMetadata\"\n    ],\n    [\n        50829,\n        \"ActiveArea\"\n    ],\n    [\n        50830,\n        \"MaskedAreas\"\n    ],\n    [\n        50935,\n        \"NoiseReductionApplied\"\n    ],\n    [\n        50974,\n        \"SubTileBlockSize\"\n    ],\n    [\n        50975,\n        \"RowInterleaveFactor\"\n    ],\n    [\n        51008,\n        \"OpcodeList1\"\n    ],\n    [\n        51009,\n        \"OpcodeList2\"\n    ],\n    [\n        51022,\n        \"OpcodeList3\"\n    ],\n    [\n        51041,\n        \"NoiseProfile\"\n    ],\n    [\n        51114,\n        \"CacheVersion\"\n    ],\n    [\n        51125,\n        \"DefaultUserCrop\"\n    ],\n    [\n        51157,\n        \"NikonNEFInfo\"\n    ],\n    [\n        65024,\n        \"KdcIFD\"\n    ]\n];\nF(E, \"ifd0\", ct), F(E, \"exif\", ct), U(B, \"gps\", [\n    [\n        23,\n        {\n            M: \"Magnetic North\",\n            T: \"True North\"\n        }\n    ],\n    [\n        25,\n        {\n            K: \"Kilometers\",\n            M: \"Miles\",\n            N: \"Nautical Miles\"\n        }\n    ]\n]);\nclass ft extends re {\n    static canHandle(e, t) {\n        return 224 === e.getUint8(t + 1) && 1246120262 === e.getUint32(t + 4) && 0 === e.getUint8(t + 8);\n    }\n    parse() {\n        return this.parseTags(), this.translate(), this.output;\n    }\n    parseTags() {\n        this.raw = new Map([\n            [\n                0,\n                this.chunk.getUint16(0)\n            ],\n            [\n                2,\n                this.chunk.getUint8(2)\n            ],\n            [\n                3,\n                this.chunk.getUint16(3)\n            ],\n            [\n                5,\n                this.chunk.getUint16(5)\n            ],\n            [\n                7,\n                this.chunk.getUint8(7)\n            ],\n            [\n                8,\n                this.chunk.getUint8(8)\n            ]\n        ]);\n    }\n}\nc(ft, \"type\", \"jfif\"), c(ft, \"headerLength\", 9), T.set(\"jfif\", ft), U(E, \"jfif\", [\n    [\n        0,\n        \"JFIFVersion\"\n    ],\n    [\n        2,\n        \"ResolutionUnit\"\n    ],\n    [\n        3,\n        \"XResolution\"\n    ],\n    [\n        5,\n        \"YResolution\"\n    ],\n    [\n        7,\n        \"ThumbnailWidth\"\n    ],\n    [\n        8,\n        \"ThumbnailHeight\"\n    ]\n]);\nclass dt extends re {\n    parse() {\n        return this.parseTags(), this.translate(), this.output;\n    }\n    parseTags() {\n        this.raw = new Map([\n            [\n                0,\n                this.chunk.getUint32(0)\n            ],\n            [\n                4,\n                this.chunk.getUint32(4)\n            ],\n            [\n                8,\n                this.chunk.getUint8(8)\n            ],\n            [\n                9,\n                this.chunk.getUint8(9)\n            ],\n            [\n                10,\n                this.chunk.getUint8(10)\n            ],\n            [\n                11,\n                this.chunk.getUint8(11)\n            ],\n            [\n                12,\n                this.chunk.getUint8(12)\n            ],\n            ...Array.from(this.raw)\n        ]);\n    }\n}\nc(dt, \"type\", \"ihdr\"), T.set(\"ihdr\", dt), U(E, \"ihdr\", [\n    [\n        0,\n        \"ImageWidth\"\n    ],\n    [\n        4,\n        \"ImageHeight\"\n    ],\n    [\n        8,\n        \"BitDepth\"\n    ],\n    [\n        9,\n        \"ColorType\"\n    ],\n    [\n        10,\n        \"Compression\"\n    ],\n    [\n        11,\n        \"Filter\"\n    ],\n    [\n        12,\n        \"Interlace\"\n    ]\n]), U(B, \"ihdr\", [\n    [\n        9,\n        {\n            0: \"Grayscale\",\n            2: \"RGB\",\n            3: \"Palette\",\n            4: \"Grayscale with Alpha\",\n            6: \"RGB with Alpha\",\n            DEFAULT: \"Unknown\"\n        }\n    ],\n    [\n        10,\n        {\n            0: \"Deflate/Inflate\",\n            DEFAULT: \"Unknown\"\n        }\n    ],\n    [\n        11,\n        {\n            0: \"Adaptive\",\n            DEFAULT: \"Unknown\"\n        }\n    ],\n    [\n        12,\n        {\n            0: \"Noninterlaced\",\n            1: \"Adam7 Interlace\",\n            DEFAULT: \"Unknown\"\n        }\n    ]\n]);\nclass pt extends re {\n    static canHandle(e, t) {\n        return 226 === e.getUint8(t + 1) && 1229144927 === e.getUint32(t + 4);\n    }\n    static findPosition(e, t) {\n        let i = super.findPosition(e, t);\n        return i.chunkNumber = e.getUint8(t + 16), i.chunkCount = e.getUint8(t + 17), i.multiSegment = i.chunkCount > 1, i;\n    }\n    static handleMultiSegments(e) {\n        return function(e) {\n            let t = function(e) {\n                let t = e[0].constructor, i = 0;\n                for (let t of e)i += t.length;\n                let n = new t(i), s = 0;\n                for (let t of e)n.set(t, s), s += t.length;\n                return n;\n            }(e.map((e)=>e.chunk.toUint8()));\n            return new I(t);\n        }(e);\n    }\n    parse() {\n        return this.raw = new Map, this.parseHeader(), this.parseTags(), this.translate(), this.output;\n    }\n    parseHeader() {\n        let { raw: e } = this;\n        this.chunk.byteLength < 84 && g(\"ICC header is too short\");\n        for (let [t, i] of Object.entries(gt)){\n            t = parseInt(t, 10);\n            let n = i(this.chunk, t);\n            \"\\x00\\x00\\x00\\x00\" !== n && e.set(t, n);\n        }\n    }\n    parseTags() {\n        let e, t, i, n, s, { raw: r } = this, a = this.chunk.getUint32(128), o = 132, l = this.chunk.byteLength;\n        for(; a--;){\n            if (e = this.chunk.getString(o, 4), t = this.chunk.getUint32(o + 4), i = this.chunk.getUint32(o + 8), n = this.chunk.getString(t, 4), t + i > l) return void console.warn(\"reached the end of the first ICC chunk. Enable options.tiff.multiSegment to read all ICC segments.\");\n            s = this.parseTag(n, t, i), void 0 !== s && \"\\x00\\x00\\x00\\x00\" !== s && r.set(e, s), o += 12;\n        }\n    }\n    parseTag(e, t, i) {\n        switch(e){\n            case \"desc\":\n                return this.parseDesc(t);\n            case \"mluc\":\n                return this.parseMluc(t);\n            case \"text\":\n                return this.parseText(t, i);\n            case \"sig \":\n                return this.parseSig(t);\n        }\n        if (!(t + i > this.chunk.byteLength)) return this.chunk.getUint8Array(t, i);\n    }\n    parseDesc(e) {\n        let t = this.chunk.getUint32(e + 8) - 1;\n        return m(this.chunk.getString(e + 12, t));\n    }\n    parseText(e, t) {\n        return m(this.chunk.getString(e + 8, t - 8));\n    }\n    parseSig(e) {\n        return m(this.chunk.getString(e + 8, 4));\n    }\n    parseMluc(e) {\n        let { chunk: t } = this, i = t.getUint32(e + 8), n = t.getUint32(e + 12), s = e + 16, r = [];\n        for(let a = 0; a < i; a++){\n            let i = t.getString(s + 0, 2), a = t.getString(s + 2, 2), o = t.getUint32(s + 4), l = t.getUint32(s + 8) + e, h = m(t.getUnicodeString(l, o));\n            r.push({\n                lang: i,\n                country: a,\n                text: h\n            }), s += n;\n        }\n        return 1 === i ? r[0].text : r;\n    }\n    translateValue(e, t) {\n        return \"string\" == typeof e ? t[e] || t[e.toLowerCase()] || e : t[e] || e;\n    }\n}\nc(pt, \"type\", \"icc\"), c(pt, \"multiSegment\", !0), c(pt, \"headerLength\", 18);\nconst gt = {\n    4: mt,\n    8: function(e, t) {\n        return [\n            e.getUint8(t),\n            e.getUint8(t + 1) >> 4,\n            e.getUint8(t + 1) % 16\n        ].map((e)=>e.toString(10)).join(\".\");\n    },\n    12: mt,\n    16: mt,\n    20: mt,\n    24: function(e, t) {\n        const i = e.getUint16(t), n = e.getUint16(t + 2) - 1, s = e.getUint16(t + 4), r = e.getUint16(t + 6), a = e.getUint16(t + 8), o = e.getUint16(t + 10);\n        return new Date(Date.UTC(i, n, s, r, a, o));\n    },\n    36: mt,\n    40: mt,\n    48: mt,\n    52: mt,\n    64: (e, t)=>e.getUint32(t),\n    80: mt\n};\nfunction mt(e, t) {\n    return m(e.getString(t, 4));\n}\nT.set(\"icc\", pt), U(E, \"icc\", [\n    [\n        4,\n        \"ProfileCMMType\"\n    ],\n    [\n        8,\n        \"ProfileVersion\"\n    ],\n    [\n        12,\n        \"ProfileClass\"\n    ],\n    [\n        16,\n        \"ColorSpaceData\"\n    ],\n    [\n        20,\n        \"ProfileConnectionSpace\"\n    ],\n    [\n        24,\n        \"ProfileDateTime\"\n    ],\n    [\n        36,\n        \"ProfileFileSignature\"\n    ],\n    [\n        40,\n        \"PrimaryPlatform\"\n    ],\n    [\n        44,\n        \"CMMFlags\"\n    ],\n    [\n        48,\n        \"DeviceManufacturer\"\n    ],\n    [\n        52,\n        \"DeviceModel\"\n    ],\n    [\n        56,\n        \"DeviceAttributes\"\n    ],\n    [\n        64,\n        \"RenderingIntent\"\n    ],\n    [\n        68,\n        \"ConnectionSpaceIlluminant\"\n    ],\n    [\n        80,\n        \"ProfileCreator\"\n    ],\n    [\n        84,\n        \"ProfileID\"\n    ],\n    [\n        \"Header\",\n        \"ProfileHeader\"\n    ],\n    [\n        \"MS00\",\n        \"WCSProfiles\"\n    ],\n    [\n        \"bTRC\",\n        \"BlueTRC\"\n    ],\n    [\n        \"bXYZ\",\n        \"BlueMatrixColumn\"\n    ],\n    [\n        \"bfd\",\n        \"UCRBG\"\n    ],\n    [\n        \"bkpt\",\n        \"MediaBlackPoint\"\n    ],\n    [\n        \"calt\",\n        \"CalibrationDateTime\"\n    ],\n    [\n        \"chad\",\n        \"ChromaticAdaptation\"\n    ],\n    [\n        \"chrm\",\n        \"Chromaticity\"\n    ],\n    [\n        \"ciis\",\n        \"ColorimetricIntentImageState\"\n    ],\n    [\n        \"clot\",\n        \"ColorantTableOut\"\n    ],\n    [\n        \"clro\",\n        \"ColorantOrder\"\n    ],\n    [\n        \"clrt\",\n        \"ColorantTable\"\n    ],\n    [\n        \"cprt\",\n        \"ProfileCopyright\"\n    ],\n    [\n        \"crdi\",\n        \"CRDInfo\"\n    ],\n    [\n        \"desc\",\n        \"ProfileDescription\"\n    ],\n    [\n        \"devs\",\n        \"DeviceSettings\"\n    ],\n    [\n        \"dmdd\",\n        \"DeviceModelDesc\"\n    ],\n    [\n        \"dmnd\",\n        \"DeviceMfgDesc\"\n    ],\n    [\n        \"dscm\",\n        \"ProfileDescriptionML\"\n    ],\n    [\n        \"fpce\",\n        \"FocalPlaneColorimetryEstimates\"\n    ],\n    [\n        \"gTRC\",\n        \"GreenTRC\"\n    ],\n    [\n        \"gXYZ\",\n        \"GreenMatrixColumn\"\n    ],\n    [\n        \"gamt\",\n        \"Gamut\"\n    ],\n    [\n        \"kTRC\",\n        \"GrayTRC\"\n    ],\n    [\n        \"lumi\",\n        \"Luminance\"\n    ],\n    [\n        \"meas\",\n        \"Measurement\"\n    ],\n    [\n        \"meta\",\n        \"Metadata\"\n    ],\n    [\n        \"mmod\",\n        \"MakeAndModel\"\n    ],\n    [\n        \"ncl2\",\n        \"NamedColor2\"\n    ],\n    [\n        \"ncol\",\n        \"NamedColor\"\n    ],\n    [\n        \"ndin\",\n        \"NativeDisplayInfo\"\n    ],\n    [\n        \"pre0\",\n        \"Preview0\"\n    ],\n    [\n        \"pre1\",\n        \"Preview1\"\n    ],\n    [\n        \"pre2\",\n        \"Preview2\"\n    ],\n    [\n        \"ps2i\",\n        \"PS2RenderingIntent\"\n    ],\n    [\n        \"ps2s\",\n        \"PostScript2CSA\"\n    ],\n    [\n        \"psd0\",\n        \"PostScript2CRD0\"\n    ],\n    [\n        \"psd1\",\n        \"PostScript2CRD1\"\n    ],\n    [\n        \"psd2\",\n        \"PostScript2CRD2\"\n    ],\n    [\n        \"psd3\",\n        \"PostScript2CRD3\"\n    ],\n    [\n        \"pseq\",\n        \"ProfileSequenceDesc\"\n    ],\n    [\n        \"psid\",\n        \"ProfileSequenceIdentifier\"\n    ],\n    [\n        \"psvm\",\n        \"PS2CRDVMSize\"\n    ],\n    [\n        \"rTRC\",\n        \"RedTRC\"\n    ],\n    [\n        \"rXYZ\",\n        \"RedMatrixColumn\"\n    ],\n    [\n        \"resp\",\n        \"OutputResponse\"\n    ],\n    [\n        \"rhoc\",\n        \"ReflectionHardcopyOrigColorimetry\"\n    ],\n    [\n        \"rig0\",\n        \"PerceptualRenderingIntentGamut\"\n    ],\n    [\n        \"rig2\",\n        \"SaturationRenderingIntentGamut\"\n    ],\n    [\n        \"rpoc\",\n        \"ReflectionPrintOutputColorimetry\"\n    ],\n    [\n        \"sape\",\n        \"SceneAppearanceEstimates\"\n    ],\n    [\n        \"scoe\",\n        \"SceneColorimetryEstimates\"\n    ],\n    [\n        \"scrd\",\n        \"ScreeningDesc\"\n    ],\n    [\n        \"scrn\",\n        \"Screening\"\n    ],\n    [\n        \"targ\",\n        \"CharTarget\"\n    ],\n    [\n        \"tech\",\n        \"Technology\"\n    ],\n    [\n        \"vcgt\",\n        \"VideoCardGamma\"\n    ],\n    [\n        \"view\",\n        \"ViewingConditions\"\n    ],\n    [\n        \"vued\",\n        \"ViewingCondDesc\"\n    ],\n    [\n        \"wtpt\",\n        \"MediaWhitePoint\"\n    ]\n]);\nconst St = {\n    \"4d2p\": \"Erdt Systems\",\n    AAMA: \"Aamazing Technologies\",\n    ACER: \"Acer\",\n    ACLT: \"Acolyte Color Research\",\n    ACTI: \"Actix Sytems\",\n    ADAR: \"Adara Technology\",\n    ADBE: \"Adobe\",\n    ADI: \"ADI Systems\",\n    AGFA: \"Agfa Graphics\",\n    ALMD: \"Alps Electric\",\n    ALPS: \"Alps Electric\",\n    ALWN: \"Alwan Color Expertise\",\n    AMTI: \"Amiable Technologies\",\n    AOC: \"AOC International\",\n    APAG: \"Apago\",\n    APPL: \"Apple Computer\",\n    AST: \"AST\",\n    \"AT&T\": \"AT&T\",\n    BAEL: \"BARBIERI electronic\",\n    BRCO: \"Barco NV\",\n    BRKP: \"Breakpoint\",\n    BROT: \"Brother\",\n    BULL: \"Bull\",\n    BUS: \"Bus Computer Systems\",\n    \"C-IT\": \"C-Itoh\",\n    CAMR: \"Intel\",\n    CANO: \"Canon\",\n    CARR: \"Carroll Touch\",\n    CASI: \"Casio\",\n    CBUS: \"Colorbus PL\",\n    CEL: \"Crossfield\",\n    CELx: \"Crossfield\",\n    CGS: \"CGS Publishing Technologies International\",\n    CHM: \"Rochester Robotics\",\n    CIGL: \"Colour Imaging Group, London\",\n    CITI: \"Citizen\",\n    CL00: \"Candela\",\n    CLIQ: \"Color IQ\",\n    CMCO: \"Chromaco\",\n    CMiX: \"CHROMiX\",\n    COLO: \"Colorgraphic Communications\",\n    COMP: \"Compaq\",\n    COMp: \"Compeq/Focus Technology\",\n    CONR: \"Conrac Display Products\",\n    CORD: \"Cordata Technologies\",\n    CPQ: \"Compaq\",\n    CPRO: \"ColorPro\",\n    CRN: \"Cornerstone\",\n    CTX: \"CTX International\",\n    CVIS: \"ColorVision\",\n    CWC: \"Fujitsu Laboratories\",\n    DARI: \"Darius Technology\",\n    DATA: \"Dataproducts\",\n    DCP: \"Dry Creek Photo\",\n    DCRC: \"Digital Contents Resource Center, Chung-Ang University\",\n    DELL: \"Dell Computer\",\n    DIC: \"Dainippon Ink and Chemicals\",\n    DICO: \"Diconix\",\n    DIGI: \"Digital\",\n    \"DL&C\": \"Digital Light & Color\",\n    DPLG: \"Doppelganger\",\n    DS: \"Dainippon Screen\",\n    DSOL: \"DOOSOL\",\n    DUPN: \"DuPont\",\n    EPSO: \"Epson\",\n    ESKO: \"Esko-Graphics\",\n    ETRI: \"Electronics and Telecommunications Research Institute\",\n    EVER: \"Everex Systems\",\n    EXAC: \"ExactCODE\",\n    Eizo: \"Eizo\",\n    FALC: \"Falco Data Products\",\n    FF: \"Fuji Photo Film\",\n    FFEI: \"FujiFilm Electronic Imaging\",\n    FNRD: \"Fnord Software\",\n    FORA: \"Fora\",\n    FORE: \"Forefront Technology\",\n    FP: \"Fujitsu\",\n    FPA: \"WayTech Development\",\n    FUJI: \"Fujitsu\",\n    FX: \"Fuji Xerox\",\n    GCC: \"GCC Technologies\",\n    GGSL: \"Global Graphics Software\",\n    GMB: \"Gretagmacbeth\",\n    GMG: \"GMG\",\n    GOLD: \"GoldStar Technology\",\n    GOOG: \"Google\",\n    GPRT: \"Giantprint\",\n    GTMB: \"Gretagmacbeth\",\n    GVC: \"WayTech Development\",\n    GW2K: \"Sony\",\n    HCI: \"HCI\",\n    HDM: \"Heidelberger Druckmaschinen\",\n    HERM: \"Hermes\",\n    HITA: \"Hitachi America\",\n    HP: \"Hewlett-Packard\",\n    HTC: \"Hitachi\",\n    HiTi: \"HiTi Digital\",\n    IBM: \"IBM\",\n    IDNT: \"Scitex\",\n    IEC: \"Hewlett-Packard\",\n    IIYA: \"Iiyama North America\",\n    IKEG: \"Ikegami Electronics\",\n    IMAG: \"Image Systems\",\n    IMI: \"Ingram Micro\",\n    INTC: \"Intel\",\n    INTL: \"N/A (INTL)\",\n    INTR: \"Intra Electronics\",\n    IOCO: \"Iocomm International Technology\",\n    IPS: \"InfoPrint Solutions Company\",\n    IRIS: \"Scitex\",\n    ISL: \"Ichikawa Soft Laboratory\",\n    ITNL: \"N/A (ITNL)\",\n    IVM: \"IVM\",\n    IWAT: \"Iwatsu Electric\",\n    Idnt: \"Scitex\",\n    Inca: \"Inca Digital Printers\",\n    Iris: \"Scitex\",\n    JPEG: \"Joint Photographic Experts Group\",\n    JSFT: \"Jetsoft Development\",\n    JVC: \"JVC Information Products\",\n    KART: \"Scitex\",\n    KFC: \"KFC Computek Components\",\n    KLH: \"KLH Computers\",\n    KMHD: \"Konica Minolta\",\n    KNCA: \"Konica\",\n    KODA: \"Kodak\",\n    KYOC: \"Kyocera\",\n    Kart: \"Scitex\",\n    LCAG: \"Leica\",\n    LCCD: \"Leeds Colour\",\n    LDAK: \"Left Dakota\",\n    LEAD: \"Leading Technology\",\n    LEXM: \"Lexmark International\",\n    LINK: \"Link Computer\",\n    LINO: \"Linotronic\",\n    LITE: \"Lite-On\",\n    Leaf: \"Leaf\",\n    Lino: \"Linotronic\",\n    MAGC: \"Mag Computronic\",\n    MAGI: \"MAG Innovision\",\n    MANN: \"Mannesmann\",\n    MICN: \"Micron Technology\",\n    MICR: \"Microtek\",\n    MICV: \"Microvitec\",\n    MINO: \"Minolta\",\n    MITS: \"Mitsubishi Electronics America\",\n    MITs: \"Mitsuba\",\n    MNLT: \"Minolta\",\n    MODG: \"Modgraph\",\n    MONI: \"Monitronix\",\n    MONS: \"Monaco Systems\",\n    MORS: \"Morse Technology\",\n    MOTI: \"Motive Systems\",\n    MSFT: \"Microsoft\",\n    MUTO: \"MUTOH INDUSTRIES\",\n    Mits: \"Mitsubishi Electric\",\n    NANA: \"NANAO\",\n    NEC: \"NEC\",\n    NEXP: \"NexPress Solutions\",\n    NISS: \"Nissei Sangyo America\",\n    NKON: \"Nikon\",\n    NONE: \"none\",\n    OCE: \"Oce Technologies\",\n    OCEC: \"OceColor\",\n    OKI: \"Oki\",\n    OKID: \"Okidata\",\n    OKIP: \"Okidata\",\n    OLIV: \"Olivetti\",\n    OLYM: \"Olympus\",\n    ONYX: \"Onyx Graphics\",\n    OPTI: \"Optiquest\",\n    PACK: \"Packard Bell\",\n    PANA: \"Matsushita Electric Industrial\",\n    PANT: \"Pantone\",\n    PBN: \"Packard Bell\",\n    PFU: \"PFU\",\n    PHIL: \"Philips Consumer Electronics\",\n    PNTX: \"HOYA\",\n    POne: \"Phase One A/S\",\n    PREM: \"Premier Computer Innovations\",\n    PRIN: \"Princeton Graphic Systems\",\n    PRIP: \"Princeton Publishing Labs\",\n    QLUX: \"Hong Kong\",\n    QMS: \"QMS\",\n    QPCD: \"QPcard AB\",\n    QUAD: \"QuadLaser\",\n    QUME: \"Qume\",\n    RADI: \"Radius\",\n    RDDx: \"Integrated Color Solutions\",\n    RDG: \"Roland DG\",\n    REDM: \"REDMS Group\",\n    RELI: \"Relisys\",\n    RGMS: \"Rolf Gierling Multitools\",\n    RICO: \"Ricoh\",\n    RNLD: \"Edmund Ronald\",\n    ROYA: \"Royal\",\n    RPC: \"Ricoh Printing Systems\",\n    RTL: \"Royal Information Electronics\",\n    SAMP: \"Sampo\",\n    SAMS: \"Samsung\",\n    SANT: \"Jaime Santana Pomares\",\n    SCIT: \"Scitex\",\n    SCRN: \"Dainippon Screen\",\n    SDP: \"Scitex\",\n    SEC: \"Samsung\",\n    SEIK: \"Seiko Instruments\",\n    SEIk: \"Seikosha\",\n    SGUY: \"ScanGuy.com\",\n    SHAR: \"Sharp Laboratories\",\n    SICC: \"International Color Consortium\",\n    SONY: \"Sony\",\n    SPCL: \"SpectraCal\",\n    STAR: \"Star\",\n    STC: \"Sampo Technology\",\n    Scit: \"Scitex\",\n    Sdp: \"Scitex\",\n    Sony: \"Sony\",\n    TALO: \"Talon Technology\",\n    TAND: \"Tandy\",\n    TATU: \"Tatung\",\n    TAXA: \"TAXAN America\",\n    TDS: \"Tokyo Denshi Sekei\",\n    TECO: \"TECO Information Systems\",\n    TEGR: \"Tegra\",\n    TEKT: \"Tektronix\",\n    TI: \"Texas Instruments\",\n    TMKR: \"TypeMaker\",\n    TOSB: \"Toshiba\",\n    TOSH: \"Toshiba\",\n    TOTK: \"TOTOKU ELECTRIC\",\n    TRIU: \"Triumph\",\n    TSBT: \"Toshiba\",\n    TTX: \"TTX Computer Products\",\n    TVM: \"TVM Professional Monitor\",\n    TW: \"TW Casper\",\n    ULSX: \"Ulead Systems\",\n    UNIS: \"Unisys\",\n    UTZF: \"Utz Fehlau & Sohn\",\n    VARI: \"Varityper\",\n    VIEW: \"Viewsonic\",\n    VISL: \"Visual communication\",\n    VIVO: \"Vivo Mobile Communication\",\n    WANG: \"Wang\",\n    WLBR: \"Wilbur Imaging\",\n    WTG2: \"Ware To Go\",\n    WYSE: \"WYSE Technology\",\n    XERX: \"Xerox\",\n    XRIT: \"X-Rite\",\n    ZRAN: \"Zoran\",\n    Zebr: \"Zebra Technologies\",\n    appl: \"Apple Computer\",\n    bICC: \"basICColor\",\n    berg: \"bergdesign\",\n    ceyd: \"Integrated Color Solutions\",\n    clsp: \"MacDermid ColorSpan\",\n    ds: \"Dainippon Screen\",\n    dupn: \"DuPont\",\n    ffei: \"FujiFilm Electronic Imaging\",\n    flux: \"FluxData\",\n    iris: \"Scitex\",\n    kart: \"Scitex\",\n    lcms: \"Little CMS\",\n    lino: \"Linotronic\",\n    none: \"none\",\n    ob4d: \"Erdt Systems\",\n    obic: \"Medigraph\",\n    quby: \"Qubyx Sarl\",\n    scit: \"Scitex\",\n    scrn: \"Dainippon Screen\",\n    sdp: \"Scitex\",\n    siwi: \"SIWI GRAFIKA\",\n    yxym: \"YxyMaster\"\n}, Ct = {\n    scnr: \"Scanner\",\n    mntr: \"Monitor\",\n    prtr: \"Printer\",\n    link: \"Device Link\",\n    abst: \"Abstract\",\n    spac: \"Color Space Conversion Profile\",\n    nmcl: \"Named Color\",\n    cenc: \"ColorEncodingSpace profile\",\n    mid: \"MultiplexIdentification profile\",\n    mlnk: \"MultiplexLink profile\",\n    mvis: \"MultiplexVisualization profile\",\n    nkpf: \"Nikon Input Device Profile (NON-STANDARD!)\"\n};\nU(B, \"icc\", [\n    [\n        4,\n        St\n    ],\n    [\n        12,\n        Ct\n    ],\n    [\n        40,\n        Object.assign({}, St, Ct)\n    ],\n    [\n        48,\n        St\n    ],\n    [\n        80,\n        St\n    ],\n    [\n        64,\n        {\n            0: \"Perceptual\",\n            1: \"Relative Colorimetric\",\n            2: \"Saturation\",\n            3: \"Absolute Colorimetric\"\n        }\n    ],\n    [\n        \"tech\",\n        {\n            amd: \"Active Matrix Display\",\n            crt: \"Cathode Ray Tube Display\",\n            kpcd: \"Photo CD\",\n            pmd: \"Passive Matrix Display\",\n            dcam: \"Digital Camera\",\n            dcpj: \"Digital Cinema Projector\",\n            dmpc: \"Digital Motion Picture Camera\",\n            dsub: \"Dye Sublimation Printer\",\n            epho: \"Electrophotographic Printer\",\n            esta: \"Electrostatic Printer\",\n            flex: \"Flexography\",\n            fprn: \"Film Writer\",\n            fscn: \"Film Scanner\",\n            grav: \"Gravure\",\n            ijet: \"Ink Jet Printer\",\n            imgs: \"Photo Image Setter\",\n            mpfr: \"Motion Picture Film Recorder\",\n            mpfs: \"Motion Picture Film Scanner\",\n            offs: \"Offset Lithography\",\n            pjtv: \"Projection Television\",\n            rpho: \"Photographic Paper Printer\",\n            rscn: \"Reflective Scanner\",\n            silk: \"Silkscreen\",\n            twax: \"Thermal Wax Printer\",\n            vidc: \"Video Camera\",\n            vidm: \"Video Monitor\"\n        }\n    ]\n]);\nclass yt extends re {\n    static canHandle(e, t, i) {\n        return 237 === e.getUint8(t + 1) && \"Photoshop\" === e.getString(t + 4, 9) && void 0 !== this.containsIptc8bim(e, t, i);\n    }\n    static headerLength(e, t, i) {\n        let n, s = this.containsIptc8bim(e, t, i);\n        if (void 0 !== s) return n = e.getUint8(t + s + 7), n % 2 != 0 && (n += 1), 0 === n && (n = 4), s + 8 + n;\n    }\n    static containsIptc8bim(e, t, i) {\n        for(let n = 0; n < i; n++)if (this.isIptcSegmentHead(e, t + n)) return n;\n    }\n    static isIptcSegmentHead(e, t) {\n        return 56 === e.getUint8(t) && 943868237 === e.getUint32(t) && 1028 === e.getUint16(t + 4);\n    }\n    parse() {\n        let { raw: e } = this, t = this.chunk.byteLength - 1, i = !1;\n        for(let n = 0; n < t; n++)if (28 === this.chunk.getUint8(n) && 2 === this.chunk.getUint8(n + 1)) {\n            i = !0;\n            let t = this.chunk.getUint16(n + 3), s = this.chunk.getUint8(n + 2), r = this.chunk.getLatin1String(n + 5, t);\n            e.set(s, this.pluralizeValue(e.get(s), r)), n += 4 + t;\n        } else if (i) break;\n        return this.translate(), this.output;\n    }\n    pluralizeValue(e, t) {\n        return void 0 !== e ? e instanceof Array ? (e.push(t), e) : [\n            e,\n            t\n        ] : t;\n    }\n}\nc(yt, \"type\", \"iptc\"), c(yt, \"translateValues\", !1), c(yt, \"reviveValues\", !1), T.set(\"iptc\", yt), U(E, \"iptc\", [\n    [\n        0,\n        \"ApplicationRecordVersion\"\n    ],\n    [\n        3,\n        \"ObjectTypeReference\"\n    ],\n    [\n        4,\n        \"ObjectAttributeReference\"\n    ],\n    [\n        5,\n        \"ObjectName\"\n    ],\n    [\n        7,\n        \"EditStatus\"\n    ],\n    [\n        8,\n        \"EditorialUpdate\"\n    ],\n    [\n        10,\n        \"Urgency\"\n    ],\n    [\n        12,\n        \"SubjectReference\"\n    ],\n    [\n        15,\n        \"Category\"\n    ],\n    [\n        20,\n        \"SupplementalCategories\"\n    ],\n    [\n        22,\n        \"FixtureIdentifier\"\n    ],\n    [\n        25,\n        \"Keywords\"\n    ],\n    [\n        26,\n        \"ContentLocationCode\"\n    ],\n    [\n        27,\n        \"ContentLocationName\"\n    ],\n    [\n        30,\n        \"ReleaseDate\"\n    ],\n    [\n        35,\n        \"ReleaseTime\"\n    ],\n    [\n        37,\n        \"ExpirationDate\"\n    ],\n    [\n        38,\n        \"ExpirationTime\"\n    ],\n    [\n        40,\n        \"SpecialInstructions\"\n    ],\n    [\n        42,\n        \"ActionAdvised\"\n    ],\n    [\n        45,\n        \"ReferenceService\"\n    ],\n    [\n        47,\n        \"ReferenceDate\"\n    ],\n    [\n        50,\n        \"ReferenceNumber\"\n    ],\n    [\n        55,\n        \"DateCreated\"\n    ],\n    [\n        60,\n        \"TimeCreated\"\n    ],\n    [\n        62,\n        \"DigitalCreationDate\"\n    ],\n    [\n        63,\n        \"DigitalCreationTime\"\n    ],\n    [\n        65,\n        \"OriginatingProgram\"\n    ],\n    [\n        70,\n        \"ProgramVersion\"\n    ],\n    [\n        75,\n        \"ObjectCycle\"\n    ],\n    [\n        80,\n        \"Byline\"\n    ],\n    [\n        85,\n        \"BylineTitle\"\n    ],\n    [\n        90,\n        \"City\"\n    ],\n    [\n        92,\n        \"Sublocation\"\n    ],\n    [\n        95,\n        \"State\"\n    ],\n    [\n        100,\n        \"CountryCode\"\n    ],\n    [\n        101,\n        \"Country\"\n    ],\n    [\n        103,\n        \"OriginalTransmissionReference\"\n    ],\n    [\n        105,\n        \"Headline\"\n    ],\n    [\n        110,\n        \"Credit\"\n    ],\n    [\n        115,\n        \"Source\"\n    ],\n    [\n        116,\n        \"CopyrightNotice\"\n    ],\n    [\n        118,\n        \"Contact\"\n    ],\n    [\n        120,\n        \"Caption\"\n    ],\n    [\n        121,\n        \"LocalCaption\"\n    ],\n    [\n        122,\n        \"Writer\"\n    ],\n    [\n        125,\n        \"RasterizedCaption\"\n    ],\n    [\n        130,\n        \"ImageType\"\n    ],\n    [\n        131,\n        \"ImageOrientation\"\n    ],\n    [\n        135,\n        \"LanguageIdentifier\"\n    ],\n    [\n        150,\n        \"AudioType\"\n    ],\n    [\n        151,\n        \"AudioSamplingRate\"\n    ],\n    [\n        152,\n        \"AudioSamplingResolution\"\n    ],\n    [\n        153,\n        \"AudioDuration\"\n    ],\n    [\n        154,\n        \"AudioOutcue\"\n    ],\n    [\n        184,\n        \"JobID\"\n    ],\n    [\n        185,\n        \"MasterDocumentID\"\n    ],\n    [\n        186,\n        \"ShortDocumentID\"\n    ],\n    [\n        187,\n        \"UniqueDocumentID\"\n    ],\n    [\n        188,\n        \"OwnerID\"\n    ],\n    [\n        200,\n        \"ObjectPreviewFileFormat\"\n    ],\n    [\n        201,\n        \"ObjectPreviewFileVersion\"\n    ],\n    [\n        202,\n        \"ObjectPreviewData\"\n    ],\n    [\n        221,\n        \"Prefs\"\n    ],\n    [\n        225,\n        \"ClassifyState\"\n    ],\n    [\n        228,\n        \"SimilarityIndex\"\n    ],\n    [\n        230,\n        \"DocumentNotes\"\n    ],\n    [\n        231,\n        \"DocumentHistory\"\n    ],\n    [\n        232,\n        \"ExifCameraInfo\"\n    ],\n    [\n        255,\n        \"CatalogSets\"\n    ]\n]), U(B, \"iptc\", [\n    [\n        10,\n        {\n            0: \"0 (reserved)\",\n            1: \"1 (most urgent)\",\n            2: \"2\",\n            3: \"3\",\n            4: \"4\",\n            5: \"5 (normal urgency)\",\n            6: \"6\",\n            7: \"7\",\n            8: \"8 (least urgent)\",\n            9: \"9 (user-defined priority)\"\n        }\n    ],\n    [\n        75,\n        {\n            a: \"Morning\",\n            b: \"Both Morning and Evening\",\n            p: \"Evening\"\n        }\n    ],\n    [\n        131,\n        {\n            L: \"Landscape\",\n            P: \"Portrait\",\n            S: \"Square\"\n        }\n    ]\n]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (tt);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZXhpZnIvZGlzdC9mdWxsLmVzbS5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLElBQUUsZUFBYSxPQUFPQyxPQUFLQSxPQUFLQztBQUFPLE1BQU1DLElBQUUsZUFBYSxPQUFPQyxXQUFVQyxJQUFFRixLQUFHLGVBQWEsT0FBT0csa0JBQWlCQyxJQUFFLENBQUUsZ0JBQWEsT0FBT0wsVUFBUSxlQUFhLE9BQU9NLFdBQVMsQ0FBQ0EsUUFBUUMsUUFBUSxJQUFFLENBQUNELFFBQVFDLFFBQVEsQ0FBQ0MsSUFBSSxHQUFFQyxJQUFFWCxFQUFFWSxNQUFNLEVBQUNDLElBQUViLEVBQUVjLE1BQU0sRUFBQ0MsSUFBRSxDQUFDLENBQUNKLEdBQUVLLElBQUVoQixDQUFBQSxJQUFHQTtBQUFFLFNBQVNpQixFQUFFakIsQ0FBQyxFQUFDRyxJQUFFYSxDQUFDO0lBQUUsSUFBR1QsR0FBRSxJQUFHO1FBQUMsT0FBTSxjQUFZLE9BQU9XLFVBQVFDLFFBQVFDLE9BQU8sQ0FBQ2pCLEVBQUVlLFFBQVFsQixPQUFLLE1BQU0sQ0FBQyx1QkFBdUIsR0FBR0EsR0FBR3FCLElBQUksQ0FBQ2xCO0lBQUUsRUFBQyxPQUFNQSxHQUFFO1FBQUNtQixRQUFRQyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUV2QixFQUFFLENBQUM7SUFBQztBQUFDO0FBQUMsSUFBSXdCLElBQUV4QixFQUFFeUIsS0FBSztBQUFDLE1BQU1DLElBQUUxQixDQUFBQSxJQUFHd0IsSUFBRXhCO0FBQUUsSUFBRyxDQUFDQSxFQUFFeUIsS0FBSyxFQUFDO0lBQUMsTUFBTXpCLElBQUVpQixFQUFFLFFBQVFqQixDQUFBQSxJQUFHQSxJQUFJRyxJQUFFYyxFQUFFLFNBQVNqQixDQUFBQSxJQUFHQSxJQUFJSyxJQUFFLENBQUNFLEdBQUUsRUFBQ29CLFNBQVFoQixDQUFDLEVBQUMsR0FBQyxDQUFDLENBQUMsR0FBRyxJ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O1FBQUM7UUFBTTtLQUF5QjtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBWTtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBcUI7SUFBQztRQUFDO1FBQU07S0FBc0I7SUFBQztRQUFDO1FBQU07S0FBcUI7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFXO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUF1QjtJQUFDO1FBQUM7UUFBTTtLQUFrQjtJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQWtCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBd0I7SUFBQztRQUFDO1FBQU07S0FBd0I7SUFBQztRQUFDO1FBQU07S0FBMkI7SUFBQztRQUFDO1FBQU07S0FBa0I7SUFBQztRQUFDO1FBQU07S0FBZ0I7SUFBQztRQUFDO1FBQU07S0FBZ0I7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQTBCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQVk7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBZ0I7SUFBQztRQUFDO1FBQU07S0FBWTtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQVc7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQThCO0lBQUM7UUFBQztRQUFNO0tBQVE7SUFBQztRQUFDO1FBQU07S0FBVTtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFLO0tBQVk7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFPO0lBQUM7UUFBQztRQUFNO0tBQVU7SUFBQztRQUFDO1FBQU07S0FBWTtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQVc7SUFBQztRQUFDO1FBQU07S0FBVTtJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQVc7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFhO0NBQUMsR0FBRUYsRUFBRUUsR0FBRSxPQUFNO0lBQUM7UUFBQztRQUFFO0tBQWU7SUFBQztRQUFDO1FBQUU7S0FBaUI7SUFBQztRQUFDO1FBQUU7S0FBYztJQUFDO1FBQUM7UUFBRTtLQUFrQjtJQUFDO1FBQUM7UUFBRTtLQUFlO0lBQUM7UUFBQztRQUFFO0tBQWlCO0lBQUM7UUFBQztRQUFFO0tBQWM7SUFBQztRQUFDO1FBQUU7S0FBZTtJQUFDO1FBQUM7UUFBRTtLQUFnQjtJQUFDO1FBQUM7UUFBRTtLQUFZO0lBQUM7UUFBQztRQUFHO0tBQWlCO0lBQUM7UUFBQztRQUFHO0tBQVM7SUFBQztRQUFDO1FBQUc7S0FBYztJQUFDO1FBQUM7UUFBRztLQUFXO0lBQUM7UUFBQztRQUFHO0tBQWM7SUFBQztRQUFDO1FBQUc7S0FBVztJQUFDO1FBQUM7UUFBRztLQUFxQjtJQUFDO1FBQUM7UUFBRztLQUFrQjtJQUFDO1FBQUM7UUFBRztLQUFjO0lBQUM7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O0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQW9CO0lBQUM7UUFBQztRQUFNO0tBQXVCO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFpQjtJQUFDO1FBQUM7UUFBTTtLQUFtQjtJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUFVO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQVU7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQW9CO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQWtCO0lBQUM7UUFBQztRQUFNO0tBQXlCO0lBQUM7UUFBQztRQUFNO0tBQXlCO0lBQUM7UUFBQztRQUFNO0tBQWtCO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQXlCO0lBQUM7UUFBQztRQUFNO0tBQW9CO0lBQUM7UUFBQztRQUFNO0tBQTBCO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQVc7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBa0I7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBd0I7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFvQjtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQXVCO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQXlCO0lBQUM7UUFBQztRQUFNO0tBQTRCO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQW9CO0lBQUM7UUFBQztRQUFNO0tBQWtCO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQXVCO0lBQUM7UUFBQztRQUFNO0tBQXVCO0lBQUM7UUFBQztRQUFNO0tBQVk7SUFBQztRQUFDO1FBQU07S0FBWTtJQUFDO1FBQUM7UUFBTTtLQUFRO0lBQUM7UUFBQztRQUFNO0tBQVc7SUFBQztRQUFDO1FBQU07S0FBMkI7SUFBQztRQUFDO1FBQU07S0FBMEI7SUFBQztRQUFDO1FBQU07S0FBMEI7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUF5QjtJQUFDO1FBQUM7UUFBTTtLQUFxQjtJQUFDO1FBQUM7UUFBTTtLQUFvQjtJQUFDO1FBQUM7UUFBTTtLQUFtQjtDQUFDO0FBQUUsSUFBSWlXLEtBQUc7SUFBQztRQUFDO1FBQUk7S0FBZTtJQUFDO1FBQUM7UUFBSTtLQUFrQjtJQUFDO1FBQUM7UUFBSTtLQUFjO0lBQUM7UUFBQztRQUFJO0tBQWlCO0lBQUM7UUFBQztRQUFJO0tBQW9CO0lBQUM7UUFBQztRQUFJO0tBQVk7SUFBQztRQUFDO1FBQUk7S0FBWTtJQUFDO1FBQUM7UUFBSTtLQUFvQjtJQUFDO1FBQUM7UUFBSTtLQUFXO0lBQUM7UUFBQztRQUFJO0tBQWM7SUFBQztRQUFDO1FBQUk7S0FBaUI7SUFBQztRQUFDO1FBQUk7S0FBYztJQUFDO1FBQUM7UUFBSTtLQUFlO0lBQUM7UUFBQztRQUFJO0tBQXlCO0lBQUM7UUFBQztRQUFJO0tBQVM7SUFBQztRQUFDO1FBQUk7S0FBVztJQUFDO1FBQUM7UUFBSTtLQUFlO0lBQUM7UUFBQztRQUFJO0tBQVc7SUFBQztRQUFDO1FBQUk7S0FBZTtJQUFDO1FBQUM7UUFBSTtLQUFlO0lBQUM7UUFBQztRQUFJO0tBQWtCO0lBQUM7UUFBQztRQUFJO0tBQWtCO0lBQUM7UUFBQztRQUFJO0tBQWdCO0lBQUM7UUFBQztRQUFJO0tBQVc7SUFBQztRQUFDO1FBQUk7S0FBaUI7SUFBQztRQUFDO1FBQUk7S0FBaUI7SUFBQztRQUFDO1FBQUk7S0FBVTtJQUFDO1FBQUM7UUFBSTtLQUFhO0lBQUM7UUFBQztRQUFJO0tBQVc7SUFBQztRQUFDO1FBQUk7S0FBc0I7SUFBQztRQUFDO1FBQUk7S0FBYztJQUFDO1FBQUM7UUFBSTtLQUFhO0lBQUM7UUFBQztRQUFJO0tBQWdCO0lBQUM7UUFBQztRQUFJO0tBQWM7SUFBQztRQUFDO1FBQUk7S0FBYTtJQUFDO1FBQUM7UUFBSTtLQUFTO0lBQUM7UUFBQztRQUFJO0tBQW9CO0lBQUM7UUFBQztRQUFJO0tBQWE7SUFBQztRQUFDO1FBQUk7S0FBYTtJQUFDO1FBQUM7UUFBSTtLQUFXO0lBQUM7UUFBQztRQUFJO0tBQXNCO0lBQUM7UUFBQztRQUFJO0tBQXlCO0lBQUM7UUFBQztRQUFJO0tBQXNCO0lBQUM7UUFBQztRQUFJO0tBQWM7SUFBQztRQUFDO1FBQUk7S0FBZTtJQUFDO1FBQUM7UUFBSTtLQUFlO0lBQUM7UUFBQztRQUFJO0tBQWlCO0lBQUM7UUFBQztRQUFJO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFrQjtJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUF1QjtJQUFDO1FBQUM7UUFBTTtLQUF1QjtJQUFDO1FBQUM7UUFBTTtLQUFnQztJQUFDO1FBQUM7UUFBTTtLQUFnQztJQUFDO1FBQUM7UUFBTTtLQUF1QjtJQUFDO1FBQUM7UUFBTTtLQUF1QjtJQUFDO1FBQUM7UUFBTTtLQUFrQjtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQVU7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFpQjtJQUFDO1FBQUM7UUFBTTtLQUFXO0lBQUM7UUFBQztRQUFNO0tBQVc7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBb0I7SUFBQztRQUFDO1FBQU07S0FBcUI7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFXO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBWTtJQUFDO1FBQUM7UUFBTTtLQUFpQjtJQUFDO1FBQUM7UUFBTTtLQUFrQjtJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQVM7SUFBQztRQUFDO1FBQU07S0FBc0I7SUFBQztRQUFDO1FBQU07S0FBc0I7SUFBQztRQUFDO1FBQU07S0FBUztJQUFDO1FBQUM7UUFBTTtLQUFzQjtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFpQjtJQUFDO1FBQUM7UUFBTTtLQUFVO0lBQUM7UUFBQztRQUFNO0tBQVU7SUFBQztRQUFDO1FBQU07S0FBVTtJQUFDO1FBQUM7UUFBTTtLQUFVO0lBQUM7UUFBQztRQUFNO0tBQXVCO0lBQUM7UUFBQztRQUFNO0tBQTBCO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBTztJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQTJCO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBc0I7SUFBQztRQUFDO1FBQU07S0FBMkI7SUFBQztRQUFDO1FBQU07S0FBa0I7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBc0I7SUFBQztRQUFDO1FBQU07S0FBd0I7SUFBQztRQUFDO1FBQU07S0FBd0I7SUFBQztRQUFDO1FBQU07S0FBVTtJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUFpQjtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBZ0I7SUFBQztRQUFDO1FBQU07S0FBVztJQUFDO1FBQUM7UUFBTTtLQUFvQjtJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQTBCO0lBQUM7UUFBQztRQUFNO0tBQVk7SUFBQztRQUFDO1FBQU07S0FBZ0I7SUFBQztRQUFDO1FBQU07S0FBZ0I7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFXO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUFRO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQTJCO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQW9CO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBWTtJQUFDO1FBQUM7UUFBTTtLQUFXO0lBQUM7UUFBQztRQUFNO0tBQVU7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBeUI7SUFBQztRQUFDO1FBQU07S0FBa0I7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUFzQjtJQUFDO1FBQUM7UUFBTTtLQUFvQjtJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUFRO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBeUI7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFvQjtJQUFDO1FBQUM7UUFBTTtLQUEyQjtJQUFDO1FBQUM7UUFBTTtLQUFlO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQWtCO0lBQUM7UUFBQztRQUFNO0tBQXFCO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFZO0lBQUM7UUFBQztRQUFNO0tBQWE7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFrQjtJQUFDO1FBQUM7UUFBTTtLQUFtQjtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBbUI7SUFBQztRQUFDO1FBQU07S0FBbUI7SUFBQztRQUFDO1FBQU07S0FBaUI7SUFBQztRQUFDO1FBQU07S0FBeUI7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFnQjtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQWlCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQTJCO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQWdCO0lBQUM7UUFBQztRQUFNO0tBQVk7SUFBQztRQUFDO1FBQU07S0FBcUI7SUFBQztRQUFDO1FBQU07S0FBc0I7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFtQjtJQUFDO1FBQUM7UUFBTTtLQUFtQjtJQUFDO1FBQUM7UUFBTTtLQUFhO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBb0I7SUFBQztRQUFDO1FBQU07S0FBa0I7SUFBQztRQUFDO1FBQU07S0FBa0I7SUFBQztRQUFDO1FBQU07S0FBbUI7SUFBQztRQUFDO1FBQU07S0FBb0I7SUFBQztRQUFDO1FBQU07S0FBdUI7SUFBQztRQUFDO1FBQU07S0FBbUI7SUFBQztRQUFDO1FBQU07S0FBcUI7SUFBQztRQUFDO1FBQU07S0FBYTtJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQXdCO0lBQUM7UUFBQztRQUFNO0tBQW1CO0lBQUM7UUFBQztRQUFNO0tBQXNCO0lBQUM7UUFBQztRQUFNO0tBQWM7SUFBQztRQUFDO1FBQU07S0FBYztJQUFDO1FBQUM7UUFBTTtLQUFjO0lBQUM7UUFBQztRQUFNO0tBQWU7SUFBQztRQUFDO1FBQU07S0FBZTtJQUFDO1FBQUM7UUFBTTtLQUFrQjtJQUFDO1FBQUM7UUFBTTtL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QVkxQixHQUFFO1lBQVc5RCxHQUFFO1FBQVE7S0FBRTtDQUFDO0FBQUUsaUVBQWVrYSxFQUFFQSxFQUFDO0FBQW1tQiIsInNvdXJjZXMiOlsid2VicGFjazovL2V4Ymljby1ib25pay8uL25vZGVfbW9kdWxlcy9leGlmci9kaXN0L2Z1bGwuZXNtLm1qcz9kMjQ3Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6Z2xvYmFsO2NvbnN0IHQ9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvcixpPXQmJlwidW5kZWZpbmVkXCI9PXR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50LG49IShcInVuZGVmaW5lZFwiPT10eXBlb2YgZ2xvYmFsfHxcInVuZGVmaW5lZFwiPT10eXBlb2YgcHJvY2Vzc3x8IXByb2Nlc3MudmVyc2lvbnN8fCFwcm9jZXNzLnZlcnNpb25zLm5vZGUpLHM9ZS5CdWZmZXIscj1lLkJpZ0ludCxhPSEhcyxvPWU9PmU7ZnVuY3Rpb24gbChlLHQ9byl7aWYobil0cnl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZT9Qcm9taXNlLnJlc29sdmUodChyZXF1aXJlKGUpKSk6aW1wb3J0KC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gZSkudGhlbih0KX1jYXRjaCh0KXtjb25zb2xlLndhcm4oYENvdWxkbid0IGxvYWQgJHtlfWApfX1sZXQgaD1lLmZldGNoO2NvbnN0IHU9ZT0+aD1lO2lmKCFlLmZldGNoKXtjb25zdCBlPWwoXCJodHRwXCIsKGU9PmUpKSx0PWwoXCJodHRwc1wiLChlPT5lKSksaT0obix7aGVhZGVyczpzfT17fSk9Pm5ldyBQcm9taXNlKChhc3luYyhyLGEpPT57bGV0e3BvcnQ6byxob3N0bmFtZTpsLHBhdGhuYW1lOmgscHJvdG9jb2w6dSxzZWFyY2g6Y309bmV3IFVSTChuKTtjb25zdCBmPXttZXRob2Q6XCJHRVRcIixob3N0bmFtZTpsLHBhdGg6ZW5jb2RlVVJJKGgpK2MsaGVhZGVyczpzfTtcIlwiIT09byYmKGYucG9ydD1OdW1iZXIobykpO2NvbnN0IGQ9KFwiaHR0cHM6XCI9PT11P2F3YWl0IHQ6YXdhaXQgZSkucmVxdWVzdChmLChlPT57aWYoMzAxPT09ZS5zdGF0dXNDb2RlfHwzMDI9PT1lLnN0YXR1c0NvZGUpe2xldCB0PW5ldyBVUkwoZS5oZWFkZXJzLmxvY2F0aW9uLG4pLnRvU3RyaW5nKCk7cmV0dXJuIGkodCx7aGVhZGVyczpzfSkudGhlbihyKS5jYXRjaChhKX1yKHtzdGF0dXM6ZS5zdGF0dXNDb2RlLGFycmF5QnVmZmVyOigpPT5uZXcgUHJvbWlzZSgodD0+e2xldCBpPVtdO2Uub24oXCJkYXRhXCIsKGU9PmkucHVzaChlKSkpLGUub24oXCJlbmRcIiwoKCk9PnQoQnVmZmVyLmNvbmNhdChpKSkpKX0pKX0pfSkpO2Qub24oXCJlcnJvclwiLGEpLGQuZW5kKCl9KSk7dShpKX1mdW5jdGlvbiBjKGUsdCxpKXtyZXR1cm4gdCBpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOmksZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPWksZX1jb25zdCBmPWU9PnAoZSk/dm9pZCAwOmUsZD1lPT52b2lkIDAhPT1lO2Z1bmN0aW9uIHAoZSl7cmV0dXJuIHZvaWQgMD09PWV8fChlIGluc3RhbmNlb2YgTWFwPzA9PT1lLnNpemU6MD09PU9iamVjdC52YWx1ZXMoZSkuZmlsdGVyKGQpLmxlbmd0aCl9ZnVuY3Rpb24gZyhlKXtsZXQgdD1uZXcgRXJyb3IoZSk7dGhyb3cgZGVsZXRlIHQuc3RhY2ssdH1mdW5jdGlvbiBtKGUpe3JldHVyblwiXCI9PT0oZT1mdW5jdGlvbihlKXtmb3IoO2UuZW5kc1dpdGgoXCJcXDBcIik7KWU9ZS5zbGljZSgwLC0xKTtyZXR1cm4gZX0oZSkudHJpbSgpKT92b2lkIDA6ZX1mdW5jdGlvbiBTKGUpe2xldCB0PWZ1bmN0aW9uKGUpe2xldCB0PTA7cmV0dXJuIGUuaWZkMC5lbmFibGVkJiYodCs9MTAyNCksZS5leGlmLmVuYWJsZWQmJih0Kz0yMDQ4KSxlLm1ha2VyTm90ZSYmKHQrPTIwNDgpLGUudXNlckNvbW1lbnQmJih0Kz0xMDI0KSxlLmdwcy5lbmFibGVkJiYodCs9NTEyKSxlLmludGVyb3AuZW5hYmxlZCYmKHQrPTEwMCksZS5pZmQxLmVuYWJsZWQmJih0Kz0xMDI0KSx0KzIwNDh9KGUpO3JldHVybiBlLmpmaWYuZW5hYmxlZCYmKHQrPTUwKSxlLnhtcC5lbmFibGVkJiYodCs9MmU0KSxlLmlwdGMuZW5hYmxlZCYmKHQrPTE0ZTMpLGUuaWNjLmVuYWJsZWQmJih0Kz02ZTMpLHR9Y29uc3QgQz1lPT5TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsZSkseT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmLThcIik6dm9pZCAwO2Z1bmN0aW9uIGIoZSl7cmV0dXJuIHk/eS5kZWNvZGUoZSk6YT9CdWZmZXIuZnJvbShlKS50b1N0cmluZyhcInV0ZjhcIik6ZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShDKGUpKSl9Y2xhc3MgSXtzdGF0aWMgZnJvbShlLHQpe3JldHVybiBlIGluc3RhbmNlb2YgdGhpcyYmZS5sZT09PXQ/ZTpuZXcgSShlLHZvaWQgMCx2b2lkIDAsdCl9Y29uc3RydWN0b3IoZSx0PTAsaSxuKXtpZihcImJvb2xlYW5cIj09dHlwZW9mIG4mJih0aGlzLmxlPW4pLEFycmF5LmlzQXJyYXkoZSkmJihlPW5ldyBVaW50OEFycmF5KGUpKSwwPT09ZSl0aGlzLmJ5dGVPZmZzZXQ9MCx0aGlzLmJ5dGVMZW5ndGg9MDtlbHNlIGlmKGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil7dm9pZCAwPT09aSYmKGk9ZS5ieXRlTGVuZ3RoLXQpO2xldCBuPW5ldyBEYXRhVmlldyhlLHQsaSk7dGhpcy5fc3dhcERhdGFWaWV3KG4pfWVsc2UgaWYoZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fGUgaW5zdGFuY2VvZiBEYXRhVmlld3x8ZSBpbnN0YW5jZW9mIEkpe3ZvaWQgMD09PWkmJihpPWUuYnl0ZUxlbmd0aC10KSwodCs9ZS5ieXRlT2Zmc2V0KStpPmUuYnl0ZU9mZnNldCtlLmJ5dGVMZW5ndGgmJmcoXCJDcmVhdGluZyB2aWV3IG91dHNpZGUgb2YgYXZhaWxhYmxlIG1lbW9yeSBpbiBBcnJheUJ1ZmZlclwiKTtsZXQgbj1uZXcgRGF0YVZpZXcoZS5idWZmZXIsdCxpKTt0aGlzLl9zd2FwRGF0YVZpZXcobil9ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgZSl7bGV0IHQ9bmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcihlKSk7dGhpcy5fc3dhcERhdGFWaWV3KHQpfWVsc2UgZyhcIkludmFsaWQgaW5wdXQgYXJndW1lbnQgZm9yIEJ1ZmZlclZpZXc6IFwiK2UpfV9zd2FwQXJyYXlCdWZmZXIoZSl7dGhpcy5fc3dhcERhdGFWaWV3KG5ldyBEYXRhVmlldyhlKSl9X3N3YXBCdWZmZXIoZSl7dGhpcy5fc3dhcERhdGFWaWV3KG5ldyBEYXRhVmlldyhlLmJ1ZmZlcixlLmJ5dGVPZmZzZXQsZS5ieXRlTGVuZ3RoKSl9X3N3YXBEYXRhVmlldyhlKXt0aGlzLmRhdGFWaWV3PWUsdGhpcy5idWZmZXI9ZS5idWZmZXIsdGhpcy5ieXRlT2Zmc2V0PWUuYnl0ZU9mZnNldCx0aGlzLmJ5dGVMZW5ndGg9ZS5ieXRlTGVuZ3RofV9sZW5ndGhUb0VuZChlKXtyZXR1cm4gdGhpcy5ieXRlTGVuZ3RoLWV9c2V0KGUsdCxpPUkpe3JldHVybiBlIGluc3RhbmNlb2YgRGF0YVZpZXd8fGUgaW5zdGFuY2VvZiBJP2U9bmV3IFVpbnQ4QXJyYXkoZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCk6ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiYoZT1uZXcgVWludDhBcnJheShlKSksZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fGcoXCJCdWZmZXJWaWV3LnNldCgpOiBJbnZhbGlkIGRhdGEgYXJndW1lbnQuXCIpLHRoaXMudG9VaW50OCgpLnNldChlLHQpLG5ldyBpKHRoaXMsdCxlLmJ5dGVMZW5ndGgpfXN1YmFycmF5KGUsdCl7cmV0dXJuIHQ9dHx8dGhpcy5fbGVuZ3RoVG9FbmQoZSksbmV3IEkodGhpcyxlLHQpfXRvVWludDgoKXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsdGhpcy5ieXRlT2Zmc2V0LHRoaXMuYnl0ZUxlbmd0aCl9Z2V0VWludDhBcnJheShlLHQpe3JldHVybiBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcix0aGlzLmJ5dGVPZmZzZXQrZSx0KX1nZXRTdHJpbmcoZT0wLHQ9dGhpcy5ieXRlTGVuZ3RoKXtyZXR1cm4gYih0aGlzLmdldFVpbnQ4QXJyYXkoZSx0KSl9Z2V0TGF0aW4xU3RyaW5nKGU9MCx0PXRoaXMuYnl0ZUxlbmd0aCl7bGV0IGk9dGhpcy5nZXRVaW50OEFycmF5KGUsdCk7cmV0dXJuIEMoaSl9Z2V0VW5pY29kZVN0cmluZyhlPTAsdD10aGlzLmJ5dGVMZW5ndGgpe2NvbnN0IGk9W107Zm9yKGxldCBuPTA7bjx0JiZlK248dGhpcy5ieXRlTGVuZ3RoO24rPTIpaS5wdXNoKHRoaXMuZ2V0VWludDE2KGUrbikpO3JldHVybiBDKGkpfWdldEludDgoZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0SW50OChlKX1nZXRVaW50OChlKXtyZXR1cm4gdGhpcy5kYXRhVmlldy5nZXRVaW50OChlKX1nZXRJbnQxNihlLHQ9dGhpcy5sZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0SW50MTYoZSx0KX1nZXRJbnQzMihlLHQ9dGhpcy5sZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0SW50MzIoZSx0KX1nZXRVaW50MTYoZSx0PXRoaXMubGUpe3JldHVybiB0aGlzLmRhdGFWaWV3LmdldFVpbnQxNihlLHQpfWdldFVpbnQzMihlLHQ9dGhpcy5sZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0VWludDMyKGUsdCl9Z2V0RmxvYXQzMihlLHQ9dGhpcy5sZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQzMihlLHQpfWdldEZsb2F0NjQoZSx0PXRoaXMubGUpe3JldHVybiB0aGlzLmRhdGFWaWV3LmdldEZsb2F0NjQoZSx0KX1nZXRGbG9hdChlLHQ9dGhpcy5sZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQzMihlLHQpfWdldERvdWJsZShlLHQ9dGhpcy5sZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcuZ2V0RmxvYXQ2NChlLHQpfWdldFVpbnRCeXRlcyhlLHQsaSl7c3dpdGNoKHQpe2Nhc2UgMTpyZXR1cm4gdGhpcy5nZXRVaW50OChlLGkpO2Nhc2UgMjpyZXR1cm4gdGhpcy5nZXRVaW50MTYoZSxpKTtjYXNlIDQ6cmV0dXJuIHRoaXMuZ2V0VWludDMyKGUsaSk7Y2FzZSA4OnJldHVybiB0aGlzLmdldFVpbnQ2NCYmdGhpcy5nZXRVaW50NjQoZSxpKX19Z2V0VWludChlLHQsaSl7c3dpdGNoKHQpe2Nhc2UgODpyZXR1cm4gdGhpcy5nZXRVaW50OChlLGkpO2Nhc2UgMTY6cmV0dXJuIHRoaXMuZ2V0VWludDE2KGUsaSk7Y2FzZSAzMjpyZXR1cm4gdGhpcy5nZXRVaW50MzIoZSxpKTtjYXNlIDY0OnJldHVybiB0aGlzLmdldFVpbnQ2NCYmdGhpcy5nZXRVaW50NjQoZSxpKX19dG9TdHJpbmcoZSl7cmV0dXJuIHRoaXMuZGF0YVZpZXcudG9TdHJpbmcoZSx0aGlzLmNvbnN0cnVjdG9yLm5hbWUpfWVuc3VyZUNodW5rKCl7fX1mdW5jdGlvbiBQKGUsdCl7ZyhgJHtlfSAnJHt0fScgd2FzIG5vdCBsb2FkZWQsIHRyeSB1c2luZyBmdWxsIGJ1aWxkIG9mIGV4aWZyLmApfWNsYXNzIGsgZXh0ZW5kcyBNYXB7Y29uc3RydWN0b3IoZSl7c3VwZXIoKSx0aGlzLmtpbmQ9ZX1nZXQoZSx0KXtyZXR1cm4gdGhpcy5oYXMoZSl8fFAodGhpcy5raW5kLGUpLHQmJihlIGluIHR8fGZ1bmN0aW9uKGUsdCl7ZyhgVW5rbm93biAke2V9ICcke3R9Jy5gKX0odGhpcy5raW5kLGUpLHRbZV0uZW5hYmxlZHx8UCh0aGlzLmtpbmQsZSkpLHN1cGVyLmdldChlKX1rZXlMaXN0KCl7cmV0dXJuIEFycmF5LmZyb20odGhpcy5rZXlzKCkpfX12YXIgdz1uZXcgayhcImZpbGUgcGFyc2VyXCIpLFQ9bmV3IGsoXCJzZWdtZW50IHBhcnNlclwiKSxBPW5ldyBrKFwiZmlsZSByZWFkZXJcIik7ZnVuY3Rpb24gRChlLG4pe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP08oZSxuKTp0JiYhaSYmZSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQ/TyhlLnNyYyxuKTplIGluc3RhbmNlb2YgVWludDhBcnJheXx8ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyfHxlIGluc3RhbmNlb2YgRGF0YVZpZXc/bmV3IEkoZSk6dCYmZSBpbnN0YW5jZW9mIEJsb2I/eChlLG4sXCJibG9iXCIsUik6dm9pZCBnKFwiSW52YWxpZCBpbnB1dCBhcmd1bWVudFwiKX1mdW5jdGlvbiBPKGUsaSl7cmV0dXJuKHM9ZSkuc3RhcnRzV2l0aChcImRhdGE6XCIpfHxzLmxlbmd0aD4xZTQ/dihlLGksXCJiYXNlNjRcIik6biYmZS5pbmNsdWRlcyhcIjovL1wiKT94KGUsaSxcInVybFwiLE0pOm4/dihlLGksXCJmc1wiKTp0P3goZSxpLFwidXJsXCIsTSk6dm9pZCBnKFwiSW52YWxpZCBpbnB1dCBhcmd1bWVudFwiKTt2YXIgc31hc3luYyBmdW5jdGlvbiB4KGUsdCxpLG4pe3JldHVybiBBLmhhcyhpKT92KGUsdCxpKTpuP2FzeW5jIGZ1bmN0aW9uKGUsdCl7bGV0IGk9YXdhaXQgdChlKTtyZXR1cm4gbmV3IEkoaSl9KGUsbik6dm9pZCBnKGBQYXJzZXIgJHtpfSBpcyBub3QgbG9hZGVkYCl9YXN5bmMgZnVuY3Rpb24gdihlLHQsaSl7bGV0IG49bmV3KEEuZ2V0KGkpKShlLHQpO3JldHVybiBhd2FpdCBuLnJlYWQoKSxufWNvbnN0IE09ZT0+aChlKS50aGVuKChlPT5lLmFycmF5QnVmZmVyKCkpKSxSPWU9Pm5ldyBQcm9taXNlKCgodCxpKT0+e2xldCBuPW5ldyBGaWxlUmVhZGVyO24ub25sb2FkZW5kPSgpPT50KG4ucmVzdWx0fHxuZXcgQXJyYXlCdWZmZXIpLG4ub25lcnJvcj1pLG4ucmVhZEFzQXJyYXlCdWZmZXIoZSl9KSk7Y2xhc3MgTCBleHRlbmRzIE1hcHtnZXQgdGFnS2V5cygpe3JldHVybiB0aGlzLmFsbEtleXN8fCh0aGlzLmFsbEtleXM9QXJyYXkuZnJvbSh0aGlzLmtleXMoKSkpLHRoaXMuYWxsS2V5c31nZXQgdGFnVmFsdWVzKCl7cmV0dXJuIHRoaXMuYWxsVmFsdWVzfHwodGhpcy5hbGxWYWx1ZXM9QXJyYXkuZnJvbSh0aGlzLnZhbHVlcygpKSksdGhpcy5hbGxWYWx1ZXN9fWZ1bmN0aW9uIFUoZSx0LGkpe2xldCBuPW5ldyBMO2ZvcihsZXRbZSx0XW9mIGkpbi5zZXQoZSx0KTtpZihBcnJheS5pc0FycmF5KHQpKWZvcihsZXQgaSBvZiB0KWUuc2V0KGksbik7ZWxzZSBlLnNldCh0LG4pO3JldHVybiBufWZ1bmN0aW9uIEYoZSx0LGkpe2xldCBuLHM9ZS5nZXQodCk7Zm9yKG4gb2YgaSlzLnNldChuWzBdLG5bMV0pfWNvbnN0IEU9bmV3IE1hcCxCPW5ldyBNYXAsTj1uZXcgTWFwLEc9W1wiY2h1bmtlZFwiLFwiZmlyc3RDaHVua1NpemVcIixcImZpcnN0Q2h1bmtTaXplTm9kZVwiLFwiZmlyc3RDaHVua1NpemVCcm93c2VyXCIsXCJjaHVua1NpemVcIixcImNodW5rTGltaXRcIl0sVj1bXCJqZmlmXCIsXCJ4bXBcIixcImljY1wiLFwiaXB0Y1wiLFwiaWhkclwiXSx6PVtcInRpZmZcIiwuLi5WXSxIPVtcImlmZDBcIixcImlmZDFcIixcImV4aWZcIixcImdwc1wiLFwiaW50ZXJvcFwiXSxqPVsuLi56LC4uLkhdLFc9W1wibWFrZXJOb3RlXCIsXCJ1c2VyQ29tbWVudFwiXSxLPVtcInRyYW5zbGF0ZUtleXNcIixcInRyYW5zbGF0ZVZhbHVlc1wiLFwicmV2aXZlVmFsdWVzXCIsXCJtdWx0aVNlZ21lbnRcIl0sWD1bLi4uSyxcInNhbml0aXplXCIsXCJtZXJnZU91dHB1dFwiLFwic2lsZW50RXJyb3JzXCJdO2NsYXNzIF97Z2V0IHRyYW5zbGF0ZSgpe3JldHVybiB0aGlzLnRyYW5zbGF0ZUtleXN8fHRoaXMudHJhbnNsYXRlVmFsdWVzfHx0aGlzLnJldml2ZVZhbHVlc319Y2xhc3MgWSBleHRlbmRzIF97Z2V0IG5lZWRlZCgpe3JldHVybiB0aGlzLmVuYWJsZWR8fHRoaXMuZGVwcy5zaXplPjB9Y29uc3RydWN0b3IoZSx0LGksbil7aWYoc3VwZXIoKSxjKHRoaXMsXCJlbmFibGVkXCIsITEpLGModGhpcyxcInNraXBcIixuZXcgU2V0KSxjKHRoaXMsXCJwaWNrXCIsbmV3IFNldCksYyh0aGlzLFwiZGVwc1wiLG5ldyBTZXQpLGModGhpcyxcInRyYW5zbGF0ZUtleXNcIiwhMSksYyh0aGlzLFwidHJhbnNsYXRlVmFsdWVzXCIsITEpLGModGhpcyxcInJldml2ZVZhbHVlc1wiLCExKSx0aGlzLmtleT1lLHRoaXMuZW5hYmxlZD10LHRoaXMucGFyc2U9dGhpcy5lbmFibGVkLHRoaXMuYXBwbHlJbmhlcml0YWJsZXMobiksdGhpcy5jYW5CZUZpbHRlcmVkPUguaW5jbHVkZXMoZSksdGhpcy5jYW5CZUZpbHRlcmVkJiYodGhpcy5kaWN0PUUuZ2V0KGUpKSx2b2lkIDAhPT1pKWlmKEFycmF5LmlzQXJyYXkoaSkpdGhpcy5wYXJzZT10aGlzLmVuYWJsZWQ9ITAsdGhpcy5jYW5CZUZpbHRlcmVkJiZpLmxlbmd0aD4wJiZ0aGlzLnRyYW5zbGF0ZVRhZ1NldChpLHRoaXMucGljayk7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgaSl7aWYodGhpcy5lbmFibGVkPSEwLHRoaXMucGFyc2U9ITEhPT1pLnBhcnNlLHRoaXMuY2FuQmVGaWx0ZXJlZCl7bGV0e3BpY2s6ZSxza2lwOnR9PWk7ZSYmZS5sZW5ndGg+MCYmdGhpcy50cmFuc2xhdGVUYWdTZXQoZSx0aGlzLnBpY2spLHQmJnQubGVuZ3RoPjAmJnRoaXMudHJhbnNsYXRlVGFnU2V0KHQsdGhpcy5za2lwKX10aGlzLmFwcGx5SW5oZXJpdGFibGVzKGkpfWVsc2UhMD09PWl8fCExPT09aT90aGlzLnBhcnNlPXRoaXMuZW5hYmxlZD1pOmcoYEludmFsaWQgb3B0aW9ucyBhcmd1bWVudDogJHtpfWApfWFwcGx5SW5oZXJpdGFibGVzKGUpe2xldCB0LGk7Zm9yKHQgb2YgSylpPWVbdF0sdm9pZCAwIT09aSYmKHRoaXNbdF09aSl9dHJhbnNsYXRlVGFnU2V0KGUsdCl7aWYodGhpcy5kaWN0KXtsZXQgaSxuLHt0YWdLZXlzOnMsdGFnVmFsdWVzOnJ9PXRoaXMuZGljdDtmb3IoaSBvZiBlKVwic3RyaW5nXCI9PXR5cGVvZiBpPyhuPXIuaW5kZXhPZihpKSwtMT09PW4mJihuPXMuaW5kZXhPZihOdW1iZXIoaSkpKSwtMSE9PW4mJnQuYWRkKE51bWJlcihzW25dKSkpOnQuYWRkKGkpfWVsc2UgZm9yKGxldCBpIG9mIGUpdC5hZGQoaSl9ZmluYWxpemVGaWx0ZXJzKCl7IXRoaXMuZW5hYmxlZCYmdGhpcy5kZXBzLnNpemU+MD8odGhpcy5lbmFibGVkPSEwLGVlKHRoaXMucGljayx0aGlzLmRlcHMpKTp0aGlzLmVuYWJsZWQmJnRoaXMucGljay5zaXplPjAmJmVlKHRoaXMucGljayx0aGlzLmRlcHMpfX12YXIgJD17amZpZjohMSx0aWZmOiEwLHhtcDohMSxpY2M6ITEsaXB0YzohMSxpZmQwOiEwLGlmZDE6ITEsZXhpZjohMCxncHM6ITAsaW50ZXJvcDohMSxpaGRyOnZvaWQgMCxtYWtlck5vdGU6ITEsdXNlckNvbW1lbnQ6ITEsbXVsdGlTZWdtZW50OiExLHNraXA6W10scGljazpbXSx0cmFuc2xhdGVLZXlzOiEwLHRyYW5zbGF0ZVZhbHVlczohMCxyZXZpdmVWYWx1ZXM6ITAsc2FuaXRpemU6ITAsbWVyZ2VPdXRwdXQ6ITAsc2lsZW50RXJyb3JzOiEwLGNodW5rZWQ6ITAsZmlyc3RDaHVua1NpemU6dm9pZCAwLGZpcnN0Q2h1bmtTaXplTm9kZTo1MTIsZmlyc3RDaHVua1NpemVCcm93c2VyOjY1NTM2LGNodW5rU2l6ZTo2NTUzNixjaHVua0xpbWl0OjV9LEo9bmV3IE1hcDtjbGFzcyBxIGV4dGVuZHMgX3tzdGF0aWMgdXNlQ2FjaGVkKGUpe2xldCB0PUouZ2V0KGUpO3JldHVybiB2b2lkIDAhPT10fHwodD1uZXcgdGhpcyhlKSxKLnNldChlLHQpKSx0fWNvbnN0cnVjdG9yKGUpe3N1cGVyKCksITA9PT1lP3RoaXMuc2V0dXBGcm9tVHJ1ZSgpOnZvaWQgMD09PWU/dGhpcy5zZXR1cEZyb21VbmRlZmluZWQoKTpBcnJheS5pc0FycmF5KGUpP3RoaXMuc2V0dXBGcm9tQXJyYXkoZSk6XCJvYmplY3RcIj09dHlwZW9mIGU/dGhpcy5zZXR1cEZyb21PYmplY3QoZSk6ZyhgSW52YWxpZCBvcHRpb25zIGFyZ3VtZW50ICR7ZX1gKSx2b2lkIDA9PT10aGlzLmZpcnN0Q2h1bmtTaXplJiYodGhpcy5maXJzdENodW5rU2l6ZT10P3RoaXMuZmlyc3RDaHVua1NpemVCcm93c2VyOnRoaXMuZmlyc3RDaHVua1NpemVOb2RlKSx0aGlzLm1lcmdlT3V0cHV0JiYodGhpcy5pZmQxLmVuYWJsZWQ9ITEpLHRoaXMuZmlsdGVyTmVzdGVkU2VnbWVudFRhZ3MoKSx0aGlzLnRyYXZlcnNlVGlmZkRlcGVuZGVuY3lUcmVlKCksdGhpcy5jaGVja0xvYWRlZFBsdWdpbnMoKX1zZXR1cEZyb21VbmRlZmluZWQoKXtsZXQgZTtmb3IoZSBvZiBHKXRoaXNbZV09JFtlXTtmb3IoZSBvZiBYKXRoaXNbZV09JFtlXTtmb3IoZSBvZiBXKXRoaXNbZV09JFtlXTtmb3IoZSBvZiBqKXRoaXNbZV09bmV3IFkoZSwkW2VdLHZvaWQgMCx0aGlzKX1zZXR1cEZyb21UcnVlKCl7bGV0IGU7Zm9yKGUgb2YgRyl0aGlzW2VdPSRbZV07Zm9yKGUgb2YgWCl0aGlzW2VdPSRbZV07Zm9yKGUgb2YgVyl0aGlzW2VdPSEwO2ZvcihlIG9mIGopdGhpc1tlXT1uZXcgWShlLCEwLHZvaWQgMCx0aGlzKX1zZXR1cEZyb21BcnJheShlKXtsZXQgdDtmb3IodCBvZiBHKXRoaXNbdF09JFt0XTtmb3IodCBvZiBYKXRoaXNbdF09JFt0XTtmb3IodCBvZiBXKXRoaXNbdF09JFt0XTtmb3IodCBvZiBqKXRoaXNbdF09bmV3IFkodCwhMSx2b2lkIDAsdGhpcyk7dGhpcy5zZXR1cEdsb2JhbEZpbHRlcnMoZSx2b2lkIDAsSCl9c2V0dXBGcm9tT2JqZWN0KGUpe2xldCB0O2Zvcih0IG9mKEguaWZkMD1ILmlmZDB8fEguaW1hZ2UsSC5pZmQxPUguaWZkMXx8SC50aHVtYm5haWwsT2JqZWN0LmFzc2lnbih0aGlzLGUpLEcpKXRoaXNbdF09WihlW3RdLCRbdF0pO2Zvcih0IG9mIFgpdGhpc1t0XT1aKGVbdF0sJFt0XSk7Zm9yKHQgb2YgVyl0aGlzW3RdPVooZVt0XSwkW3RdKTtmb3IodCBvZiB6KXRoaXNbdF09bmV3IFkodCwkW3RdLGVbdF0sdGhpcyk7Zm9yKHQgb2YgSCl0aGlzW3RdPW5ldyBZKHQsJFt0XSxlW3RdLHRoaXMudGlmZik7dGhpcy5zZXR1cEdsb2JhbEZpbHRlcnMoZS5waWNrLGUuc2tpcCxILGopLCEwPT09ZS50aWZmP3RoaXMuYmF0Y2hFbmFibGVXaXRoQm9vbChILCEwKTohMT09PWUudGlmZj90aGlzLmJhdGNoRW5hYmxlV2l0aFVzZXJWYWx1ZShILGUpOkFycmF5LmlzQXJyYXkoZS50aWZmKT90aGlzLnNldHVwR2xvYmFsRmlsdGVycyhlLnRpZmYsdm9pZCAwLEgpOlwib2JqZWN0XCI9PXR5cGVvZiBlLnRpZmYmJnRoaXMuc2V0dXBHbG9iYWxGaWx0ZXJzKGUudGlmZi5waWNrLGUudGlmZi5za2lwLEgpfWJhdGNoRW5hYmxlV2l0aEJvb2woZSx0KXtmb3IobGV0IGkgb2YgZSl0aGlzW2ldLmVuYWJsZWQ9dH1iYXRjaEVuYWJsZVdpdGhVc2VyVmFsdWUoZSx0KXtmb3IobGV0IGkgb2YgZSl7bGV0IGU9dFtpXTt0aGlzW2ldLmVuYWJsZWQ9ITEhPT1lJiZ2b2lkIDAhPT1lfX1zZXR1cEdsb2JhbEZpbHRlcnMoZSx0LGksbj1pKXtpZihlJiZlLmxlbmd0aCl7Zm9yKGxldCBlIG9mIG4pdGhpc1tlXS5lbmFibGVkPSExO2xldCB0PVEoZSxpKTtmb3IobGV0W2UsaV1vZiB0KWVlKHRoaXNbZV0ucGljayxpKSx0aGlzW2VdLmVuYWJsZWQ9ITB9ZWxzZSBpZih0JiZ0Lmxlbmd0aCl7bGV0IGU9USh0LGkpO2ZvcihsZXRbdCxpXW9mIGUpZWUodGhpc1t0XS5za2lwLGkpfX1maWx0ZXJOZXN0ZWRTZWdtZW50VGFncygpe2xldHtpZmQwOmUsZXhpZjp0LHhtcDppLGlwdGM6bixpY2M6c309dGhpczt0aGlzLm1ha2VyTm90ZT90LmRlcHMuYWRkKDM3NTAwKTp0LnNraXAuYWRkKDM3NTAwKSx0aGlzLnVzZXJDb21tZW50P3QuZGVwcy5hZGQoMzc1MTApOnQuc2tpcC5hZGQoMzc1MTApLGkuZW5hYmxlZHx8ZS5za2lwLmFkZCg3MDApLG4uZW5hYmxlZHx8ZS5za2lwLmFkZCgzMzcyMykscy5lbmFibGVkfHxlLnNraXAuYWRkKDM0Njc1KX10cmF2ZXJzZVRpZmZEZXBlbmRlbmN5VHJlZSgpe2xldHtpZmQwOmUsZXhpZjp0LGdwczppLGludGVyb3A6bn09dGhpcztuLm5lZWRlZCYmKHQuZGVwcy5hZGQoNDA5NjUpLGUuZGVwcy5hZGQoNDA5NjUpKSx0Lm5lZWRlZCYmZS5kZXBzLmFkZCgzNDY2NSksaS5uZWVkZWQmJmUuZGVwcy5hZGQoMzQ4NTMpLHRoaXMudGlmZi5lbmFibGVkPUguc29tZSgoZT0+ITA9PT10aGlzW2VdLmVuYWJsZWQpKXx8dGhpcy5tYWtlck5vdGV8fHRoaXMudXNlckNvbW1lbnQ7Zm9yKGxldCBlIG9mIEgpdGhpc1tlXS5maW5hbGl6ZUZpbHRlcnMoKX1nZXQgb25seVRpZmYoKXtyZXR1cm4hVi5tYXAoKGU9PnRoaXNbZV0uZW5hYmxlZCkpLnNvbWUoKGU9PiEwPT09ZSkpJiZ0aGlzLnRpZmYuZW5hYmxlZH1jaGVja0xvYWRlZFBsdWdpbnMoKXtmb3IobGV0IGUgb2Ygeil0aGlzW2VdLmVuYWJsZWQmJiFULmhhcyhlKSYmUChcInNlZ21lbnQgcGFyc2VyXCIsZSl9fWZ1bmN0aW9uIFEoZSx0KXtsZXQgaSxuLHMscixhPVtdO2ZvcihzIG9mIHQpe2ZvcihyIG9mKGk9RS5nZXQocyksbj1bXSxpKSkoZS5pbmNsdWRlcyhyWzBdKXx8ZS5pbmNsdWRlcyhyWzFdKSkmJm4ucHVzaChyWzBdKTtuLmxlbmd0aCYmYS5wdXNoKFtzLG5dKX1yZXR1cm4gYX1mdW5jdGlvbiBaKGUsdCl7cmV0dXJuIHZvaWQgMCE9PWU/ZTp2b2lkIDAhPT10P3Q6dm9pZCAwfWZ1bmN0aW9uIGVlKGUsdCl7Zm9yKGxldCBpIG9mIHQpZS5hZGQoaSl9YyhxLFwiZGVmYXVsdFwiLCQpO2NsYXNzIHRle2NvbnN0cnVjdG9yKGUpe2ModGhpcyxcInBhcnNlcnNcIix7fSksYyh0aGlzLFwib3V0cHV0XCIse30pLGModGhpcyxcImVycm9yc1wiLFtdKSxjKHRoaXMsXCJwdXNoVG9FcnJvcnNcIiwoZT0+dGhpcy5lcnJvcnMucHVzaChlKSkpLHRoaXMub3B0aW9ucz1xLnVzZUNhY2hlZChlKX1hc3luYyByZWFkKGUpe3RoaXMuZmlsZT1hd2FpdCBEKGUsdGhpcy5vcHRpb25zKX1zZXR1cCgpe2lmKHRoaXMuZmlsZVBhcnNlcilyZXR1cm47bGV0e2ZpbGU6ZX09dGhpcyx0PWUuZ2V0VWludDE2KDApO2ZvcihsZXRbaSxuXW9mIHcpaWYobi5jYW5IYW5kbGUoZSx0KSlyZXR1cm4gdGhpcy5maWxlUGFyc2VyPW5ldyBuKHRoaXMub3B0aW9ucyx0aGlzLmZpbGUsdGhpcy5wYXJzZXJzKSxlW2ldPSEwO3RoaXMuZmlsZS5jbG9zZSYmdGhpcy5maWxlLmNsb3NlKCksZyhcIlVua25vd24gZmlsZSBmb3JtYXRcIil9YXN5bmMgcGFyc2UoKXtsZXR7b3V0cHV0OmUsZXJyb3JzOnR9PXRoaXM7cmV0dXJuIHRoaXMuc2V0dXAoKSx0aGlzLm9wdGlvbnMuc2lsZW50RXJyb3JzPyhhd2FpdCB0aGlzLmV4ZWN1dGVQYXJzZXJzKCkuY2F0Y2godGhpcy5wdXNoVG9FcnJvcnMpLHQucHVzaCguLi50aGlzLmZpbGVQYXJzZXIuZXJyb3JzKSk6YXdhaXQgdGhpcy5leGVjdXRlUGFyc2VycygpLHRoaXMuZmlsZS5jbG9zZSYmdGhpcy5maWxlLmNsb3NlKCksdGhpcy5vcHRpb25zLnNpbGVudEVycm9ycyYmdC5sZW5ndGg+MCYmKGUuZXJyb3JzPXQpLGYoZSl9YXN5bmMgZXhlY3V0ZVBhcnNlcnMoKXtsZXR7b3V0cHV0OmV9PXRoaXM7YXdhaXQgdGhpcy5maWxlUGFyc2VyLnBhcnNlKCk7bGV0IHQ9T2JqZWN0LnZhbHVlcyh0aGlzLnBhcnNlcnMpLm1hcCgoYXN5bmMgdD0+e2xldCBpPWF3YWl0IHQucGFyc2UoKTt0LmFzc2lnblRvT3V0cHV0KGUsaSl9KSk7dGhpcy5vcHRpb25zLnNpbGVudEVycm9ycyYmKHQ9dC5tYXAoKGU9PmUuY2F0Y2godGhpcy5wdXNoVG9FcnJvcnMpKSkpLGF3YWl0IFByb21pc2UuYWxsKHQpfWFzeW5jIGV4dHJhY3RUaHVtYm5haWwoKXt0aGlzLnNldHVwKCk7bGV0e29wdGlvbnM6ZSxmaWxlOnR9PXRoaXMsaT1ULmdldChcInRpZmZcIixlKTt2YXIgbjtpZih0LnRpZmY/bj17c3RhcnQ6MCx0eXBlOlwidGlmZlwifTp0LmpwZWcmJihuPWF3YWl0IHRoaXMuZmlsZVBhcnNlci5nZXRPckZpbmRTZWdtZW50KFwidGlmZlwiKSksdm9pZCAwPT09bilyZXR1cm47bGV0IHM9YXdhaXQgdGhpcy5maWxlUGFyc2VyLmVuc3VyZVNlZ21lbnRDaHVuayhuKSxyPXRoaXMucGFyc2Vycy50aWZmPW5ldyBpKHMsZSx0KSxhPWF3YWl0IHIuZXh0cmFjdFRodW1ibmFpbCgpO3JldHVybiB0LmNsb3NlJiZ0LmNsb3NlKCksYX19YXN5bmMgZnVuY3Rpb24gaWUoZSx0KXtsZXQgaT1uZXcgdGUodCk7cmV0dXJuIGF3YWl0IGkucmVhZChlKSxpLnBhcnNlKCl9dmFyIG5lPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLHBhcnNlOmllLEV4aWZyOnRlLGZpbGVQYXJzZXJzOncsc2VnbWVudFBhcnNlcnM6VCxmaWxlUmVhZGVyczpBLHRhZ0tleXM6RSx0YWdWYWx1ZXM6Qix0YWdSZXZpdmVyczpOLGNyZWF0ZURpY3Rpb25hcnk6VSxleHRlbmREaWN0aW9uYXJ5OkYsZmV0Y2hVcmxBc0FycmF5QnVmZmVyOk0scmVhZEJsb2JBc0FycmF5QnVmZmVyOlIsY2h1bmtlZFByb3BzOkcsb3RoZXJTZWdtZW50czpWLHNlZ21lbnRzOnosdGlmZkJsb2NrczpILHNlZ21lbnRzQW5kQmxvY2tzOmosdGlmZkV4dHJhY3RhYmxlczpXLGluaGVyaXRhYmxlczpLLGFsbEZvcm1hdHRlcnM6WCxPcHRpb25zOnF9KTtjbGFzcyBzZXtjb25zdHJ1Y3RvcihlLHQsaSl7Yyh0aGlzLFwiZXJyb3JzXCIsW10pLGModGhpcyxcImVuc3VyZVNlZ21lbnRDaHVua1wiLChhc3luYyBlPT57bGV0IHQ9ZS5zdGFydCxpPWUuc2l6ZXx8NjU1MzY7aWYodGhpcy5maWxlLmNodW5rZWQpaWYodGhpcy5maWxlLmF2YWlsYWJsZSh0LGkpKWUuY2h1bms9dGhpcy5maWxlLnN1YmFycmF5KHQsaSk7ZWxzZSB0cnl7ZS5jaHVuaz1hd2FpdCB0aGlzLmZpbGUucmVhZENodW5rKHQsaSl9Y2F0Y2godCl7ZyhgQ291bGRuJ3QgcmVhZCBzZWdtZW50OiAke0pTT04uc3RyaW5naWZ5KGUpfS4gJHt0Lm1lc3NhZ2V9YCl9ZWxzZSB0aGlzLmZpbGUuYnl0ZUxlbmd0aD50K2k/ZS5jaHVuaz10aGlzLmZpbGUuc3ViYXJyYXkodCxpKTp2b2lkIDA9PT1lLnNpemU/ZS5jaHVuaz10aGlzLmZpbGUuc3ViYXJyYXkodCk6ZyhcIlNlZ21lbnQgdW5yZWFjaGFibGU6IFwiK0pTT04uc3RyaW5naWZ5KGUpKTtyZXR1cm4gZS5jaHVua30pKSx0aGlzLmV4dGVuZE9wdGlvbnMmJnRoaXMuZXh0ZW5kT3B0aW9ucyhlKSx0aGlzLm9wdGlvbnM9ZSx0aGlzLmZpbGU9dCx0aGlzLnBhcnNlcnM9aX1pbmplY3RTZWdtZW50KGUsdCl7dGhpcy5vcHRpb25zW2VdLmVuYWJsZWQmJnRoaXMuY3JlYXRlUGFyc2VyKGUsdCl9Y3JlYXRlUGFyc2VyKGUsdCl7bGV0IGk9bmV3KFQuZ2V0KGUpKSh0LHRoaXMub3B0aW9ucyx0aGlzLmZpbGUpO3JldHVybiB0aGlzLnBhcnNlcnNbZV09aX1jcmVhdGVQYXJzZXJzKGUpe2ZvcihsZXQgdCBvZiBlKXtsZXR7dHlwZTplLGNodW5rOml9PXQsbj10aGlzLm9wdGlvbnNbZV07aWYobiYmbi5lbmFibGVkKXtsZXQgdD10aGlzLnBhcnNlcnNbZV07dCYmdC5hcHBlbmR8fHR8fHRoaXMuY3JlYXRlUGFyc2VyKGUsaSl9fX1hc3luYyByZWFkU2VnbWVudHMoZSl7bGV0IHQ9ZS5tYXAodGhpcy5lbnN1cmVTZWdtZW50Q2h1bmspO2F3YWl0IFByb21pc2UuYWxsKHQpfX1jbGFzcyByZXtzdGF0aWMgZmluZFBvc2l0aW9uKGUsdCl7bGV0IGk9ZS5nZXRVaW50MTYodCsyKSsyLG49XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5oZWFkZXJMZW5ndGg/dGhpcy5oZWFkZXJMZW5ndGgoZSx0LGkpOnRoaXMuaGVhZGVyTGVuZ3RoLHM9dCtuLHI9aS1uO3JldHVybntvZmZzZXQ6dCxsZW5ndGg6aSxoZWFkZXJMZW5ndGg6bixzdGFydDpzLHNpemU6cixlbmQ6cytyfX1zdGF0aWMgcGFyc2UoZSx0PXt9KXtyZXR1cm4gbmV3IHRoaXMoZSxuZXcgcSh7W3RoaXMudHlwZV06dH0pLGUpLnBhcnNlKCl9bm9ybWFsaXplSW5wdXQoZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBJP2U6bmV3IEkoZSl9Y29uc3RydWN0b3IoZSx0PXt9LGkpe2ModGhpcyxcImVycm9yc1wiLFtdKSxjKHRoaXMsXCJyYXdcIixuZXcgTWFwKSxjKHRoaXMsXCJoYW5kbGVFcnJvclwiLChlPT57aWYoIXRoaXMub3B0aW9ucy5zaWxlbnRFcnJvcnMpdGhyb3cgZTt0aGlzLmVycm9ycy5wdXNoKGUubWVzc2FnZSl9KSksdGhpcy5jaHVuaz10aGlzLm5vcm1hbGl6ZUlucHV0KGUpLHRoaXMuZmlsZT1pLHRoaXMudHlwZT10aGlzLmNvbnN0cnVjdG9yLnR5cGUsdGhpcy5nbG9iYWxPcHRpb25zPXRoaXMub3B0aW9ucz10LHRoaXMubG9jYWxPcHRpb25zPXRbdGhpcy50eXBlXSx0aGlzLmNhblRyYW5zbGF0ZT10aGlzLmxvY2FsT3B0aW9ucyYmdGhpcy5sb2NhbE9wdGlvbnMudHJhbnNsYXRlfXRyYW5zbGF0ZSgpe3RoaXMuY2FuVHJhbnNsYXRlJiYodGhpcy50cmFuc2xhdGVkPXRoaXMudHJhbnNsYXRlQmxvY2sodGhpcy5yYXcsdGhpcy50eXBlKSl9Z2V0IG91dHB1dCgpe3JldHVybiB0aGlzLnRyYW5zbGF0ZWQ/dGhpcy50cmFuc2xhdGVkOnRoaXMucmF3P09iamVjdC5mcm9tRW50cmllcyh0aGlzLnJhdyk6dm9pZCAwfXRyYW5zbGF0ZUJsb2NrKGUsdCl7bGV0IGk9Ti5nZXQodCksbj1CLmdldCh0KSxzPUUuZ2V0KHQpLHI9dGhpcy5vcHRpb25zW3RdLGE9ci5yZXZpdmVWYWx1ZXMmJiEhaSxvPXIudHJhbnNsYXRlVmFsdWVzJiYhIW4sbD1yLnRyYW5zbGF0ZUtleXMmJiEhcyxoPXt9O2ZvcihsZXRbdCxyXW9mIGUpYSYmaS5oYXModCk/cj1pLmdldCh0KShyKTpvJiZuLmhhcyh0KSYmKHI9dGhpcy50cmFuc2xhdGVWYWx1ZShyLG4uZ2V0KHQpKSksbCYmcy5oYXModCkmJih0PXMuZ2V0KHQpfHx0KSxoW3RdPXI7cmV0dXJuIGh9dHJhbnNsYXRlVmFsdWUoZSx0KXtyZXR1cm4gdFtlXXx8dC5ERUZBVUxUfHxlfWFzc2lnblRvT3V0cHV0KGUsdCl7dGhpcy5hc3NpZ25PYmplY3RUb091dHB1dChlLHRoaXMuY29uc3RydWN0b3IudHlwZSx0KX1hc3NpZ25PYmplY3RUb091dHB1dChlLHQsaSl7aWYodGhpcy5nbG9iYWxPcHRpb25zLm1lcmdlT3V0cHV0KXJldHVybiBPYmplY3QuYXNzaWduKGUsaSk7ZVt0XT9PYmplY3QuYXNzaWduKGVbdF0saSk6ZVt0XT1pfX1jKHJlLFwiaGVhZGVyTGVuZ3RoXCIsNCksYyhyZSxcInR5cGVcIix2b2lkIDApLGMocmUsXCJtdWx0aVNlZ21lbnRcIiwhMSksYyhyZSxcImNhbkhhbmRsZVwiLCgoKT0+ITEpKTtmdW5jdGlvbiBhZShlKXtyZXR1cm4gMTkyPT09ZXx8MTk0PT09ZXx8MTk2PT09ZXx8MjE5PT09ZXx8MjIxPT09ZXx8MjE4PT09ZXx8MjU0PT09ZX1mdW5jdGlvbiBvZShlKXtyZXR1cm4gZT49MjI0JiZlPD0yMzl9ZnVuY3Rpb24gbGUoZSx0LGkpe2ZvcihsZXRbbixzXW9mIFQpaWYocy5jYW5IYW5kbGUoZSx0LGkpKXJldHVybiBufWNsYXNzIGhlIGV4dGVuZHMgc2V7Y29uc3RydWN0b3IoLi4uZSl7c3VwZXIoLi4uZSksYyh0aGlzLFwiYXBwU2VnbWVudHNcIixbXSksYyh0aGlzLFwianBlZ1NlZ21lbnRzXCIsW10pLGModGhpcyxcInVua25vd25TZWdtZW50c1wiLFtdKX1zdGF0aWMgY2FuSGFuZGxlKGUsdCl7cmV0dXJuIDY1NDk2PT09dH1hc3luYyBwYXJzZSgpe2F3YWl0IHRoaXMuZmluZEFwcFNlZ21lbnRzKCksYXdhaXQgdGhpcy5yZWFkU2VnbWVudHModGhpcy5hcHBTZWdtZW50cyksdGhpcy5tZXJnZU11bHRpU2VnbWVudHMoKSx0aGlzLmNyZWF0ZVBhcnNlcnModGhpcy5tZXJnZWRBcHBTZWdtZW50c3x8dGhpcy5hcHBTZWdtZW50cyl9c2V0dXBTZWdtZW50RmluZGVyQXJncyhlKXshMD09PWU/KHRoaXMuZmluZEFsbD0hMCx0aGlzLndhbnRlZD1uZXcgU2V0KFQua2V5TGlzdCgpKSk6KGU9dm9pZCAwPT09ZT9ULmtleUxpc3QoKS5maWx0ZXIoKGU9PnRoaXMub3B0aW9uc1tlXS5lbmFibGVkKSk6ZS5maWx0ZXIoKGU9PnRoaXMub3B0aW9uc1tlXS5lbmFibGVkJiZULmhhcyhlKSkpLHRoaXMuZmluZEFsbD0hMSx0aGlzLnJlbWFpbmluZz1uZXcgU2V0KGUpLHRoaXMud2FudGVkPW5ldyBTZXQoZSkpLHRoaXMudW5maW5pc2hlZE11bHRpU2VnbWVudD0hMX1hc3luYyBmaW5kQXBwU2VnbWVudHMoZT0wLHQpe3RoaXMuc2V0dXBTZWdtZW50RmluZGVyQXJncyh0KTtsZXR7ZmlsZTppLGZpbmRBbGw6bix3YW50ZWQ6cyxyZW1haW5pbmc6cn09dGhpcztpZighbiYmdGhpcy5maWxlLmNodW5rZWQmJihuPUFycmF5LmZyb20ocykuc29tZSgoZT0+e2xldCB0PVQuZ2V0KGUpLGk9dGhpcy5vcHRpb25zW2VdO3JldHVybiB0Lm11bHRpU2VnbWVudCYmaS5tdWx0aVNlZ21lbnR9KSksbiYmYXdhaXQgdGhpcy5maWxlLnJlYWRXaG9sZSgpKSxlPXRoaXMuZmluZEFwcFNlZ21lbnRzSW5SYW5nZShlLGkuYnl0ZUxlbmd0aCksIXRoaXMub3B0aW9ucy5vbmx5VGlmZiYmaS5jaHVua2VkKXtsZXQgdD0hMTtmb3IoO3Iuc2l6ZT4wJiYhdCYmKGkuY2FuUmVhZE5leHRDaHVua3x8dGhpcy51bmZpbmlzaGVkTXVsdGlTZWdtZW50KTspe2xldHtuZXh0Q2h1bmtPZmZzZXQ6bn09aSxzPXRoaXMuYXBwU2VnbWVudHMuc29tZSgoZT0+IXRoaXMuZmlsZS5hdmFpbGFibGUoZS5vZmZzZXR8fGUuc3RhcnQsZS5sZW5ndGh8fGUuc2l6ZSkpKTtpZih0PWU+biYmIXM/IWF3YWl0IGkucmVhZE5leHRDaHVuayhlKTohYXdhaXQgaS5yZWFkTmV4dENodW5rKG4pLHZvaWQgMD09PShlPXRoaXMuZmluZEFwcFNlZ21lbnRzSW5SYW5nZShlLGkuYnl0ZUxlbmd0aCkpKXJldHVybn19fWZpbmRBcHBTZWdtZW50c0luUmFuZ2UoZSx0KXt0LT0yO2xldCBpLG4scyxyLGEsbyx7ZmlsZTpsLGZpbmRBbGw6aCx3YW50ZWQ6dSxyZW1haW5pbmc6YyxvcHRpb25zOmZ9PXRoaXM7Zm9yKDtlPHQ7ZSsrKWlmKDI1NT09PWwuZ2V0VWludDgoZSkpaWYoaT1sLmdldFVpbnQ4KGUrMSksb2UoaSkpe2lmKG49bC5nZXRVaW50MTYoZSsyKSxzPWxlKGwsZSxuKSxzJiZ1LmhhcyhzKSYmKHI9VC5nZXQocyksYT1yLmZpbmRQb3NpdGlvbihsLGUpLG89ZltzXSxhLnR5cGU9cyx0aGlzLmFwcFNlZ21lbnRzLnB1c2goYSksIWgmJihyLm11bHRpU2VnbWVudCYmby5tdWx0aVNlZ21lbnQ/KHRoaXMudW5maW5pc2hlZE11bHRpU2VnbWVudD1hLmNodW5rTnVtYmVyPGEuY2h1bmtDb3VudCx0aGlzLnVuZmluaXNoZWRNdWx0aVNlZ21lbnR8fGMuZGVsZXRlKHMpKTpjLmRlbGV0ZShzKSwwPT09Yy5zaXplKSkpYnJlYWs7Zi5yZWNvcmRVbmtub3duU2VnbWVudHMmJihhPXJlLmZpbmRQb3NpdGlvbihsLGUpLGEubWFya2VyPWksdGhpcy51bmtub3duU2VnbWVudHMucHVzaChhKSksZSs9bisxfWVsc2UgaWYoYWUoaSkpe2lmKG49bC5nZXRVaW50MTYoZSsyKSwyMTg9PT1pJiYhMSE9PWYuc3RvcEFmdGVyU29zKXJldHVybjtmLnJlY29yZEpwZWdTZWdtZW50cyYmdGhpcy5qcGVnU2VnbWVudHMucHVzaCh7b2Zmc2V0OmUsbGVuZ3RoOm4sbWFya2VyOml9KSxlKz1uKzF9cmV0dXJuIGV9bWVyZ2VNdWx0aVNlZ21lbnRzKCl7aWYoIXRoaXMuYXBwU2VnbWVudHMuc29tZSgoZT0+ZS5tdWx0aVNlZ21lbnQpKSlyZXR1cm47bGV0IGU9ZnVuY3Rpb24oZSx0KXtsZXQgaSxuLHMscj1uZXcgTWFwO2ZvcihsZXQgYT0wO2E8ZS5sZW5ndGg7YSsrKWk9ZVthXSxuPWlbdF0sci5oYXMobik/cz1yLmdldChuKTpyLnNldChuLHM9W10pLHMucHVzaChpKTtyZXR1cm4gQXJyYXkuZnJvbShyKX0odGhpcy5hcHBTZWdtZW50cyxcInR5cGVcIik7dGhpcy5tZXJnZWRBcHBTZWdtZW50cz1lLm1hcCgoKFtlLHRdKT0+e2xldCBpPVQuZ2V0KGUsdGhpcy5vcHRpb25zKTtpZihpLmhhbmRsZU11bHRpU2VnbWVudHMpe3JldHVybnt0eXBlOmUsY2h1bms6aS5oYW5kbGVNdWx0aVNlZ21lbnRzKHQpfX1yZXR1cm4gdFswXX0pKX1nZXRTZWdtZW50KGUpe3JldHVybiB0aGlzLmFwcFNlZ21lbnRzLmZpbmQoKHQ9PnQudHlwZT09PWUpKX1hc3luYyBnZXRPckZpbmRTZWdtZW50KGUpe2xldCB0PXRoaXMuZ2V0U2VnbWVudChlKTtyZXR1cm4gdm9pZCAwPT09dCYmKGF3YWl0IHRoaXMuZmluZEFwcFNlZ21lbnRzKDAsW2VdKSx0PXRoaXMuZ2V0U2VnbWVudChlKSksdH19YyhoZSxcInR5cGVcIixcImpwZWdcIiksdy5zZXQoXCJqcGVnXCIsaGUpO2NvbnN0IHVlPVt2b2lkIDAsMSwxLDIsNCw4LDEsMSwyLDQsOCw0LDgsNF07Y2xhc3MgY2UgZXh0ZW5kcyByZXtwYXJzZUhlYWRlcigpe3ZhciBlPXRoaXMuY2h1bmsuZ2V0VWludDE2KCk7MTg3NjE9PT1lP3RoaXMubGU9ITA6MTk3ODk9PT1lJiYodGhpcy5sZT0hMSksdGhpcy5jaHVuay5sZT10aGlzLmxlLHRoaXMuaGVhZGVyUGFyc2VkPSEwfXBhcnNlVGFncyhlLHQsaT1uZXcgTWFwKXtsZXR7cGljazpuLHNraXA6c309dGhpcy5vcHRpb25zW3RdO249bmV3IFNldChuKTtsZXQgcj1uLnNpemU+MCxhPTA9PT1zLnNpemUsbz10aGlzLmNodW5rLmdldFVpbnQxNihlKTtlKz0yO2ZvcihsZXQgbD0wO2w8bztsKyspe2xldCBvPXRoaXMuY2h1bmsuZ2V0VWludDE2KGUpO2lmKHIpe2lmKG4uaGFzKG8pJiYoaS5zZXQobyx0aGlzLnBhcnNlVGFnKGUsbyx0KSksbi5kZWxldGUobyksMD09PW4uc2l6ZSkpYnJlYWt9ZWxzZSFhJiZzLmhhcyhvKXx8aS5zZXQobyx0aGlzLnBhcnNlVGFnKGUsbyx0KSk7ZSs9MTJ9cmV0dXJuIGl9cGFyc2VUYWcoZSx0LGkpe2xldHtjaHVuazpufT10aGlzLHM9bi5nZXRVaW50MTYoZSsyKSxyPW4uZ2V0VWludDMyKGUrNCksYT11ZVtzXTtpZihhKnI8PTQ/ZSs9ODplPW4uZ2V0VWludDMyKGUrOCksKHM8MXx8cz4xMykmJmcoYEludmFsaWQgVElGRiB2YWx1ZSB0eXBlLiBibG9jazogJHtpLnRvVXBwZXJDYXNlKCl9LCB0YWc6ICR7dC50b1N0cmluZygxNil9LCB0eXBlOiAke3N9LCBvZmZzZXQgJHtlfWApLGU+bi5ieXRlTGVuZ3RoJiZnKGBJbnZhbGlkIFRJRkYgdmFsdWUgb2Zmc2V0LiBibG9jazogJHtpLnRvVXBwZXJDYXNlKCl9LCB0YWc6ICR7dC50b1N0cmluZygxNil9LCB0eXBlOiAke3N9LCBvZmZzZXQgJHtlfSBpcyBvdXRzaWRlIG9mIGNodW5rIHNpemUgJHtuLmJ5dGVMZW5ndGh9YCksMT09PXMpcmV0dXJuIG4uZ2V0VWludDhBcnJheShlLHIpO2lmKDI9PT1zKXJldHVybiBtKG4uZ2V0U3RyaW5nKGUscikpO2lmKDc9PT1zKXJldHVybiBuLmdldFVpbnQ4QXJyYXkoZSxyKTtpZigxPT09cilyZXR1cm4gdGhpcy5wYXJzZVRhZ1ZhbHVlKHMsZSk7e2xldCB0PW5ldyhmdW5jdGlvbihlKXtzd2l0Y2goZSl7Y2FzZSAxOnJldHVybiBVaW50OEFycmF5O2Nhc2UgMzpyZXR1cm4gVWludDE2QXJyYXk7Y2FzZSA0OnJldHVybiBVaW50MzJBcnJheTtjYXNlIDU6cmV0dXJuIEFycmF5O2Nhc2UgNjpyZXR1cm4gSW50OEFycmF5O2Nhc2UgODpyZXR1cm4gSW50MTZBcnJheTtjYXNlIDk6cmV0dXJuIEludDMyQXJyYXk7Y2FzZSAxMDpyZXR1cm4gQXJyYXk7Y2FzZSAxMTpyZXR1cm4gRmxvYXQzMkFycmF5O2Nhc2UgMTI6cmV0dXJuIEZsb2F0NjRBcnJheTtkZWZhdWx0OnJldHVybiBBcnJheX19KHMpKShyKSxpPWE7Zm9yKGxldCBuPTA7bjxyO24rKyl0W25dPXRoaXMucGFyc2VUYWdWYWx1ZShzLGUpLGUrPWk7cmV0dXJuIHR9fXBhcnNlVGFnVmFsdWUoZSx0KXtsZXR7Y2h1bms6aX09dGhpcztzd2l0Y2goZSl7Y2FzZSAxOnJldHVybiBpLmdldFVpbnQ4KHQpO2Nhc2UgMzpyZXR1cm4gaS5nZXRVaW50MTYodCk7Y2FzZSA0OnJldHVybiBpLmdldFVpbnQzMih0KTtjYXNlIDU6cmV0dXJuIGkuZ2V0VWludDMyKHQpL2kuZ2V0VWludDMyKHQrNCk7Y2FzZSA2OnJldHVybiBpLmdldEludDgodCk7Y2FzZSA4OnJldHVybiBpLmdldEludDE2KHQpO2Nhc2UgOTpyZXR1cm4gaS5nZXRJbnQzMih0KTtjYXNlIDEwOnJldHVybiBpLmdldEludDMyKHQpL2kuZ2V0SW50MzIodCs0KTtjYXNlIDExOnJldHVybiBpLmdldEZsb2F0KHQpO2Nhc2UgMTI6cmV0dXJuIGkuZ2V0RG91YmxlKHQpO2Nhc2UgMTM6cmV0dXJuIGkuZ2V0VWludDMyKHQpO2RlZmF1bHQ6ZyhgSW52YWxpZCB0aWZmIHR5cGUgJHtlfWApfX19Y2xhc3MgZmUgZXh0ZW5kcyBjZXtzdGF0aWMgY2FuSGFuZGxlKGUsdCl7cmV0dXJuIDIyNT09PWUuZ2V0VWludDgodCsxKSYmMTE2NTUxOTIwNj09PWUuZ2V0VWludDMyKHQrNCkmJjA9PT1lLmdldFVpbnQxNih0KzgpfWFzeW5jIHBhcnNlKCl7dGhpcy5wYXJzZUhlYWRlcigpO2xldHtvcHRpb25zOmV9PXRoaXM7cmV0dXJuIGUuaWZkMC5lbmFibGVkJiZhd2FpdCB0aGlzLnBhcnNlSWZkMEJsb2NrKCksZS5leGlmLmVuYWJsZWQmJmF3YWl0IHRoaXMuc2FmZVBhcnNlKFwicGFyc2VFeGlmQmxvY2tcIiksZS5ncHMuZW5hYmxlZCYmYXdhaXQgdGhpcy5zYWZlUGFyc2UoXCJwYXJzZUdwc0Jsb2NrXCIpLGUuaW50ZXJvcC5lbmFibGVkJiZhd2FpdCB0aGlzLnNhZmVQYXJzZShcInBhcnNlSW50ZXJvcEJsb2NrXCIpLGUuaWZkMS5lbmFibGVkJiZhd2FpdCB0aGlzLnNhZmVQYXJzZShcInBhcnNlVGh1bWJuYWlsQmxvY2tcIiksdGhpcy5jcmVhdGVPdXRwdXQoKX1zYWZlUGFyc2UoZSl7bGV0IHQ9dGhpc1tlXSgpO3JldHVybiB2b2lkIDAhPT10LmNhdGNoJiYodD10LmNhdGNoKHRoaXMuaGFuZGxlRXJyb3IpKSx0fWZpbmRJZmQwT2Zmc2V0KCl7dm9pZCAwPT09dGhpcy5pZmQwT2Zmc2V0JiYodGhpcy5pZmQwT2Zmc2V0PXRoaXMuY2h1bmsuZ2V0VWludDMyKDQpKX1maW5kSWZkMU9mZnNldCgpe2lmKHZvaWQgMD09PXRoaXMuaWZkMU9mZnNldCl7dGhpcy5maW5kSWZkME9mZnNldCgpO2xldCBlPXRoaXMuY2h1bmsuZ2V0VWludDE2KHRoaXMuaWZkME9mZnNldCksdD10aGlzLmlmZDBPZmZzZXQrMisxMiplO3RoaXMuaWZkMU9mZnNldD10aGlzLmNodW5rLmdldFVpbnQzMih0KX19cGFyc2VCbG9jayhlLHQpe2xldCBpPW5ldyBNYXA7cmV0dXJuIHRoaXNbdF09aSx0aGlzLnBhcnNlVGFncyhlLHQsaSksaX1hc3luYyBwYXJzZUlmZDBCbG9jaygpe2lmKHRoaXMuaWZkMClyZXR1cm47bGV0e2ZpbGU6ZX09dGhpczt0aGlzLmZpbmRJZmQwT2Zmc2V0KCksdGhpcy5pZmQwT2Zmc2V0PDgmJmcoXCJNYWxmb3JtZWQgRVhJRiBkYXRhXCIpLCFlLmNodW5rZWQmJnRoaXMuaWZkME9mZnNldD5lLmJ5dGVMZW5ndGgmJmcoYElGRDAgb2Zmc2V0IHBvaW50cyB0byBvdXRzaWRlIG9mIGZpbGUuXFxudGhpcy5pZmQwT2Zmc2V0OiAke3RoaXMuaWZkME9mZnNldH0sIGZpbGUuYnl0ZUxlbmd0aDogJHtlLmJ5dGVMZW5ndGh9YCksZS50aWZmJiZhd2FpdCBlLmVuc3VyZUNodW5rKHRoaXMuaWZkME9mZnNldCxTKHRoaXMub3B0aW9ucykpO2xldCB0PXRoaXMucGFyc2VCbG9jayh0aGlzLmlmZDBPZmZzZXQsXCJpZmQwXCIpO3JldHVybiAwIT09dC5zaXplPyh0aGlzLmV4aWZPZmZzZXQ9dC5nZXQoMzQ2NjUpLHRoaXMuaW50ZXJvcE9mZnNldD10LmdldCg0MDk2NSksdGhpcy5ncHNPZmZzZXQ9dC5nZXQoMzQ4NTMpLHRoaXMueG1wPXQuZ2V0KDcwMCksdGhpcy5pcHRjPXQuZ2V0KDMzNzIzKSx0aGlzLmljYz10LmdldCgzNDY3NSksdGhpcy5vcHRpb25zLnNhbml0aXplJiYodC5kZWxldGUoMzQ2NjUpLHQuZGVsZXRlKDQwOTY1KSx0LmRlbGV0ZSgzNDg1MyksdC5kZWxldGUoNzAwKSx0LmRlbGV0ZSgzMzcyMyksdC5kZWxldGUoMzQ2NzUpKSx0KTp2b2lkIDB9YXN5bmMgcGFyc2VFeGlmQmxvY2soKXtpZih0aGlzLmV4aWYpcmV0dXJuO2lmKHRoaXMuaWZkMHx8YXdhaXQgdGhpcy5wYXJzZUlmZDBCbG9jaygpLHZvaWQgMD09PXRoaXMuZXhpZk9mZnNldClyZXR1cm47dGhpcy5maWxlLnRpZmYmJmF3YWl0IHRoaXMuZmlsZS5lbnN1cmVDaHVuayh0aGlzLmV4aWZPZmZzZXQsUyh0aGlzLm9wdGlvbnMpKTtsZXQgZT10aGlzLnBhcnNlQmxvY2sodGhpcy5leGlmT2Zmc2V0LFwiZXhpZlwiKTtyZXR1cm4gdGhpcy5pbnRlcm9wT2Zmc2V0fHwodGhpcy5pbnRlcm9wT2Zmc2V0PWUuZ2V0KDQwOTY1KSksdGhpcy5tYWtlck5vdGU9ZS5nZXQoMzc1MDApLHRoaXMudXNlckNvbW1lbnQ9ZS5nZXQoMzc1MTApLHRoaXMub3B0aW9ucy5zYW5pdGl6ZSYmKGUuZGVsZXRlKDQwOTY1KSxlLmRlbGV0ZSgzNzUwMCksZS5kZWxldGUoMzc1MTApKSx0aGlzLnVucGFjayhlLDQxNzI4KSx0aGlzLnVucGFjayhlLDQxNzI5KSxlfXVucGFjayhlLHQpe2xldCBpPWUuZ2V0KHQpO2kmJjE9PT1pLmxlbmd0aCYmZS5zZXQodCxpWzBdKX1hc3luYyBwYXJzZUdwc0Jsb2NrKCl7aWYodGhpcy5ncHMpcmV0dXJuO2lmKHRoaXMuaWZkMHx8YXdhaXQgdGhpcy5wYXJzZUlmZDBCbG9jaygpLHZvaWQgMD09PXRoaXMuZ3BzT2Zmc2V0KXJldHVybjtsZXQgZT10aGlzLnBhcnNlQmxvY2sodGhpcy5ncHNPZmZzZXQsXCJncHNcIik7cmV0dXJuIGUmJmUuaGFzKDIpJiZlLmhhcyg0KSYmKGUuc2V0KFwibGF0aXR1ZGVcIixkZSguLi5lLmdldCgyKSxlLmdldCgxKSkpLGUuc2V0KFwibG9uZ2l0dWRlXCIsZGUoLi4uZS5nZXQoNCksZS5nZXQoMykpKSksZX1hc3luYyBwYXJzZUludGVyb3BCbG9jaygpe2lmKCF0aGlzLmludGVyb3AmJih0aGlzLmlmZDB8fGF3YWl0IHRoaXMucGFyc2VJZmQwQmxvY2soKSx2b2lkIDAhPT10aGlzLmludGVyb3BPZmZzZXR8fHRoaXMuZXhpZnx8YXdhaXQgdGhpcy5wYXJzZUV4aWZCbG9jaygpLHZvaWQgMCE9PXRoaXMuaW50ZXJvcE9mZnNldCkpcmV0dXJuIHRoaXMucGFyc2VCbG9jayh0aGlzLmludGVyb3BPZmZzZXQsXCJpbnRlcm9wXCIpfWFzeW5jIHBhcnNlVGh1bWJuYWlsQmxvY2soZT0hMSl7aWYoIXRoaXMuaWZkMSYmIXRoaXMuaWZkMVBhcnNlZCYmKCF0aGlzLm9wdGlvbnMubWVyZ2VPdXRwdXR8fGUpKXJldHVybiB0aGlzLmZpbmRJZmQxT2Zmc2V0KCksdGhpcy5pZmQxT2Zmc2V0PjAmJih0aGlzLnBhcnNlQmxvY2sodGhpcy5pZmQxT2Zmc2V0LFwiaWZkMVwiKSx0aGlzLmlmZDFQYXJzZWQ9ITApLHRoaXMuaWZkMX1hc3luYyBleHRyYWN0VGh1bWJuYWlsKCl7aWYodGhpcy5oZWFkZXJQYXJzZWR8fHRoaXMucGFyc2VIZWFkZXIoKSx0aGlzLmlmZDFQYXJzZWR8fGF3YWl0IHRoaXMucGFyc2VUaHVtYm5haWxCbG9jayghMCksdm9pZCAwPT09dGhpcy5pZmQxKXJldHVybjtsZXQgZT10aGlzLmlmZDEuZ2V0KDUxMyksdD10aGlzLmlmZDEuZ2V0KDUxNCk7cmV0dXJuIHRoaXMuY2h1bmsuZ2V0VWludDhBcnJheShlLHQpfWdldCBpbWFnZSgpe3JldHVybiB0aGlzLmlmZDB9Z2V0IHRodW1ibmFpbCgpe3JldHVybiB0aGlzLmlmZDF9Y3JlYXRlT3V0cHV0KCl7bGV0IGUsdCxpLG49e307Zm9yKHQgb2YgSClpZihlPXRoaXNbdF0sIXAoZSkpaWYoaT10aGlzLmNhblRyYW5zbGF0ZT90aGlzLnRyYW5zbGF0ZUJsb2NrKGUsdCk6T2JqZWN0LmZyb21FbnRyaWVzKGUpLHRoaXMub3B0aW9ucy5tZXJnZU91dHB1dCl7aWYoXCJpZmQxXCI9PT10KWNvbnRpbnVlO09iamVjdC5hc3NpZ24obixpKX1lbHNlIG5bdF09aTtyZXR1cm4gdGhpcy5tYWtlck5vdGUmJihuLm1ha2VyTm90ZT10aGlzLm1ha2VyTm90ZSksdGhpcy51c2VyQ29tbWVudCYmKG4udXNlckNvbW1lbnQ9dGhpcy51c2VyQ29tbWVudCksbn1hc3NpZ25Ub091dHB1dChlLHQpe2lmKHRoaXMuZ2xvYmFsT3B0aW9ucy5tZXJnZU91dHB1dClPYmplY3QuYXNzaWduKGUsdCk7ZWxzZSBmb3IobGV0W2ksbl1vZiBPYmplY3QuZW50cmllcyh0KSl0aGlzLmFzc2lnbk9iamVjdFRvT3V0cHV0KGUsaSxuKX19ZnVuY3Rpb24gZGUoZSx0LGksbil7dmFyIHM9ZSt0LzYwK2kvMzYwMDtyZXR1cm5cIlNcIiE9PW4mJlwiV1wiIT09bnx8KHMqPS0xKSxzfWMoZmUsXCJ0eXBlXCIsXCJ0aWZmXCIpLGMoZmUsXCJoZWFkZXJMZW5ndGhcIiwxMCksVC5zZXQoXCJ0aWZmXCIsZmUpO3ZhciBwZT1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxkZWZhdWx0Om5lLEV4aWZyOnRlLGZpbGVQYXJzZXJzOncsc2VnbWVudFBhcnNlcnM6VCxmaWxlUmVhZGVyczpBLHRhZ0tleXM6RSx0YWdWYWx1ZXM6Qix0YWdSZXZpdmVyczpOLGNyZWF0ZURpY3Rpb25hcnk6VSxleHRlbmREaWN0aW9uYXJ5OkYsZmV0Y2hVcmxBc0FycmF5QnVmZmVyOk0scmVhZEJsb2JBc0FycmF5QnVmZmVyOlIsY2h1bmtlZFByb3BzOkcsb3RoZXJTZWdtZW50czpWLHNlZ21lbnRzOnosdGlmZkJsb2NrczpILHNlZ21lbnRzQW5kQmxvY2tzOmosdGlmZkV4dHJhY3RhYmxlczpXLGluaGVyaXRhYmxlczpLLGFsbEZvcm1hdHRlcnM6WCxPcHRpb25zOnEscGFyc2U6aWV9KTtjb25zdCBnZT17aWZkMDohMSxpZmQxOiExLGV4aWY6ITEsZ3BzOiExLGludGVyb3A6ITEsc2FuaXRpemU6ITEscmV2aXZlVmFsdWVzOiEwLHRyYW5zbGF0ZUtleXM6ITEsdHJhbnNsYXRlVmFsdWVzOiExLG1lcmdlT3V0cHV0OiExfSxtZT1PYmplY3QuYXNzaWduKHt9LGdlLHtmaXJzdENodW5rU2l6ZTo0ZTQsZ3BzOlsxLDIsMyw0XX0pO2FzeW5jIGZ1bmN0aW9uIFNlKGUpe2xldCB0PW5ldyB0ZShtZSk7YXdhaXQgdC5yZWFkKGUpO2xldCBpPWF3YWl0IHQucGFyc2UoKTtpZihpJiZpLmdwcyl7bGV0e2xhdGl0dWRlOmUsbG9uZ2l0dWRlOnR9PWkuZ3BzO3JldHVybntsYXRpdHVkZTplLGxvbmdpdHVkZTp0fX19Y29uc3QgQ2U9T2JqZWN0LmFzc2lnbih7fSxnZSx7dGlmZjohMSxpZmQxOiEwLG1lcmdlT3V0cHV0OiExfSk7YXN5bmMgZnVuY3Rpb24geWUoZSl7bGV0IHQ9bmV3IHRlKENlKTthd2FpdCB0LnJlYWQoZSk7bGV0IGk9YXdhaXQgdC5leHRyYWN0VGh1bWJuYWlsKCk7cmV0dXJuIGkmJmE/cy5mcm9tKGkpOml9YXN5bmMgZnVuY3Rpb24gYmUoZSl7bGV0IHQ9YXdhaXQgdGhpcy50aHVtYm5haWwoZSk7aWYodm9pZCAwIT09dCl7bGV0IGU9bmV3IEJsb2IoW3RdKTtyZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChlKX19Y29uc3QgSWU9T2JqZWN0LmFzc2lnbih7fSxnZSx7Zmlyc3RDaHVua1NpemU6NGU0LGlmZDA6WzI3NF19KTthc3luYyBmdW5jdGlvbiBQZShlKXtsZXQgdD1uZXcgdGUoSWUpO2F3YWl0IHQucmVhZChlKTtsZXQgaT1hd2FpdCB0LnBhcnNlKCk7aWYoaSYmaS5pZmQwKXJldHVybiBpLmlmZDBbMjc0XX1jb25zdCBrZT1PYmplY3QuZnJlZXplKHsxOntkaW1lbnNpb25Td2FwcGVkOiExLHNjYWxlWDoxLHNjYWxlWToxLGRlZzowLHJhZDowfSwyOntkaW1lbnNpb25Td2FwcGVkOiExLHNjYWxlWDotMSxzY2FsZVk6MSxkZWc6MCxyYWQ6MH0sMzp7ZGltZW5zaW9uU3dhcHBlZDohMSxzY2FsZVg6MSxzY2FsZVk6MSxkZWc6MTgwLHJhZDoxODAqTWF0aC5QSS8xODB9LDQ6e2RpbWVuc2lvblN3YXBwZWQ6ITEsc2NhbGVYOi0xLHNjYWxlWToxLGRlZzoxODAscmFkOjE4MCpNYXRoLlBJLzE4MH0sNTp7ZGltZW5zaW9uU3dhcHBlZDohMCxzY2FsZVg6MSxzY2FsZVk6LTEsZGVnOjkwLHJhZDo5MCpNYXRoLlBJLzE4MH0sNjp7ZGltZW5zaW9uU3dhcHBlZDohMCxzY2FsZVg6MSxzY2FsZVk6MSxkZWc6OTAscmFkOjkwKk1hdGguUEkvMTgwfSw3OntkaW1lbnNpb25Td2FwcGVkOiEwLHNjYWxlWDoxLHNjYWxlWTotMSxkZWc6MjcwLHJhZDoyNzAqTWF0aC5QSS8xODB9LDg6e2RpbWVuc2lvblN3YXBwZWQ6ITAsc2NhbGVYOjEsc2NhbGVZOjEsZGVnOjI3MCxyYWQ6MjcwKk1hdGguUEkvMTgwfX0pO2xldCB3ZT0hMCxUZT0hMDtpZihcIm9iamVjdFwiPT10eXBlb2YgbmF2aWdhdG9yKXtsZXQgZT1uYXZpZ2F0b3IudXNlckFnZW50O2lmKGUuaW5jbHVkZXMoXCJpUGFkXCIpfHxlLmluY2x1ZGVzKFwiaVBob25lXCIpKXtsZXQgdD1lLm1hdGNoKC9PUyAoXFxkKylfKFxcZCspLyk7aWYodCl7bGV0WyxlLGldPXQsbj1OdW1iZXIoZSkrLjEqTnVtYmVyKGkpO3dlPW48MTMuNCxUZT0hMX19ZWxzZSBpZihlLmluY2x1ZGVzKFwiT1MgWCAxMFwiKSl7bGV0Wyx0XT1lLm1hdGNoKC9PUyBYIDEwW18uXShcXGQrKS8pO3dlPVRlPU51bWJlcih0KTwxNX1pZihlLmluY2x1ZGVzKFwiQ2hyb21lL1wiKSl7bGV0Wyx0XT1lLm1hdGNoKC9DaHJvbWVcXC8oXFxkKykvKTt3ZT1UZT1OdW1iZXIodCk8ODF9ZWxzZSBpZihlLmluY2x1ZGVzKFwiRmlyZWZveC9cIikpe2xldFssdF09ZS5tYXRjaCgvRmlyZWZveFxcLyhcXGQrKS8pO3dlPVRlPU51bWJlcih0KTw3N319YXN5bmMgZnVuY3Rpb24gQWUoZSl7bGV0IHQ9YXdhaXQgUGUoZSk7cmV0dXJuIE9iamVjdC5hc3NpZ24oe2NhbnZhczp3ZSxjc3M6VGV9LGtlW3RdKX1jbGFzcyBEZSBleHRlbmRzIEl7Y29uc3RydWN0b3IoLi4uZSl7c3VwZXIoLi4uZSksYyh0aGlzLFwicmFuZ2VzXCIsbmV3IE9lKSwwIT09dGhpcy5ieXRlTGVuZ3RoJiZ0aGlzLnJhbmdlcy5hZGQoMCx0aGlzLmJ5dGVMZW5ndGgpfV90cnlFeHRlbmQoZSx0LGkpe2lmKDA9PT1lJiYwPT09dGhpcy5ieXRlTGVuZ3RoJiZpKXtsZXQgZT1uZXcgRGF0YVZpZXcoaS5idWZmZXJ8fGksaS5ieXRlT2Zmc2V0LGkuYnl0ZUxlbmd0aCk7dGhpcy5fc3dhcERhdGFWaWV3KGUpfWVsc2V7bGV0IGk9ZSt0O2lmKGk+dGhpcy5ieXRlTGVuZ3RoKXtsZXR7ZGF0YVZpZXc6ZX09dGhpcy5fZXh0ZW5kKGkpO3RoaXMuX3N3YXBEYXRhVmlldyhlKX19fV9leHRlbmQoZSl7bGV0IHQ7dD1hP3MuYWxsb2NVbnNhZmUoZSk6bmV3IFVpbnQ4QXJyYXkoZSk7bGV0IGk9bmV3IERhdGFWaWV3KHQuYnVmZmVyLHQuYnl0ZU9mZnNldCx0LmJ5dGVMZW5ndGgpO3JldHVybiB0LnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcix0aGlzLmJ5dGVPZmZzZXQsdGhpcy5ieXRlTGVuZ3RoKSwwKSx7dWludFZpZXc6dCxkYXRhVmlldzppfX1zdWJhcnJheShlLHQsaT0hMSl7cmV0dXJuIHQ9dHx8dGhpcy5fbGVuZ3RoVG9FbmQoZSksaSYmdGhpcy5fdHJ5RXh0ZW5kKGUsdCksdGhpcy5yYW5nZXMuYWRkKGUsdCksc3VwZXIuc3ViYXJyYXkoZSx0KX1zZXQoZSx0LGk9ITEpe2kmJnRoaXMuX3RyeUV4dGVuZCh0LGUuYnl0ZUxlbmd0aCxlKTtsZXQgbj1zdXBlci5zZXQoZSx0KTtyZXR1cm4gdGhpcy5yYW5nZXMuYWRkKHQsbi5ieXRlTGVuZ3RoKSxufWFzeW5jIGVuc3VyZUNodW5rKGUsdCl7dGhpcy5jaHVua2VkJiYodGhpcy5yYW5nZXMuYXZhaWxhYmxlKGUsdCl8fGF3YWl0IHRoaXMucmVhZENodW5rKGUsdCkpfWF2YWlsYWJsZShlLHQpe3JldHVybiB0aGlzLnJhbmdlcy5hdmFpbGFibGUoZSx0KX19Y2xhc3MgT2V7Y29uc3RydWN0b3IoKXtjKHRoaXMsXCJsaXN0XCIsW10pfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5saXN0Lmxlbmd0aH1hZGQoZSx0LGk9MCl7bGV0IG49ZSt0LHM9dGhpcy5saXN0LmZpbHRlcigodD0+eGUoZSx0Lm9mZnNldCxuKXx8eGUoZSx0LmVuZCxuKSkpO2lmKHMubGVuZ3RoPjApe2U9TWF0aC5taW4oZSwuLi5zLm1hcCgoZT0+ZS5vZmZzZXQpKSksbj1NYXRoLm1heChuLC4uLnMubWFwKChlPT5lLmVuZCkpKSx0PW4tZTtsZXQgaT1zLnNoaWZ0KCk7aS5vZmZzZXQ9ZSxpLmxlbmd0aD10LGkuZW5kPW4sdGhpcy5saXN0PXRoaXMubGlzdC5maWx0ZXIoKGU9PiFzLmluY2x1ZGVzKGUpKSl9ZWxzZSB0aGlzLmxpc3QucHVzaCh7b2Zmc2V0OmUsbGVuZ3RoOnQsZW5kOm59KX1hdmFpbGFibGUoZSx0KXtsZXQgaT1lK3Q7cmV0dXJuIHRoaXMubGlzdC5zb21lKCh0PT50Lm9mZnNldDw9ZSYmaTw9dC5lbmQpKX19ZnVuY3Rpb24geGUoZSx0LGkpe3JldHVybiBlPD10JiZ0PD1pfWNsYXNzIHZlIGV4dGVuZHMgRGV7Y29uc3RydWN0b3IoZSx0KXtzdXBlcigwKSxjKHRoaXMsXCJjaHVua3NSZWFkXCIsMCksdGhpcy5pbnB1dD1lLHRoaXMub3B0aW9ucz10fWFzeW5jIHJlYWRXaG9sZSgpe3RoaXMuY2h1bmtlZD0hMSxhd2FpdCB0aGlzLnJlYWRDaHVuayh0aGlzLm5leHRDaHVua09mZnNldCl9YXN5bmMgcmVhZENodW5rZWQoKXt0aGlzLmNodW5rZWQ9ITAsYXdhaXQgdGhpcy5yZWFkQ2h1bmsoMCx0aGlzLm9wdGlvbnMuZmlyc3RDaHVua1NpemUpfWFzeW5jIHJlYWROZXh0Q2h1bmsoZT10aGlzLm5leHRDaHVua09mZnNldCl7aWYodGhpcy5mdWxseVJlYWQpcmV0dXJuIHRoaXMuY2h1bmtzUmVhZCsrLCExO2xldCB0PXRoaXMub3B0aW9ucy5jaHVua1NpemUsaT1hd2FpdCB0aGlzLnJlYWRDaHVuayhlLHQpO3JldHVybiEhaSYmaS5ieXRlTGVuZ3RoPT09dH1hc3luYyByZWFkQ2h1bmsoZSx0KXtpZih0aGlzLmNodW5rc1JlYWQrKywwIT09KHQ9dGhpcy5zYWZlV3JhcEFkZHJlc3MoZSx0KSkpcmV0dXJuIHRoaXMuX3JlYWRDaHVuayhlLHQpfXNhZmVXcmFwQWRkcmVzcyhlLHQpe3JldHVybiB2b2lkIDAhPT10aGlzLnNpemUmJmUrdD50aGlzLnNpemU/TWF0aC5tYXgoMCx0aGlzLnNpemUtZSk6dH1nZXQgbmV4dENodW5rT2Zmc2V0KCl7aWYoMCE9PXRoaXMucmFuZ2VzLmxpc3QubGVuZ3RoKXJldHVybiB0aGlzLnJhbmdlcy5saXN0WzBdLmxlbmd0aH1nZXQgY2FuUmVhZE5leHRDaHVuaygpe3JldHVybiB0aGlzLmNodW5rc1JlYWQ8dGhpcy5vcHRpb25zLmNodW5rTGltaXR9Z2V0IGZ1bGx5UmVhZCgpe3JldHVybiB2b2lkIDAhPT10aGlzLnNpemUmJnRoaXMubmV4dENodW5rT2Zmc2V0PT09dGhpcy5zaXplfXJlYWQoKXtyZXR1cm4gdGhpcy5vcHRpb25zLmNodW5rZWQ/dGhpcy5yZWFkQ2h1bmtlZCgpOnRoaXMucmVhZFdob2xlKCl9Y2xvc2UoKXt9fUEuc2V0KFwiYmxvYlwiLGNsYXNzIGV4dGVuZHMgdmV7YXN5bmMgcmVhZFdob2xlKCl7dGhpcy5jaHVua2VkPSExO2xldCBlPWF3YWl0IFIodGhpcy5pbnB1dCk7dGhpcy5fc3dhcEFycmF5QnVmZmVyKGUpfXJlYWRDaHVua2VkKCl7cmV0dXJuIHRoaXMuY2h1bmtlZD0hMCx0aGlzLnNpemU9dGhpcy5pbnB1dC5zaXplLHN1cGVyLnJlYWRDaHVua2VkKCl9YXN5bmMgX3JlYWRDaHVuayhlLHQpe2xldCBpPXQ/ZSt0OnZvaWQgMCxuPXRoaXMuaW5wdXQuc2xpY2UoZSxpKSxzPWF3YWl0IFIobik7cmV0dXJuIHRoaXMuc2V0KHMsZSwhMCl9fSk7dmFyIE1lPU9iamVjdC5mcmVlemUoe19fcHJvdG9fXzpudWxsLGRlZmF1bHQ6cGUsRXhpZnI6dGUsZmlsZVBhcnNlcnM6dyxzZWdtZW50UGFyc2VyczpULGZpbGVSZWFkZXJzOkEsdGFnS2V5czpFLHRhZ1ZhbHVlczpCLHRhZ1Jldml2ZXJzOk4sY3JlYXRlRGljdGlvbmFyeTpVLGV4dGVuZERpY3Rpb25hcnk6RixmZXRjaFVybEFzQXJyYXlCdWZmZXI6TSxyZWFkQmxvYkFzQXJyYXlCdWZmZXI6UixjaHVua2VkUHJvcHM6RyxvdGhlclNlZ21lbnRzOlYsc2VnbWVudHM6eix0aWZmQmxvY2tzOkgsc2VnbWVudHNBbmRCbG9ja3M6aix0aWZmRXh0cmFjdGFibGVzOlcsaW5oZXJpdGFibGVzOkssYWxsRm9ybWF0dGVyczpYLE9wdGlvbnM6cSxwYXJzZTppZSxncHNPbmx5T3B0aW9uczptZSxncHM6U2UsdGh1bWJuYWlsT25seU9wdGlvbnM6Q2UsdGh1bWJuYWlsOnllLHRodW1ibmFpbFVybDpiZSxvcmllbnRhdGlvbk9ubHlPcHRpb25zOkllLG9yaWVudGF0aW9uOlBlLHJvdGF0aW9uczprZSxnZXQgcm90YXRlQ2FudmFzKCl7cmV0dXJuIHdlfSxnZXQgcm90YXRlQ3NzKCl7cmV0dXJuIFRlfSxyb3RhdGlvbjpBZX0pO0Euc2V0KFwidXJsXCIsY2xhc3MgZXh0ZW5kcyB2ZXthc3luYyByZWFkV2hvbGUoKXt0aGlzLmNodW5rZWQ9ITE7bGV0IGU9YXdhaXQgTSh0aGlzLmlucHV0KTtlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/dGhpcy5fc3dhcEFycmF5QnVmZmVyKGUpOmUgaW5zdGFuY2VvZiBVaW50OEFycmF5JiZ0aGlzLl9zd2FwQnVmZmVyKGUpfWFzeW5jIF9yZWFkQ2h1bmsoZSx0KXtsZXQgaT10P2UrdC0xOnZvaWQgMCxuPXRoaXMub3B0aW9ucy5odHRwSGVhZGVyc3x8e307KGV8fGkpJiYobi5yYW5nZT1gYnl0ZXM9JHtbZSxpXS5qb2luKFwiLVwiKX1gKTtsZXQgcz1hd2FpdCBoKHRoaXMuaW5wdXQse2hlYWRlcnM6bn0pLHI9YXdhaXQgcy5hcnJheUJ1ZmZlcigpLGE9ci5ieXRlTGVuZ3RoO2lmKDQxNiE9PXMuc3RhdHVzKXJldHVybiBhIT09dCYmKHRoaXMuc2l6ZT1lK2EpLHRoaXMuc2V0KHIsZSwhMCl9fSk7SS5wcm90b3R5cGUuZ2V0VWludDY0PWZ1bmN0aW9uKGUpe2xldCB0PXRoaXMuZ2V0VWludDMyKGUpLGk9dGhpcy5nZXRVaW50MzIoZSs0KTtyZXR1cm4gdDwxMDQ4NTc1P3Q8PDMyfGk6dm9pZCAwIT09dHlwZW9mIHI/KGNvbnNvbGUud2FybihcIlVzaW5nIEJpZ0ludCBiZWNhdXNlIG9mIHR5cGUgNjR1aW50IGJ1dCBKUyBjYW4gb25seSBoYW5kbGUgNTNiIG51bWJlcnMuXCIpLHIodCk8PHIoMzIpfHIoaSkpOnZvaWQgZyhcIlRyeWluZyB0byByZWFkIDY0YiB2YWx1ZSBidXQgSlMgY2FuIG9ubHkgaGFuZGxlIDUzYiBudW1iZXJzLlwiKX07Y2xhc3MgUmUgZXh0ZW5kcyBzZXtwYXJzZUJveGVzKGU9MCl7bGV0IHQ9W107Zm9yKDtlPHRoaXMuZmlsZS5ieXRlTGVuZ3RoLTQ7KXtsZXQgaT10aGlzLnBhcnNlQm94SGVhZChlKTtpZih0LnB1c2goaSksMD09PWkubGVuZ3RoKWJyZWFrO2UrPWkubGVuZ3RofXJldHVybiB0fXBhcnNlU3ViQm94ZXMoZSl7ZS5ib3hlcz10aGlzLnBhcnNlQm94ZXMoZS5zdGFydCl9ZmluZEJveChlLHQpe3JldHVybiB2b2lkIDA9PT1lLmJveGVzJiZ0aGlzLnBhcnNlU3ViQm94ZXMoZSksZS5ib3hlcy5maW5kKChlPT5lLmtpbmQ9PT10KSl9cGFyc2VCb3hIZWFkKGUpe2xldCB0PXRoaXMuZmlsZS5nZXRVaW50MzIoZSksaT10aGlzLmZpbGUuZ2V0U3RyaW5nKGUrNCw0KSxuPWUrODtyZXR1cm4gMT09PXQmJih0PXRoaXMuZmlsZS5nZXRVaW50NjQoZSs4KSxuKz04KSx7b2Zmc2V0OmUsbGVuZ3RoOnQsa2luZDppLHN0YXJ0Om59fXBhcnNlQm94RnVsbEhlYWQoZSl7aWYodm9pZCAwIT09ZS52ZXJzaW9uKXJldHVybjtsZXQgdD10aGlzLmZpbGUuZ2V0VWludDMyKGUuc3RhcnQpO2UudmVyc2lvbj10Pj4yNCxlLnN0YXJ0Kz00fX1jbGFzcyBMZSBleHRlbmRzIFJle3N0YXRpYyBjYW5IYW5kbGUoZSx0KXtpZigwIT09dClyZXR1cm4hMTtsZXQgaT1lLmdldFVpbnQxNigyKTtpZihpPjUwKXJldHVybiExO2xldCBuPTE2LHM9W107Zm9yKDtuPGk7KXMucHVzaChlLmdldFN0cmluZyhuLDQpKSxuKz00O3JldHVybiBzLmluY2x1ZGVzKHRoaXMudHlwZSl9YXN5bmMgcGFyc2UoKXtsZXQgZT10aGlzLmZpbGUuZ2V0VWludDMyKDApLHQ9dGhpcy5wYXJzZUJveEhlYWQoZSk7Zm9yKDtcIm1ldGFcIiE9PXQua2luZDspZSs9dC5sZW5ndGgsYXdhaXQgdGhpcy5maWxlLmVuc3VyZUNodW5rKGUsMTYpLHQ9dGhpcy5wYXJzZUJveEhlYWQoZSk7YXdhaXQgdGhpcy5maWxlLmVuc3VyZUNodW5rKHQub2Zmc2V0LHQubGVuZ3RoKSx0aGlzLnBhcnNlQm94RnVsbEhlYWQodCksdGhpcy5wYXJzZVN1YkJveGVzKHQpLHRoaXMub3B0aW9ucy5pY2MuZW5hYmxlZCYmYXdhaXQgdGhpcy5maW5kSWNjKHQpLHRoaXMub3B0aW9ucy50aWZmLmVuYWJsZWQmJmF3YWl0IHRoaXMuZmluZEV4aWYodCl9YXN5bmMgcmVnaXN0ZXJTZWdtZW50KGUsdCxpKXthd2FpdCB0aGlzLmZpbGUuZW5zdXJlQ2h1bmsodCxpKTtsZXQgbj10aGlzLmZpbGUuc3ViYXJyYXkodCxpKTt0aGlzLmNyZWF0ZVBhcnNlcihlLG4pfWFzeW5jIGZpbmRJY2MoZSl7bGV0IHQ9dGhpcy5maW5kQm94KGUsXCJpcHJwXCIpO2lmKHZvaWQgMD09PXQpcmV0dXJuO2xldCBpPXRoaXMuZmluZEJveCh0LFwiaXBjb1wiKTtpZih2b2lkIDA9PT1pKXJldHVybjtsZXQgbj10aGlzLmZpbmRCb3goaSxcImNvbHJcIik7dm9pZCAwIT09biYmYXdhaXQgdGhpcy5yZWdpc3RlclNlZ21lbnQoXCJpY2NcIixuLm9mZnNldCsxMixuLmxlbmd0aCl9YXN5bmMgZmluZEV4aWYoZSl7bGV0IHQ9dGhpcy5maW5kQm94KGUsXCJpaW5mXCIpO2lmKHZvaWQgMD09PXQpcmV0dXJuO2xldCBpPXRoaXMuZmluZEJveChlLFwiaWxvY1wiKTtpZih2b2lkIDA9PT1pKXJldHVybjtsZXQgbj10aGlzLmZpbmRFeGlmTG9jSWRJbklpbmYodCkscz10aGlzLmZpbmRFeHRlbnRJbklsb2MoaSxuKTtpZih2b2lkIDA9PT1zKXJldHVybjtsZXRbcixhXT1zO2F3YWl0IHRoaXMuZmlsZS5lbnN1cmVDaHVuayhyLGEpO2xldCBvPTQrdGhpcy5maWxlLmdldFVpbnQzMihyKTtyKz1vLGEtPW8sYXdhaXQgdGhpcy5yZWdpc3RlclNlZ21lbnQoXCJ0aWZmXCIscixhKX1maW5kRXhpZkxvY0lkSW5JaW5mKGUpe3RoaXMucGFyc2VCb3hGdWxsSGVhZChlKTtsZXQgdCxpLG4scyxyPWUuc3RhcnQsYT10aGlzLmZpbGUuZ2V0VWludDE2KHIpO2ZvcihyKz0yO2EtLTspe2lmKHQ9dGhpcy5wYXJzZUJveEhlYWQociksdGhpcy5wYXJzZUJveEZ1bGxIZWFkKHQpLGk9dC5zdGFydCx0LnZlcnNpb24+PTImJihuPTM9PT10LnZlcnNpb24/NDoyLHM9dGhpcy5maWxlLmdldFN0cmluZyhpK24rMiw0KSxcIkV4aWZcIj09PXMpKXJldHVybiB0aGlzLmZpbGUuZ2V0VWludEJ5dGVzKGksbik7cis9dC5sZW5ndGh9fWdldDhiaXRzKGUpe2xldCB0PXRoaXMuZmlsZS5nZXRVaW50OChlKTtyZXR1cm5bdD4+NCwxNSZ0XX1maW5kRXh0ZW50SW5JbG9jKGUsdCl7dGhpcy5wYXJzZUJveEZ1bGxIZWFkKGUpO2xldCBpPWUuc3RhcnQsW24sc109dGhpcy5nZXQ4Yml0cyhpKyspLFtyLGFdPXRoaXMuZ2V0OGJpdHMoaSsrKSxvPTI9PT1lLnZlcnNpb24/NDoyLGw9MT09PWUudmVyc2lvbnx8Mj09PWUudmVyc2lvbj8yOjAsaD1hK24rcyx1PTI9PT1lLnZlcnNpb24/NDoyLGM9dGhpcy5maWxlLmdldFVpbnRCeXRlcyhpLHUpO2ZvcihpKz11O2MtLTspe2xldCBlPXRoaXMuZmlsZS5nZXRVaW50Qnl0ZXMoaSxvKTtpKz1vK2wrMityO2xldCB1PXRoaXMuZmlsZS5nZXRVaW50MTYoaSk7aWYoaSs9MixlPT09dClyZXR1cm4gdT4xJiZjb25zb2xlLndhcm4oXCJJTE9DIGJveCBoYXMgbW9yZSB0aGFuIG9uZSBleHRlbnQgYnV0IHdlJ3JlIG9ubHkgcHJvY2Vzc2luZyBvbmVcXG5QbGVhc2UgY3JlYXRlIGFuIGlzc3VlIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9NaWtlS292YXJpay9leGlmciB3aXRoIHRoaXMgZmlsZVwiKSxbdGhpcy5maWxlLmdldFVpbnRCeXRlcyhpK2EsbiksdGhpcy5maWxlLmdldFVpbnRCeXRlcyhpK2ErbixzKV07aSs9dSpofX19Y2xhc3MgVWUgZXh0ZW5kcyBMZXt9YyhVZSxcInR5cGVcIixcImhlaWNcIik7Y2xhc3MgRmUgZXh0ZW5kcyBMZXt9YyhGZSxcInR5cGVcIixcImF2aWZcIiksdy5zZXQoXCJoZWljXCIsVWUpLHcuc2V0KFwiYXZpZlwiLEZlKSxVKEUsW1wiaWZkMFwiLFwiaWZkMVwiXSxbWzI1NixcIkltYWdlV2lkdGhcIl0sWzI1NyxcIkltYWdlSGVpZ2h0XCJdLFsyNTgsXCJCaXRzUGVyU2FtcGxlXCJdLFsyNTksXCJDb21wcmVzc2lvblwiXSxbMjYyLFwiUGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvblwiXSxbMjcwLFwiSW1hZ2VEZXNjcmlwdGlvblwiXSxbMjcxLFwiTWFrZVwiXSxbMjcyLFwiTW9kZWxcIl0sWzI3MyxcIlN0cmlwT2Zmc2V0c1wiXSxbMjc0LFwiT3JpZW50YXRpb25cIl0sWzI3NyxcIlNhbXBsZXNQZXJQaXhlbFwiXSxbMjc4LFwiUm93c1BlclN0cmlwXCJdLFsyNzksXCJTdHJpcEJ5dGVDb3VudHNcIl0sWzI4MixcIlhSZXNvbHV0aW9uXCJdLFsyODMsXCJZUmVzb2x1dGlvblwiXSxbMjg0LFwiUGxhbmFyQ29uZmlndXJhdGlvblwiXSxbMjk2LFwiUmVzb2x1dGlvblVuaXRcIl0sWzMwMSxcIlRyYW5zZmVyRnVuY3Rpb25cIl0sWzMwNSxcIlNvZnR3YXJlXCJdLFszMDYsXCJNb2RpZnlEYXRlXCJdLFszMTUsXCJBcnRpc3RcIl0sWzMxNixcIkhvc3RDb21wdXRlclwiXSxbMzE3LFwiUHJlZGljdG9yXCJdLFszMTgsXCJXaGl0ZVBvaW50XCJdLFszMTksXCJQcmltYXJ5Q2hyb21hdGljaXRpZXNcIl0sWzUxMyxcIlRodW1ibmFpbE9mZnNldFwiXSxbNTE0LFwiVGh1bWJuYWlsTGVuZ3RoXCJdLFs1MjksXCJZQ2JDckNvZWZmaWNpZW50c1wiXSxbNTMwLFwiWUNiQ3JTdWJTYW1wbGluZ1wiXSxbNTMxLFwiWUNiQ3JQb3NpdGlvbmluZ1wiXSxbNTMyLFwiUmVmZXJlbmNlQmxhY2tXaGl0ZVwiXSxbNzAwLFwiQXBwbGljYXRpb25Ob3Rlc1wiXSxbMzM0MzIsXCJDb3B5cmlnaHRcIl0sWzMzNzIzLFwiSVBUQ1wiXSxbMzQ2NjUsXCJFeGlmSUZEXCJdLFszNDY3NSxcIklDQ1wiXSxbMzQ4NTMsXCJHcHNJRkRcIl0sWzMzMCxcIlN1YklGRFwiXSxbNDA5NjUsXCJJbnRlcm9wSUZEXCJdLFs0MDA5MSxcIlhQVGl0bGVcIl0sWzQwMDkyLFwiWFBDb21tZW50XCJdLFs0MDA5MyxcIlhQQXV0aG9yXCJdLFs0MDA5NCxcIlhQS2V5d29yZHNcIl0sWzQwMDk1LFwiWFBTdWJqZWN0XCJdXSksVShFLFwiZXhpZlwiLFtbMzM0MzQsXCJFeHBvc3VyZVRpbWVcIl0sWzMzNDM3LFwiRk51bWJlclwiXSxbMzQ4NTAsXCJFeHBvc3VyZVByb2dyYW1cIl0sWzM0ODUyLFwiU3BlY3RyYWxTZW5zaXRpdml0eVwiXSxbMzQ4NTUsXCJJU09cIl0sWzM0ODU4LFwiVGltZVpvbmVPZmZzZXRcIl0sWzM0ODU5LFwiU2VsZlRpbWVyTW9kZVwiXSxbMzQ4NjQsXCJTZW5zaXRpdml0eVR5cGVcIl0sWzM0ODY1LFwiU3RhbmRhcmRPdXRwdXRTZW5zaXRpdml0eVwiXSxbMzQ4NjYsXCJSZWNvbW1lbmRlZEV4cG9zdXJlSW5kZXhcIl0sWzM0ODY3LFwiSVNPU3BlZWRcIl0sWzM0ODY4LFwiSVNPU3BlZWRMYXRpdHVkZXl5eVwiXSxbMzQ4NjksXCJJU09TcGVlZExhdGl0dWRlenp6XCJdLFszNjg2NCxcIkV4aWZWZXJzaW9uXCJdLFszNjg2NyxcIkRhdGVUaW1lT3JpZ2luYWxcIl0sWzM2ODY4LFwiQ3JlYXRlRGF0ZVwiXSxbMzY4NzMsXCJHb29nbGVQbHVzVXBsb2FkQ29kZVwiXSxbMzY4ODAsXCJPZmZzZXRUaW1lXCJdLFszNjg4MSxcIk9mZnNldFRpbWVPcmlnaW5hbFwiXSxbMzY4ODIsXCJPZmZzZXRUaW1lRGlnaXRpemVkXCJdLFszNzEyMSxcIkNvbXBvbmVudHNDb25maWd1cmF0aW9uXCJdLFszNzEyMixcIkNvbXByZXNzZWRCaXRzUGVyUGl4ZWxcIl0sWzM3Mzc3LFwiU2h1dHRlclNwZWVkVmFsdWVcIl0sWzM3Mzc4LFwiQXBlcnR1cmVWYWx1ZVwiXSxbMzczNzksXCJCcmlnaHRuZXNzVmFsdWVcIl0sWzM3MzgwLFwiRXhwb3N1cmVDb21wZW5zYXRpb25cIl0sWzM3MzgxLFwiTWF4QXBlcnR1cmVWYWx1ZVwiXSxbMzczODIsXCJTdWJqZWN0RGlzdGFuY2VcIl0sWzM3MzgzLFwiTWV0ZXJpbmdNb2RlXCJdLFszNzM4NCxcIkxpZ2h0U291cmNlXCJdLFszNzM4NSxcIkZsYXNoXCJdLFszNzM4NixcIkZvY2FsTGVuZ3RoXCJdLFszNzM5MyxcIkltYWdlTnVtYmVyXCJdLFszNzM5NCxcIlNlY3VyaXR5Q2xhc3NpZmljYXRpb25cIl0sWzM3Mzk1LFwiSW1hZ2VIaXN0b3J5XCJdLFszNzM5NixcIlN1YmplY3RBcmVhXCJdLFszNzUwMCxcIk1ha2VyTm90ZVwiXSxbMzc1MTAsXCJVc2VyQ29tbWVudFwiXSxbMzc1MjAsXCJTdWJTZWNUaW1lXCJdLFszNzUyMSxcIlN1YlNlY1RpbWVPcmlnaW5hbFwiXSxbMzc1MjIsXCJTdWJTZWNUaW1lRGlnaXRpemVkXCJdLFszNzg4OCxcIkFtYmllbnRUZW1wZXJhdHVyZVwiXSxbMzc4ODksXCJIdW1pZGl0eVwiXSxbMzc4OTAsXCJQcmVzc3VyZVwiXSxbMzc4OTEsXCJXYXRlckRlcHRoXCJdLFszNzg5MixcIkFjY2VsZXJhdGlvblwiXSxbMzc4OTMsXCJDYW1lcmFFbGV2YXRpb25BbmdsZVwiXSxbNDA5NjAsXCJGbGFzaHBpeFZlcnNpb25cIl0sWzQwOTYxLFwiQ29sb3JTcGFjZVwiXSxbNDA5NjIsXCJFeGlmSW1hZ2VXaWR0aFwiXSxbNDA5NjMsXCJFeGlmSW1hZ2VIZWlnaHRcIl0sWzQwOTY0LFwiUmVsYXRlZFNvdW5kRmlsZVwiXSxbNDE0ODMsXCJGbGFzaEVuZXJneVwiXSxbNDE0ODYsXCJGb2NhbFBsYW5lWFJlc29sdXRpb25cIl0sWzQxNDg3LFwiRm9jYWxQbGFuZVlSZXNvbHV0aW9uXCJdLFs0MTQ4OCxcIkZvY2FsUGxhbmVSZXNvbHV0aW9uVW5pdFwiXSxbNDE0OTIsXCJTdWJqZWN0TG9jYXRpb25cIl0sWzQxNDkzLFwiRXhwb3N1cmVJbmRleFwiXSxbNDE0OTUsXCJTZW5zaW5nTWV0aG9kXCJdLFs0MTcyOCxcIkZpbGVTb3VyY2VcIl0sWzQxNzI5LFwiU2NlbmVUeXBlXCJdLFs0MTczMCxcIkNGQVBhdHRlcm5cIl0sWzQxOTg1LFwiQ3VzdG9tUmVuZGVyZWRcIl0sWzQxOTg2LFwiRXhwb3N1cmVNb2RlXCJdLFs0MTk4NyxcIldoaXRlQmFsYW5jZVwiXSxbNDE5ODgsXCJEaWdpdGFsWm9vbVJhdGlvXCJdLFs0MTk4OSxcIkZvY2FsTGVuZ3RoSW4zNW1tRm9ybWF0XCJdLFs0MTk5MCxcIlNjZW5lQ2FwdHVyZVR5cGVcIl0sWzQxOTkxLFwiR2FpbkNvbnRyb2xcIl0sWzQxOTkyLFwiQ29udHJhc3RcIl0sWzQxOTkzLFwiU2F0dXJhdGlvblwiXSxbNDE5OTQsXCJTaGFycG5lc3NcIl0sWzQxOTk2LFwiU3ViamVjdERpc3RhbmNlUmFuZ2VcIl0sWzQyMDE2LFwiSW1hZ2VVbmlxdWVJRFwiXSxbNDIwMzIsXCJPd25lck5hbWVcIl0sWzQyMDMzLFwiU2VyaWFsTnVtYmVyXCJdLFs0MjAzNCxcIkxlbnNJbmZvXCJdLFs0MjAzNSxcIkxlbnNNYWtlXCJdLFs0MjAzNixcIkxlbnNNb2RlbFwiXSxbNDIwMzcsXCJMZW5zU2VyaWFsTnVtYmVyXCJdLFs0MjA4MCxcIkNvbXBvc2l0ZUltYWdlXCJdLFs0MjA4MSxcIkNvbXBvc2l0ZUltYWdlQ291bnRcIl0sWzQyMDgyLFwiQ29tcG9zaXRlSW1hZ2VFeHBvc3VyZVRpbWVzXCJdLFs0MjI0MCxcIkdhbW1hXCJdLFs1OTkzMixcIlBhZGRpbmdcIl0sWzU5OTMzLFwiT2Zmc2V0U2NoZW1hXCJdLFs2NWUzLFwiT3duZXJOYW1lXCJdLFs2NTAwMSxcIlNlcmlhbE51bWJlclwiXSxbNjUwMDIsXCJMZW5zXCJdLFs2NTEwMCxcIlJhd0ZpbGVcIl0sWzY1MTAxLFwiQ29udmVydGVyXCJdLFs2NTEwMixcIldoaXRlQmFsYW5jZVwiXSxbNjUxMDUsXCJFeHBvc3VyZVwiXSxbNjUxMDYsXCJTaGFkb3dzXCJdLFs2NTEwNyxcIkJyaWdodG5lc3NcIl0sWzY1MTA4LFwiQ29udHJhc3RcIl0sWzY1MTA5LFwiU2F0dXJhdGlvblwiXSxbNjUxMTAsXCJTaGFycG5lc3NcIl0sWzY1MTExLFwiU21vb3RobmVzc1wiXSxbNjUxMTIsXCJNb2lyZUZpbHRlclwiXSxbNDA5NjUsXCJJbnRlcm9wSUZEXCJdXSksVShFLFwiZ3BzXCIsW1swLFwiR1BTVmVyc2lvbklEXCJdLFsxLFwiR1BTTGF0aXR1ZGVSZWZcIl0sWzIsXCJHUFNMYXRpdHVkZVwiXSxbMyxcIkdQU0xvbmdpdHVkZVJlZlwiXSxbNCxcIkdQU0xvbmdpdHVkZVwiXSxbNSxcIkdQU0FsdGl0dWRlUmVmXCJdLFs2LFwiR1BTQWx0aXR1ZGVcIl0sWzcsXCJHUFNUaW1lU3RhbXBcIl0sWzgsXCJHUFNTYXRlbGxpdGVzXCJdLFs5LFwiR1BTU3RhdHVzXCJdLFsxMCxcIkdQU01lYXN1cmVNb2RlXCJdLFsxMSxcIkdQU0RPUFwiXSxbMTIsXCJHUFNTcGVlZFJlZlwiXSxbMTMsXCJHUFNTcGVlZFwiXSxbMTQsXCJHUFNUcmFja1JlZlwiXSxbMTUsXCJHUFNUcmFja1wiXSxbMTYsXCJHUFNJbWdEaXJlY3Rpb25SZWZcIl0sWzE3LFwiR1BTSW1nRGlyZWN0aW9uXCJdLFsxOCxcIkdQU01hcERhdHVtXCJdLFsxOSxcIkdQU0Rlc3RMYXRpdHVkZVJlZlwiXSxbMjAsXCJHUFNEZXN0TGF0aXR1ZGVcIl0sWzIxLFwiR1BTRGVzdExvbmdpdHVkZVJlZlwiXSxbMjIsXCJHUFNEZXN0TG9uZ2l0dWRlXCJdLFsyMyxcIkdQU0Rlc3RCZWFyaW5nUmVmXCJdLFsyNCxcIkdQU0Rlc3RCZWFyaW5nXCJdLFsyNSxcIkdQU0Rlc3REaXN0YW5jZVJlZlwiXSxbMjYsXCJHUFNEZXN0RGlzdGFuY2VcIl0sWzI3LFwiR1BTUHJvY2Vzc2luZ01ldGhvZFwiXSxbMjgsXCJHUFNBcmVhSW5mb3JtYXRpb25cIl0sWzI5LFwiR1BTRGF0ZVN0YW1wXCJdLFszMCxcIkdQU0RpZmZlcmVudGlhbFwiXSxbMzEsXCJHUFNIUG9zaXRpb25pbmdFcnJvclwiXV0pLFUoQixbXCJpZmQwXCIsXCJpZmQxXCJdLFtbMjc0LHsxOlwiSG9yaXpvbnRhbCAobm9ybWFsKVwiLDI6XCJNaXJyb3IgaG9yaXpvbnRhbFwiLDM6XCJSb3RhdGUgMTgwXCIsNDpcIk1pcnJvciB2ZXJ0aWNhbFwiLDU6XCJNaXJyb3IgaG9yaXpvbnRhbCBhbmQgcm90YXRlIDI3MCBDV1wiLDY6XCJSb3RhdGUgOTAgQ1dcIiw3OlwiTWlycm9yIGhvcml6b250YWwgYW5kIHJvdGF0ZSA5MCBDV1wiLDg6XCJSb3RhdGUgMjcwIENXXCJ9XSxbMjk2LHsxOlwiTm9uZVwiLDI6XCJpbmNoZXNcIiwzOlwiY21cIn1dXSk7bGV0IEVlPVUoQixcImV4aWZcIixbWzM0ODUwLHswOlwiTm90IGRlZmluZWRcIiwxOlwiTWFudWFsXCIsMjpcIk5vcm1hbCBwcm9ncmFtXCIsMzpcIkFwZXJ0dXJlIHByaW9yaXR5XCIsNDpcIlNodXR0ZXIgcHJpb3JpdHlcIiw1OlwiQ3JlYXRpdmUgcHJvZ3JhbVwiLDY6XCJBY3Rpb24gcHJvZ3JhbVwiLDc6XCJQb3J0cmFpdCBtb2RlXCIsODpcIkxhbmRzY2FwZSBtb2RlXCJ9XSxbMzcxMjEsezA6XCItXCIsMTpcIllcIiwyOlwiQ2JcIiwzOlwiQ3JcIiw0OlwiUlwiLDU6XCJHXCIsNjpcIkJcIn1dLFszNzM4Myx7MDpcIlVua25vd25cIiwxOlwiQXZlcmFnZVwiLDI6XCJDZW50ZXJXZWlnaHRlZEF2ZXJhZ2VcIiwzOlwiU3BvdFwiLDQ6XCJNdWx0aVNwb3RcIiw1OlwiUGF0dGVyblwiLDY6XCJQYXJ0aWFsXCIsMjU1OlwiT3RoZXJcIn1dLFszNzM4NCx7MDpcIlVua25vd25cIiwxOlwiRGF5bGlnaHRcIiwyOlwiRmx1b3Jlc2NlbnRcIiwzOlwiVHVuZ3N0ZW4gKGluY2FuZGVzY2VudCBsaWdodClcIiw0OlwiRmxhc2hcIiw5OlwiRmluZSB3ZWF0aGVyXCIsMTA6XCJDbG91ZHkgd2VhdGhlclwiLDExOlwiU2hhZGVcIiwxMjpcIkRheWxpZ2h0IGZsdW9yZXNjZW50IChEIDU3MDAgLSA3MTAwSylcIiwxMzpcIkRheSB3aGl0ZSBmbHVvcmVzY2VudCAoTiA0NjAwIC0gNTQwMEspXCIsMTQ6XCJDb29sIHdoaXRlIGZsdW9yZXNjZW50IChXIDM5MDAgLSA0NTAwSylcIiwxNTpcIldoaXRlIGZsdW9yZXNjZW50IChXVyAzMjAwIC0gMzcwMEspXCIsMTc6XCJTdGFuZGFyZCBsaWdodCBBXCIsMTg6XCJTdGFuZGFyZCBsaWdodCBCXCIsMTk6XCJTdGFuZGFyZCBsaWdodCBDXCIsMjA6XCJENTVcIiwyMTpcIkQ2NVwiLDIyOlwiRDc1XCIsMjM6XCJENTBcIiwyNDpcIklTTyBzdHVkaW8gdHVuZ3N0ZW5cIiwyNTU6XCJPdGhlclwifV0sWzM3Mzg1LHswOlwiRmxhc2ggZGlkIG5vdCBmaXJlXCIsMTpcIkZsYXNoIGZpcmVkXCIsNTpcIlN0cm9iZSByZXR1cm4gbGlnaHQgbm90IGRldGVjdGVkXCIsNzpcIlN0cm9iZSByZXR1cm4gbGlnaHQgZGV0ZWN0ZWRcIiw5OlwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZVwiLDEzOlwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLDE1OlwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmV0dXJuIGxpZ2h0IGRldGVjdGVkXCIsMTY6XCJGbGFzaCBkaWQgbm90IGZpcmUsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZVwiLDI0OlwiRmxhc2ggZGlkIG5vdCBmaXJlLCBhdXRvIG1vZGVcIiwyNTpcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGVcIiwyOTpcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGUsIHJldHVybiBsaWdodCBub3QgZGV0ZWN0ZWRcIiwzMTpcIkZsYXNoIGZpcmVkLCBhdXRvIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZFwiLDMyOlwiTm8gZmxhc2ggZnVuY3Rpb25cIiw2NTpcIkZsYXNoIGZpcmVkLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXCIsNjk6XCJGbGFzaCBmaXJlZCwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLDcxOlwiRmxhc2ggZmlyZWQsIHJlZC1leWUgcmVkdWN0aW9uIG1vZGUsIHJldHVybiBsaWdodCBkZXRlY3RlZFwiLDczOlwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZVwiLDc3OlwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IG5vdCBkZXRlY3RlZFwiLDc5OlwiRmxhc2ggZmlyZWQsIGNvbXB1bHNvcnkgZmxhc2ggbW9kZSwgcmVkLWV5ZSByZWR1Y3Rpb24gbW9kZSwgcmV0dXJuIGxpZ2h0IGRldGVjdGVkXCIsODk6XCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXCIsOTM6XCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlLCByZXR1cm4gbGlnaHQgbm90IGRldGVjdGVkLCByZWQtZXllIHJlZHVjdGlvbiBtb2RlXCIsOTU6XCJGbGFzaCBmaXJlZCwgYXV0byBtb2RlLCByZXR1cm4gbGlnaHQgZGV0ZWN0ZWQsIHJlZC1leWUgcmVkdWN0aW9uIG1vZGVcIn1dLFs0MTQ5NSx7MTpcIk5vdCBkZWZpbmVkXCIsMjpcIk9uZS1jaGlwIGNvbG9yIGFyZWEgc2Vuc29yXCIsMzpcIlR3by1jaGlwIGNvbG9yIGFyZWEgc2Vuc29yXCIsNDpcIlRocmVlLWNoaXAgY29sb3IgYXJlYSBzZW5zb3JcIiw1OlwiQ29sb3Igc2VxdWVudGlhbCBhcmVhIHNlbnNvclwiLDc6XCJUcmlsaW5lYXIgc2Vuc29yXCIsODpcIkNvbG9yIHNlcXVlbnRpYWwgbGluZWFyIHNlbnNvclwifV0sWzQxNzI4LHsxOlwiRmlsbSBTY2FubmVyXCIsMjpcIlJlZmxlY3Rpb24gUHJpbnQgU2Nhbm5lclwiLDM6XCJEaWdpdGFsIENhbWVyYVwifV0sWzQxNzI5LHsxOlwiRGlyZWN0bHkgcGhvdG9ncmFwaGVkXCJ9XSxbNDE5ODUsezA6XCJOb3JtYWxcIiwxOlwiQ3VzdG9tXCIsMjpcIkhEUiAobm8gb3JpZ2luYWwgc2F2ZWQpXCIsMzpcIkhEUiAob3JpZ2luYWwgc2F2ZWQpXCIsNDpcIk9yaWdpbmFsIChmb3IgSERSKVwiLDY6XCJQYW5vcmFtYVwiLDc6XCJQb3J0cmFpdCBIRFJcIiw4OlwiUG9ydHJhaXRcIn1dLFs0MTk4Nix7MDpcIkF1dG9cIiwxOlwiTWFudWFsXCIsMjpcIkF1dG8gYnJhY2tldFwifV0sWzQxOTg3LHswOlwiQXV0b1wiLDE6XCJNYW51YWxcIn1dLFs0MTk5MCx7MDpcIlN0YW5kYXJkXCIsMTpcIkxhbmRzY2FwZVwiLDI6XCJQb3J0cmFpdFwiLDM6XCJOaWdodFwiLDQ6XCJPdGhlclwifV0sWzQxOTkxLHswOlwiTm9uZVwiLDE6XCJMb3cgZ2FpbiB1cFwiLDI6XCJIaWdoIGdhaW4gdXBcIiwzOlwiTG93IGdhaW4gZG93blwiLDQ6XCJIaWdoIGdhaW4gZG93blwifV0sWzQxOTk2LHswOlwiVW5rbm93blwiLDE6XCJNYWNyb1wiLDI6XCJDbG9zZVwiLDM6XCJEaXN0YW50XCJ9XSxbNDIwODAsezA6XCJVbmtub3duXCIsMTpcIk5vdCBhIENvbXBvc2l0ZSBJbWFnZVwiLDI6XCJHZW5lcmFsIENvbXBvc2l0ZSBJbWFnZVwiLDM6XCJDb21wb3NpdGUgSW1hZ2UgQ2FwdHVyZWQgV2hpbGUgU2hvb3RpbmdcIn1dXSk7Y29uc3QgQmU9ezE6XCJObyBhYnNvbHV0ZSB1bml0IG9mIG1lYXN1cmVtZW50XCIsMjpcIkluY2hcIiwzOlwiQ2VudGltZXRlclwifTtFZS5zZXQoMzczOTIsQmUpLEVlLnNldCg0MTQ4OCxCZSk7Y29uc3QgTmU9ezA6XCJOb3JtYWxcIiwxOlwiTG93XCIsMjpcIkhpZ2hcIn07ZnVuY3Rpb24gR2UoZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGUmJnZvaWQgMCE9PWUubGVuZ3RoP2VbMF06ZX1mdW5jdGlvbiBWZShlKXtsZXQgdD1BcnJheS5mcm9tKGUpLnNsaWNlKDEpO3JldHVybiB0WzFdPjE1JiYodD10Lm1hcCgoZT0+U3RyaW5nLmZyb21DaGFyQ29kZShlKSkpKSxcIjBcIiE9PXRbMl0mJjAhPT10WzJdfHx0LnBvcCgpLHQuam9pbihcIi5cIil9ZnVuY3Rpb24gemUoZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGUpe3Zhclt0LGksbixzLHIsYV09ZS50cmltKCkuc3BsaXQoL1stOiBdL2cpLm1hcChOdW1iZXIpLG89bmV3IERhdGUodCxpLTEsbik7cmV0dXJuIE51bWJlci5pc05hTihzKXx8TnVtYmVyLmlzTmFOKHIpfHxOdW1iZXIuaXNOYU4oYSl8fChvLnNldEhvdXJzKHMpLG8uc2V0TWludXRlcyhyKSxvLnNldFNlY29uZHMoYSkpLE51bWJlci5pc05hTigrbyk/ZTpvfX1mdW5jdGlvbiBIZShlKXtpZihcInN0cmluZ1wiPT10eXBlb2YgZSlyZXR1cm4gZTtsZXQgdD1bXTtpZigwPT09ZVsxXSYmMD09PWVbZS5sZW5ndGgtMV0pZm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKz0yKXQucHVzaChqZShlW2krMV0sZVtpXSkpO2Vsc2UgZm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKz0yKXQucHVzaChqZShlW2ldLGVbaSsxXSkpO3JldHVybiBtKFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLnQpKX1mdW5jdGlvbiBqZShlLHQpe3JldHVybiBlPDw4fHR9RWUuc2V0KDQxOTkyLE5lKSxFZS5zZXQoNDE5OTMsTmUpLEVlLnNldCg0MTk5NCxOZSksVShOLFtcImlmZDBcIixcImlmZDFcIl0sW1s1MDgyNyxmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgZT9iKGUpOmV9XSxbMzA2LHplXSxbNDAwOTEsSGVdLFs0MDA5MixIZV0sWzQwMDkzLEhlXSxbNDAwOTQsSGVdLFs0MDA5NSxIZV1dKSxVKE4sXCJleGlmXCIsW1s0MDk2MCxWZV0sWzM2ODY0LFZlXSxbMzY4NjcsemVdLFszNjg2OCx6ZV0sWzQwOTYyLEdlXSxbNDA5NjMsR2VdXSksVShOLFwiZ3BzXCIsW1swLGU9PkFycmF5LmZyb20oZSkuam9pbihcIi5cIildLFs3LGU9PkFycmF5LmZyb20oZSkuam9pbihcIjpcIildXSk7Y2xhc3MgV2UgZXh0ZW5kcyByZXtzdGF0aWMgY2FuSGFuZGxlKGUsdCl7cmV0dXJuIDIyNT09PWUuZ2V0VWludDgodCsxKSYmMTc1MjQ2MjQ0OD09PWUuZ2V0VWludDMyKHQrNCkmJlwiaHR0cDovL25zLmFkb2JlLmNvbS9cIj09PWUuZ2V0U3RyaW5nKHQrNCxcImh0dHA6Ly9ucy5hZG9iZS5jb20vXCIubGVuZ3RoKX1zdGF0aWMgaGVhZGVyTGVuZ3RoKGUsdCl7cmV0dXJuXCJodHRwOi8vbnMuYWRvYmUuY29tL3htcC9leHRlbnNpb24vXCI9PT1lLmdldFN0cmluZyh0KzQsXCJodHRwOi8vbnMuYWRvYmUuY29tL3htcC9leHRlbnNpb24vXCIubGVuZ3RoKT83OTo0K1wiaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL1wiLmxlbmd0aCsxfXN0YXRpYyBmaW5kUG9zaXRpb24oZSx0KXtsZXQgaT1zdXBlci5maW5kUG9zaXRpb24oZSx0KTtyZXR1cm4gaS5tdWx0aVNlZ21lbnQ9aS5leHRlbmRlZD03OT09PWkuaGVhZGVyTGVuZ3RoLGkubXVsdGlTZWdtZW50PyhpLmNodW5rQ291bnQ9ZS5nZXRVaW50OCh0KzcyKSxpLmNodW5rTnVtYmVyPWUuZ2V0VWludDgodCs3NiksMCE9PWUuZ2V0VWludDgodCs3NykmJmkuY2h1bmtOdW1iZXIrKyk6KGkuY2h1bmtDb3VudD0xLzAsaS5jaHVua051bWJlcj0tMSksaX1zdGF0aWMgaGFuZGxlTXVsdGlTZWdtZW50cyhlKXtyZXR1cm4gZS5tYXAoKGU9PmUuY2h1bmsuZ2V0U3RyaW5nKCkpKS5qb2luKFwiXCIpfW5vcm1hbGl6ZUlucHV0KGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2U6SS5mcm9tKGUpLmdldFN0cmluZygpfXBhcnNlKGU9dGhpcy5jaHVuayl7aWYoIXRoaXMubG9jYWxPcHRpb25zLnBhcnNlKXJldHVybiBlO2U9ZnVuY3Rpb24oZSl7bGV0IHQ9e30saT17fTtmb3IobGV0IGUgb2YgWmUpdFtlXT1bXSxpW2VdPTA7cmV0dXJuIGUucmVwbGFjZShldCwoKGUsbixzKT0+e2lmKFwiPFwiPT09bil7bGV0IG49KytpW3NdO3JldHVybiB0W3NdLnB1c2gobiksYCR7ZX0jJHtufWB9cmV0dXJuYCR7ZX0jJHt0W3NdLnBvcCgpfWB9KSl9KGUpO2xldCB0PVhlLmZpbmRBbGwoZSxcInJkZlwiLFwiRGVzY3JpcHRpb25cIik7MD09PXQubGVuZ3RoJiZ0LnB1c2gobmV3IFhlKFwicmRmXCIsXCJEZXNjcmlwdGlvblwiLHZvaWQgMCxlKSk7bGV0IGksbj17fTtmb3IobGV0IGUgb2YgdClmb3IobGV0IHQgb2YgZS5wcm9wZXJ0aWVzKWk9SmUodC5ucyxuKSxfZSh0LGkpO3JldHVybiBmdW5jdGlvbihlKXtsZXQgdDtmb3IobGV0IGkgaW4gZSl0PWVbaV09ZihlW2ldKSx2b2lkIDA9PT10JiZkZWxldGUgZVtpXTtyZXR1cm4gZihlKX0obil9YXNzaWduVG9PdXRwdXQoZSx0KXtpZih0aGlzLmxvY2FsT3B0aW9ucy5wYXJzZSlmb3IobGV0W2ksbl1vZiBPYmplY3QuZW50cmllcyh0KSlzd2l0Y2goaSl7Y2FzZVwidGlmZlwiOnRoaXMuYXNzaWduT2JqZWN0VG9PdXRwdXQoZSxcImlmZDBcIixuKTticmVhaztjYXNlXCJleGlmXCI6dGhpcy5hc3NpZ25PYmplY3RUb091dHB1dChlLFwiZXhpZlwiLG4pO2JyZWFrO2Nhc2VcInhtbG5zXCI6YnJlYWs7ZGVmYXVsdDp0aGlzLmFzc2lnbk9iamVjdFRvT3V0cHV0KGUsaSxuKX1lbHNlIGUueG1wPXR9fWMoV2UsXCJ0eXBlXCIsXCJ4bXBcIiksYyhXZSxcIm11bHRpU2VnbWVudFwiLCEwKSxULnNldChcInhtcFwiLFdlKTtjbGFzcyBLZXtzdGF0aWMgZmluZEFsbChlKXtyZXR1cm4gcWUoZSwvKFthLXpBLVowLTktXSspOihbYS16QS1aMC05LV0rKT0oXCJbXlwiXSpcInwnW14nXSonKS9nbSkubWFwKEtlLnVucGFja01hdGNoKX1zdGF0aWMgdW5wYWNrTWF0Y2goZSl7bGV0IHQ9ZVsxXSxpPWVbMl0sbj1lWzNdLnNsaWNlKDEsLTEpO3JldHVybiBuPVFlKG4pLG5ldyBLZSh0LGksbil9Y29uc3RydWN0b3IoZSx0LGkpe3RoaXMubnM9ZSx0aGlzLm5hbWU9dCx0aGlzLnZhbHVlPWl9c2VyaWFsaXplKCl7cmV0dXJuIHRoaXMudmFsdWV9fWNsYXNzIFhle3N0YXRpYyBmaW5kQWxsKGUsdCxpKXtpZih2b2lkIDAhPT10fHx2b2lkIDAhPT1pKXt0PXR8fFwiW1xcXFx3XFxcXGQtXStcIixpPWl8fFwiW1xcXFx3XFxcXGQtXStcIjt2YXIgbj1uZXcgUmVnRXhwKGA8KCR7dH0pOigke2l9KSgjXFxcXGQrKT8oKFxcXFxzKz9bXFxcXHdcXFxcZC06XSs9KFwiW15cIl0qXCJ8J1teJ10qJykpKlxcXFxzKikoXFxcXC8+fD4oW1xcXFxzXFxcXFNdKj8pPFxcXFwvXFxcXDE6XFxcXDJcXFxcMz4pYCxcImdtXCIpfWVsc2Ugbj0vPChbXFx3XFxkLV0rKTooW1xcd1xcZC1dKykoI1xcZCspPygoXFxzKz9bXFx3XFxkLTpdKz0oXCJbXlwiXSpcInwnW14nXSonKSkqXFxzKikoXFwvPnw+KFtcXHNcXFNdKj8pPFxcL1xcMTpcXDJcXDM+KS9nbTtyZXR1cm4gcWUoZSxuKS5tYXAoWGUudW5wYWNrTWF0Y2gpfXN0YXRpYyB1bnBhY2tNYXRjaChlKXtsZXQgdD1lWzFdLGk9ZVsyXSxuPWVbNF0scz1lWzhdO3JldHVybiBuZXcgWGUodCxpLG4scyl9Y29uc3RydWN0b3IoZSx0LGksbil7dGhpcy5ucz1lLHRoaXMubmFtZT10LHRoaXMuYXR0clN0cmluZz1pLHRoaXMuaW5uZXJYbWw9bix0aGlzLmF0dHJzPUtlLmZpbmRBbGwoaSksdGhpcy5jaGlsZHJlbj1YZS5maW5kQWxsKG4pLHRoaXMudmFsdWU9MD09PXRoaXMuY2hpbGRyZW4ubGVuZ3RoP1FlKG4pOnZvaWQgMCx0aGlzLnByb3BlcnRpZXM9Wy4uLnRoaXMuYXR0cnMsLi4udGhpcy5jaGlsZHJlbl19Z2V0IGlzUHJpbWl0aXZlKCl7cmV0dXJuIHZvaWQgMCE9PXRoaXMudmFsdWUmJjA9PT10aGlzLmF0dHJzLmxlbmd0aCYmMD09PXRoaXMuY2hpbGRyZW4ubGVuZ3RofWdldCBpc0xpc3RDb250YWluZXIoKXtyZXR1cm4gMT09PXRoaXMuY2hpbGRyZW4ubGVuZ3RoJiZ0aGlzLmNoaWxkcmVuWzBdLmlzTGlzdH1nZXQgaXNMaXN0KCl7bGV0e25zOmUsbmFtZTp0fT10aGlzO3JldHVyblwicmRmXCI9PT1lJiYoXCJTZXFcIj09PXR8fFwiQmFnXCI9PT10fHxcIkFsdFwiPT09dCl9Z2V0IGlzTGlzdEl0ZW0oKXtyZXR1cm5cInJkZlwiPT09dGhpcy5ucyYmXCJsaVwiPT09dGhpcy5uYW1lfXNlcmlhbGl6ZSgpe2lmKDA9PT10aGlzLnByb3BlcnRpZXMubGVuZ3RoJiZ2b2lkIDA9PT10aGlzLnZhbHVlKXJldHVybjtpZih0aGlzLmlzUHJpbWl0aXZlKXJldHVybiB0aGlzLnZhbHVlO2lmKHRoaXMuaXNMaXN0Q29udGFpbmVyKXJldHVybiB0aGlzLmNoaWxkcmVuWzBdLnNlcmlhbGl6ZSgpO2lmKHRoaXMuaXNMaXN0KXJldHVybiAkZSh0aGlzLmNoaWxkcmVuLm1hcChZZSkpO2lmKHRoaXMuaXNMaXN0SXRlbSYmMT09PXRoaXMuY2hpbGRyZW4ubGVuZ3RoJiYwPT09dGhpcy5hdHRycy5sZW5ndGgpcmV0dXJuIHRoaXMuY2hpbGRyZW5bMF0uc2VyaWFsaXplKCk7bGV0IGU9e307Zm9yKGxldCB0IG9mIHRoaXMucHJvcGVydGllcylfZSh0LGUpO3JldHVybiB2b2lkIDAhPT10aGlzLnZhbHVlJiYoZS52YWx1ZT10aGlzLnZhbHVlKSxmKGUpfX1mdW5jdGlvbiBfZShlLHQpe2xldCBpPWUuc2VyaWFsaXplKCk7dm9pZCAwIT09aSYmKHRbZS5uYW1lXT1pKX12YXIgWWU9ZT0+ZS5zZXJpYWxpemUoKSwkZT1lPT4xPT09ZS5sZW5ndGg/ZVswXTplLEplPShlLHQpPT50W2VdP3RbZV06dFtlXT17fTtmdW5jdGlvbiBxZShlLHQpe2xldCBpLG49W107aWYoIWUpcmV0dXJuIG47Zm9yKDtudWxsIT09KGk9dC5leGVjKGUpKTspbi5wdXNoKGkpO3JldHVybiBufWZ1bmN0aW9uIFFlKGUpe2lmKGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lfHxcIm51bGxcIj09PWV8fFwidW5kZWZpbmVkXCI9PT1lfHxcIlwiPT09ZXx8XCJcIj09PWUudHJpbSgpfShlKSlyZXR1cm47bGV0IHQ9TnVtYmVyKGUpO2lmKCFOdW1iZXIuaXNOYU4odCkpcmV0dXJuIHQ7bGV0IGk9ZS50b0xvd2VyQ2FzZSgpO3JldHVyblwidHJ1ZVwiPT09aXx8XCJmYWxzZVwiIT09aSYmZS50cmltKCl9Y29uc3QgWmU9W1wicmRmOmxpXCIsXCJyZGY6U2VxXCIsXCJyZGY6QmFnXCIsXCJyZGY6QWx0XCIsXCJyZGY6RGVzY3JpcHRpb25cIl0sZXQ9bmV3IFJlZ0V4cChgKDx8XFxcXC8pKCR7WmUuam9pbihcInxcIil9KWAsXCJnXCIpO3ZhciB0dD1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxkZWZhdWx0Ok1lLEV4aWZyOnRlLGZpbGVQYXJzZXJzOncsc2VnbWVudFBhcnNlcnM6VCxmaWxlUmVhZGVyczpBLHRhZ0tleXM6RSx0YWdWYWx1ZXM6Qix0YWdSZXZpdmVyczpOLGNyZWF0ZURpY3Rpb25hcnk6VSxleHRlbmREaWN0aW9uYXJ5OkYsZmV0Y2hVcmxBc0FycmF5QnVmZmVyOk0scmVhZEJsb2JBc0FycmF5QnVmZmVyOlIsY2h1bmtlZFByb3BzOkcsb3RoZXJTZWdtZW50czpWLHNlZ21lbnRzOnosdGlmZkJsb2NrczpILHNlZ21lbnRzQW5kQmxvY2tzOmosdGlmZkV4dHJhY3RhYmxlczpXLGluaGVyaXRhYmxlczpLLGFsbEZvcm1hdHRlcnM6WCxPcHRpb25zOnEscGFyc2U6aWUsZ3BzT25seU9wdGlvbnM6bWUsZ3BzOlNlLHRodW1ibmFpbE9ubHlPcHRpb25zOkNlLHRodW1ibmFpbDp5ZSx0aHVtYm5haWxVcmw6YmUsb3JpZW50YXRpb25Pbmx5T3B0aW9uczpJZSxvcmllbnRhdGlvbjpQZSxyb3RhdGlvbnM6a2UsZ2V0IHJvdGF0ZUNhbnZhcygpe3JldHVybiB3ZX0sZ2V0IHJvdGF0ZUNzcygpe3JldHVybiBUZX0scm90YXRpb246QWV9KTtjb25zdCBpdD1bXCJ4bXBcIixcImljY1wiLFwiaXB0Y1wiLFwidGlmZlwiXSxudD0oKT0+e307YXN5bmMgZnVuY3Rpb24gc3QoZSx0LGkpe2xldCBuPW5ldyBxKHQpO24uY2h1bmtlZD0hMSx2b2lkIDA9PT1pJiZcInN0cmluZ1wiPT10eXBlb2YgZSYmKGk9ZnVuY3Rpb24oZSl7bGV0IHQ9ZS50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiLlwiKS5wb3AoKTtpZihmdW5jdGlvbihlKXtyZXR1cm5cImV4aWZcIj09PWV8fFwidGlmZlwiPT09ZXx8XCJ0aWZcIj09PWV9KHQpKXJldHVyblwidGlmZlwiO2lmKGl0LmluY2x1ZGVzKHQpKXJldHVybiB0fShlKSk7bGV0IHM9YXdhaXQgRChlLG4pO2lmKGkpe2lmKGl0LmluY2x1ZGVzKGkpKXJldHVybiBydChpLHMsbik7ZyhcIkludmFsaWQgc2VnbWVudCB0eXBlXCIpfWVsc2V7aWYoZnVuY3Rpb24oZSl7bGV0IHQ9ZS5nZXRTdHJpbmcoMCw1MCkudHJpbSgpO3JldHVybiB0LmluY2x1ZGVzKFwiPD94cGFja2V0XCIpfHx0LmluY2x1ZGVzKFwiPHg6XCIpfShzKSlyZXR1cm4gcnQoXCJ4bXBcIixzLG4pO2ZvcihsZXRbZV1vZiBUKXtpZighaXQuaW5jbHVkZXMoZSkpY29udGludWU7bGV0IHQ9YXdhaXQgcnQoZSxzLG4pLmNhdGNoKG50KTtpZih0KXJldHVybiB0fWcoXCJVbmtub3duIGZpbGUgZm9ybWF0XCIpfX1hc3luYyBmdW5jdGlvbiBydChlLHQsaSl7bGV0IG49aVtlXTtyZXR1cm4gbi5lbmFibGVkPSEwLG4ucGFyc2U9ITAsVC5nZXQoZSkucGFyc2UodCxuKX1sZXQgYXQ9bChcImZzXCIsKGU9PmUucHJvbWlzZXMpKTtBLnNldChcImZzXCIsY2xhc3MgZXh0ZW5kcyB2ZXthc3luYyByZWFkV2hvbGUoKXt0aGlzLmNodW5rZWQ9ITEsdGhpcy5mcz1hd2FpdCBhdDtsZXQgZT1hd2FpdCB0aGlzLmZzLnJlYWRGaWxlKHRoaXMuaW5wdXQpO3RoaXMuX3N3YXBCdWZmZXIoZSl9YXN5bmMgcmVhZENodW5rZWQoKXt0aGlzLmNodW5rZWQ9ITAsdGhpcy5mcz1hd2FpdCBhdCxhd2FpdCB0aGlzLm9wZW4oKSxhd2FpdCB0aGlzLnJlYWRDaHVuaygwLHRoaXMub3B0aW9ucy5maXJzdENodW5rU2l6ZSl9YXN5bmMgb3Blbigpe3ZvaWQgMD09PXRoaXMuZmgmJih0aGlzLmZoPWF3YWl0IHRoaXMuZnMub3Blbih0aGlzLmlucHV0LFwiclwiKSx0aGlzLnNpemU9KGF3YWl0IHRoaXMuZmguc3RhdCh0aGlzLmlucHV0KSkuc2l6ZSl9YXN5bmMgX3JlYWRDaHVuayhlLHQpe3ZvaWQgMD09PXRoaXMuZmgmJmF3YWl0IHRoaXMub3BlbigpLGUrdD50aGlzLnNpemUmJih0PXRoaXMuc2l6ZS1lKTt2YXIgaT10aGlzLnN1YmFycmF5KGUsdCwhMCk7cmV0dXJuIGF3YWl0IHRoaXMuZmgucmVhZChpLmRhdGFWaWV3LDAsdCxlKSxpfWFzeW5jIGNsb3NlKCl7aWYodGhpcy5maCl7bGV0IGU9dGhpcy5maDt0aGlzLmZoPXZvaWQgMCxhd2FpdCBlLmNsb3NlKCl9fX0pO0Euc2V0KFwiYmFzZTY0XCIsY2xhc3MgZXh0ZW5kcyB2ZXtjb25zdHJ1Y3RvciguLi5lKXtzdXBlciguLi5lKSx0aGlzLmlucHV0PXRoaXMuaW5wdXQucmVwbGFjZSgvXmRhdGE6KFteO10rKTtiYXNlNjQsL2dpbSxcIlwiKSx0aGlzLnNpemU9dGhpcy5pbnB1dC5sZW5ndGgvNCozLHRoaXMuaW5wdXQuZW5kc1dpdGgoXCI9PVwiKT90aGlzLnNpemUtPTI6dGhpcy5pbnB1dC5lbmRzV2l0aChcIj1cIikmJih0aGlzLnNpemUtPTEpfWFzeW5jIF9yZWFkQ2h1bmsoZSx0KXtsZXQgaSxuLHI9dGhpcy5pbnB1dDt2b2lkIDA9PT1lPyhlPTAsaT0wLG49MCk6KGk9NCpNYXRoLmZsb29yKGUvMyksbj1lLWkvNCozKSx2b2lkIDA9PT10JiYodD10aGlzLnNpemUpO2xldCBvPWUrdCxsPWkrNCpNYXRoLmNlaWwoby8zKTtyPXIuc2xpY2UoaSxsKTtsZXQgaD1NYXRoLm1pbih0LHRoaXMuc2l6ZS1lKTtpZihhKXtsZXQgdD1zLmZyb20ocixcImJhc2U2NFwiKS5zbGljZShuLG4raCk7cmV0dXJuIHRoaXMuc2V0KHQsZSwhMCl9e2xldCB0PXRoaXMuc3ViYXJyYXkoZSxoLCEwKSxpPWF0b2Iocikscz10LnRvVWludDgoKTtmb3IobGV0IGU9MDtlPGg7ZSsrKXNbZV09aS5jaGFyQ29kZUF0KG4rZSk7cmV0dXJuIHR9fX0pO2NsYXNzIG90IGV4dGVuZHMgc2V7c3RhdGljIGNhbkhhbmRsZShlLHQpe3JldHVybiAxODc2MT09PXR8fDE5Nzg5PT09dH1leHRlbmRPcHRpb25zKGUpe2xldHtpZmQwOnQseG1wOmksaXB0YzpuLGljYzpzfT1lO2kuZW5hYmxlZCYmdC5kZXBzLmFkZCg3MDApLG4uZW5hYmxlZCYmdC5kZXBzLmFkZCgzMzcyMykscy5lbmFibGVkJiZ0LmRlcHMuYWRkKDM0Njc1KSx0LmZpbmFsaXplRmlsdGVycygpfWFzeW5jIHBhcnNlKCl7bGV0e3RpZmY6ZSx4bXA6dCxpcHRjOmksaWNjOm59PXRoaXMub3B0aW9ucztpZihlLmVuYWJsZWR8fHQuZW5hYmxlZHx8aS5lbmFibGVkfHxuLmVuYWJsZWQpe2xldCBlPU1hdGgubWF4KFModGhpcy5vcHRpb25zKSx0aGlzLm9wdGlvbnMuY2h1bmtTaXplKTthd2FpdCB0aGlzLmZpbGUuZW5zdXJlQ2h1bmsoMCxlKSx0aGlzLmNyZWF0ZVBhcnNlcihcInRpZmZcIix0aGlzLmZpbGUpLHRoaXMucGFyc2Vycy50aWZmLnBhcnNlSGVhZGVyKCksYXdhaXQgdGhpcy5wYXJzZXJzLnRpZmYucGFyc2VJZmQwQmxvY2soKSx0aGlzLmFkYXB0VGlmZlByb3BBc1NlZ21lbnQoXCJ4bXBcIiksdGhpcy5hZGFwdFRpZmZQcm9wQXNTZWdtZW50KFwiaXB0Y1wiKSx0aGlzLmFkYXB0VGlmZlByb3BBc1NlZ21lbnQoXCJpY2NcIil9fWFkYXB0VGlmZlByb3BBc1NlZ21lbnQoZSl7aWYodGhpcy5wYXJzZXJzLnRpZmZbZV0pe2xldCB0PXRoaXMucGFyc2Vycy50aWZmW2VdO3RoaXMuaW5qZWN0U2VnbWVudChlLHQpfX19YyhvdCxcInR5cGVcIixcInRpZmZcIiksdy5zZXQoXCJ0aWZmXCIsb3QpO2xldCBsdD1sKFwiemxpYlwiKTtjb25zdCBodD1bXCJpaGRyXCIsXCJpY2NwXCIsXCJ0ZXh0XCIsXCJpdHh0XCIsXCJleGlmXCJdO2NsYXNzIHV0IGV4dGVuZHMgc2V7Y29uc3RydWN0b3IoLi4uZSl7c3VwZXIoLi4uZSksYyh0aGlzLFwiY2F0Y2hFcnJvclwiLChlPT50aGlzLmVycm9ycy5wdXNoKGUpKSksYyh0aGlzLFwibWV0YUNodW5rc1wiLFtdKSxjKHRoaXMsXCJ1bmtub3duQ2h1bmtzXCIsW10pfXN0YXRpYyBjYW5IYW5kbGUoZSx0KXtyZXR1cm4gMzUxNTI9PT10JiYyMzAzNzQxNTExPT09ZS5nZXRVaW50MzIoMCkmJjIxODc2NTgzND09PWUuZ2V0VWludDMyKDQpfWFzeW5jIHBhcnNlKCl7bGV0e2ZpbGU6ZX09dGhpczthd2FpdCB0aGlzLmZpbmRQbmdDaHVua3NJblJhbmdlKFwiwolQTkdcXHJcXG5cdTAwMWFcXG5cIi5sZW5ndGgsZS5ieXRlTGVuZ3RoKSxhd2FpdCB0aGlzLnJlYWRTZWdtZW50cyh0aGlzLm1ldGFDaHVua3MpLHRoaXMuZmluZEloZHIoKSx0aGlzLnBhcnNlVGV4dENodW5rcygpLGF3YWl0IHRoaXMuZmluZEV4aWYoKS5jYXRjaCh0aGlzLmNhdGNoRXJyb3IpLGF3YWl0IHRoaXMuZmluZFhtcCgpLmNhdGNoKHRoaXMuY2F0Y2hFcnJvciksYXdhaXQgdGhpcy5maW5kSWNjKCkuY2F0Y2godGhpcy5jYXRjaEVycm9yKX1hc3luYyBmaW5kUG5nQ2h1bmtzSW5SYW5nZShlLHQpe2xldHtmaWxlOml9PXRoaXM7Zm9yKDtlPHQ7KXtsZXQgdD1pLmdldFVpbnQzMihlKSxuPWkuZ2V0VWludDMyKGUrNCkscz1pLmdldFN0cmluZyhlKzQsNCkudG9Mb3dlckNhc2UoKSxyPXQrNCs0KzQsYT17dHlwZTpzLG9mZnNldDplLGxlbmd0aDpyLHN0YXJ0OmUrNCs0LHNpemU6dCxtYXJrZXI6bn07aHQuaW5jbHVkZXMocyk/dGhpcy5tZXRhQ2h1bmtzLnB1c2goYSk6dGhpcy51bmtub3duQ2h1bmtzLnB1c2goYSksZSs9cn19cGFyc2VUZXh0Q2h1bmtzKCl7bGV0IGU9dGhpcy5tZXRhQ2h1bmtzLmZpbHRlcigoZT0+XCJ0ZXh0XCI9PT1lLnR5cGUpKTtmb3IobGV0IHQgb2YgZSl7bGV0W2UsaV09dGhpcy5maWxlLmdldFN0cmluZyh0LnN0YXJ0LHQuc2l6ZSkuc3BsaXQoXCJcXDBcIik7dGhpcy5pbmplY3RLZXlWYWxUb0loZHIoZSxpKX19aW5qZWN0S2V5VmFsVG9JaGRyKGUsdCl7bGV0IGk9dGhpcy5wYXJzZXJzLmloZHI7aSYmaS5yYXcuc2V0KGUsdCl9ZmluZEloZHIoKXtsZXQgZT10aGlzLm1ldGFDaHVua3MuZmluZCgoZT0+XCJpaGRyXCI9PT1lLnR5cGUpKTtlJiYhMSE9PXRoaXMub3B0aW9ucy5paGRyLmVuYWJsZWQmJnRoaXMuY3JlYXRlUGFyc2VyKFwiaWhkclwiLGUuY2h1bmspfWFzeW5jIGZpbmRFeGlmKCl7bGV0IGU9dGhpcy5tZXRhQ2h1bmtzLmZpbmQoKGU9PlwiZXhpZlwiPT09ZS50eXBlKSk7ZSYmdGhpcy5pbmplY3RTZWdtZW50KFwidGlmZlwiLGUuY2h1bmspfWFzeW5jIGZpbmRYbXAoKXtsZXQgZT10aGlzLm1ldGFDaHVua3MuZmlsdGVyKChlPT5cIml0eHRcIj09PWUudHlwZSkpO2ZvcihsZXQgdCBvZiBlKXtcIlhNTDpjb20uYWRvYmUueG1wXCI9PT10LmNodW5rLmdldFN0cmluZygwLFwiWE1MOmNvbS5hZG9iZS54bXBcIi5sZW5ndGgpJiZ0aGlzLmluamVjdFNlZ21lbnQoXCJ4bXBcIix0LmNodW5rKX19YXN5bmMgZmluZEljYygpe2xldCBlPXRoaXMubWV0YUNodW5rcy5maW5kKChlPT5cImljY3BcIj09PWUudHlwZSkpO2lmKCFlKXJldHVybjtsZXR7Y2h1bms6dH09ZSxpPXQuZ2V0VWludDhBcnJheSgwLDgxKSxzPTA7Zm9yKDtzPDgwJiYwIT09aVtzXTspcysrO2xldCByPXMrMixhPXQuZ2V0U3RyaW5nKDAscyk7aWYodGhpcy5pbmplY3RLZXlWYWxUb0loZHIoXCJQcm9maWxlTmFtZVwiLGEpLG4pe2xldCBlPWF3YWl0IGx0LGk9dC5nZXRVaW50OEFycmF5KHIpO2k9ZS5pbmZsYXRlU3luYyhpKSx0aGlzLmluamVjdFNlZ21lbnQoXCJpY2NcIixpKX19fWModXQsXCJ0eXBlXCIsXCJwbmdcIiksdy5zZXQoXCJwbmdcIix1dCksVShFLFwiaW50ZXJvcFwiLFtbMSxcIkludGVyb3BJbmRleFwiXSxbMixcIkludGVyb3BWZXJzaW9uXCJdLFs0MDk2LFwiUmVsYXRlZEltYWdlRmlsZUZvcm1hdFwiXSxbNDA5NyxcIlJlbGF0ZWRJbWFnZVdpZHRoXCJdLFs0MDk4LFwiUmVsYXRlZEltYWdlSGVpZ2h0XCJdXSksRihFLFwiaWZkMFwiLFtbMTEsXCJQcm9jZXNzaW5nU29mdHdhcmVcIl0sWzI1NCxcIlN1YmZpbGVUeXBlXCJdLFsyNTUsXCJPbGRTdWJmaWxlVHlwZVwiXSxbMjYzLFwiVGhyZXNob2xkaW5nXCJdLFsyNjQsXCJDZWxsV2lkdGhcIl0sWzI2NSxcIkNlbGxMZW5ndGhcIl0sWzI2NixcIkZpbGxPcmRlclwiXSxbMjY5LFwiRG9jdW1lbnROYW1lXCJdLFsyODAsXCJNaW5TYW1wbGVWYWx1ZVwiXSxbMjgxLFwiTWF4U2FtcGxlVmFsdWVcIl0sWzI4NSxcIlBhZ2VOYW1lXCJdLFsyODYsXCJYUG9zaXRpb25cIl0sWzI4NyxcIllQb3NpdGlvblwiXSxbMjkwLFwiR3JheVJlc3BvbnNlVW5pdFwiXSxbMjk3LFwiUGFnZU51bWJlclwiXSxbMzIxLFwiSGFsZnRvbmVIaW50c1wiXSxbMzIyLFwiVGlsZVdpZHRoXCJdLFszMjMsXCJUaWxlTGVuZ3RoXCJdLFszMzIsXCJJbmtTZXRcIl0sWzMzNyxcIlRhcmdldFByaW50ZXJcIl0sWzE4MjQ2LFwiUmF0aW5nXCJdLFsxODI0OSxcIlJhdGluZ1BlcmNlbnRcIl0sWzMzNTUwLFwiUGl4ZWxTY2FsZVwiXSxbMzQyNjQsXCJNb2RlbFRyYW5zZm9ybVwiXSxbMzQzNzcsXCJQaG90b3Nob3BTZXR0aW5nc1wiXSxbNTA3MDYsXCJETkdWZXJzaW9uXCJdLFs1MDcwNyxcIkROR0JhY2t3YXJkVmVyc2lvblwiXSxbNTA3MDgsXCJVbmlxdWVDYW1lcmFNb2RlbFwiXSxbNTA3MDksXCJMb2NhbGl6ZWRDYW1lcmFNb2RlbFwiXSxbNTA3MzYsXCJETkdMZW5zSW5mb1wiXSxbNTA3MzksXCJTaGFkb3dTY2FsZVwiXSxbNTA3NDAsXCJETkdQcml2YXRlRGF0YVwiXSxbMzM5MjAsXCJJbnRlcmdyYXBoTWF0cml4XCJdLFszMzkyMixcIk1vZGVsVGllUG9pbnRcIl0sWzM0MTE4LFwiU0VNSW5mb1wiXSxbMzQ3MzUsXCJHZW9UaWZmRGlyZWN0b3J5XCJdLFszNDczNixcIkdlb1RpZmZEb3VibGVQYXJhbXNcIl0sWzM0NzM3LFwiR2VvVGlmZkFzY2lpUGFyYW1zXCJdLFs1MDM0MSxcIlByaW50SU1cIl0sWzUwNzIxLFwiQ29sb3JNYXRyaXgxXCJdLFs1MDcyMixcIkNvbG9yTWF0cml4MlwiXSxbNTA3MjMsXCJDYW1lcmFDYWxpYnJhdGlvbjFcIl0sWzUwNzI0LFwiQ2FtZXJhQ2FsaWJyYXRpb24yXCJdLFs1MDcyNSxcIlJlZHVjdGlvbk1hdHJpeDFcIl0sWzUwNzI2LFwiUmVkdWN0aW9uTWF0cml4MlwiXSxbNTA3MjcsXCJBbmFsb2dCYWxhbmNlXCJdLFs1MDcyOCxcIkFzU2hvdE5ldXRyYWxcIl0sWzUwNzI5LFwiQXNTaG90V2hpdGVYWVwiXSxbNTA3MzAsXCJCYXNlbGluZUV4cG9zdXJlXCJdLFs1MDczMSxcIkJhc2VsaW5lTm9pc2VcIl0sWzUwNzMyLFwiQmFzZWxpbmVTaGFycG5lc3NcIl0sWzUwNzM0LFwiTGluZWFyUmVzcG9uc2VMaW1pdFwiXSxbNTA3MzUsXCJDYW1lcmFTZXJpYWxOdW1iZXJcIl0sWzUwNzQxLFwiTWFrZXJOb3RlU2FmZXR5XCJdLFs1MDc3OCxcIkNhbGlicmF0aW9uSWxsdW1pbmFudDFcIl0sWzUwNzc5LFwiQ2FsaWJyYXRpb25JbGx1bWluYW50MlwiXSxbNTA3ODEsXCJSYXdEYXRhVW5pcXVlSURcIl0sWzUwODI3LFwiT3JpZ2luYWxSYXdGaWxlTmFtZVwiXSxbNTA4MjgsXCJPcmlnaW5hbFJhd0ZpbGVEYXRhXCJdLFs1MDgzMSxcIkFzU2hvdElDQ1Byb2ZpbGVcIl0sWzUwODMyLFwiQXNTaG90UHJlUHJvZmlsZU1hdHJpeFwiXSxbNTA4MzMsXCJDdXJyZW50SUNDUHJvZmlsZVwiXSxbNTA4MzQsXCJDdXJyZW50UHJlUHJvZmlsZU1hdHJpeFwiXSxbNTA4NzksXCJDb2xvcmltZXRyaWNSZWZlcmVuY2VcIl0sWzUwODg1LFwiU1Jhd1R5cGVcIl0sWzUwODk4LFwiUGFuYXNvbmljVGl0bGVcIl0sWzUwODk5LFwiUGFuYXNvbmljVGl0bGUyXCJdLFs1MDkzMSxcIkNhbWVyYUNhbGlicmF0aW9uU2lnXCJdLFs1MDkzMixcIlByb2ZpbGVDYWxpYnJhdGlvblNpZ1wiXSxbNTA5MzMsXCJQcm9maWxlSUZEXCJdLFs1MDkzNCxcIkFzU2hvdFByb2ZpbGVOYW1lXCJdLFs1MDkzNixcIlByb2ZpbGVOYW1lXCJdLFs1MDkzNyxcIlByb2ZpbGVIdWVTYXRNYXBEaW1zXCJdLFs1MDkzOCxcIlByb2ZpbGVIdWVTYXRNYXBEYXRhMVwiXSxbNTA5MzksXCJQcm9maWxlSHVlU2F0TWFwRGF0YTJcIl0sWzUwOTQwLFwiUHJvZmlsZVRvbmVDdXJ2ZVwiXSxbNTA5NDEsXCJQcm9maWxlRW1iZWRQb2xpY3lcIl0sWzUwOTQyLFwiUHJvZmlsZUNvcHlyaWdodFwiXSxbNTA5NjQsXCJGb3J3YXJkTWF0cml4MVwiXSxbNTA5NjUsXCJGb3J3YXJkTWF0cml4MlwiXSxbNTA5NjYsXCJQcmV2aWV3QXBwbGljYXRpb25OYW1lXCJdLFs1MDk2NyxcIlByZXZpZXdBcHBsaWNhdGlvblZlcnNpb25cIl0sWzUwOTY4LFwiUHJldmlld1NldHRpbmdzTmFtZVwiXSxbNTA5NjksXCJQcmV2aWV3U2V0dGluZ3NEaWdlc3RcIl0sWzUwOTcwLFwiUHJldmlld0NvbG9yU3BhY2VcIl0sWzUwOTcxLFwiUHJldmlld0RhdGVUaW1lXCJdLFs1MDk3MixcIlJhd0ltYWdlRGlnZXN0XCJdLFs1MDk3MyxcIk9yaWdpbmFsUmF3RmlsZURpZ2VzdFwiXSxbNTA5ODEsXCJQcm9maWxlTG9va1RhYmxlRGltc1wiXSxbNTA5ODIsXCJQcm9maWxlTG9va1RhYmxlRGF0YVwiXSxbNTEwNDMsXCJUaW1lQ29kZXNcIl0sWzUxMDQ0LFwiRnJhbWVSYXRlXCJdLFs1MTA1OCxcIlRTdG9wXCJdLFs1MTA4MSxcIlJlZWxOYW1lXCJdLFs1MTA4OSxcIk9yaWdpbmFsRGVmYXVsdEZpbmFsU2l6ZVwiXSxbNTEwOTAsXCJPcmlnaW5hbEJlc3RRdWFsaXR5U2l6ZVwiXSxbNTEwOTEsXCJPcmlnaW5hbERlZmF1bHRDcm9wU2l6ZVwiXSxbNTExMDUsXCJDYW1lcmFMYWJlbFwiXSxbNTExMDcsXCJQcm9maWxlSHVlU2F0TWFwRW5jb2RpbmdcIl0sWzUxMTA4LFwiUHJvZmlsZUxvb2tUYWJsZUVuY29kaW5nXCJdLFs1MTEwOSxcIkJhc2VsaW5lRXhwb3N1cmVPZmZzZXRcIl0sWzUxMTEwLFwiRGVmYXVsdEJsYWNrUmVuZGVyXCJdLFs1MTExMSxcIk5ld1Jhd0ltYWdlRGlnZXN0XCJdLFs1MTExMixcIlJhd1RvUHJldmlld0dhaW5cIl1dKTtsZXQgY3Q9W1syNzMsXCJTdHJpcE9mZnNldHNcIl0sWzI3OSxcIlN0cmlwQnl0ZUNvdW50c1wiXSxbMjg4LFwiRnJlZU9mZnNldHNcIl0sWzI4OSxcIkZyZWVCeXRlQ291bnRzXCJdLFsyOTEsXCJHcmF5UmVzcG9uc2VDdXJ2ZVwiXSxbMjkyLFwiVDRPcHRpb25zXCJdLFsyOTMsXCJUNk9wdGlvbnNcIl0sWzMwMCxcIkNvbG9yUmVzcG9uc2VVbml0XCJdLFszMjAsXCJDb2xvck1hcFwiXSxbMzI0LFwiVGlsZU9mZnNldHNcIl0sWzMyNSxcIlRpbGVCeXRlQ291bnRzXCJdLFszMjYsXCJCYWRGYXhMaW5lc1wiXSxbMzI3LFwiQ2xlYW5GYXhEYXRhXCJdLFszMjgsXCJDb25zZWN1dGl2ZUJhZEZheExpbmVzXCJdLFszMzAsXCJTdWJJRkRcIl0sWzMzMyxcIklua05hbWVzXCJdLFszMzQsXCJOdW1iZXJvZklua3NcIl0sWzMzNixcIkRvdFJhbmdlXCJdLFszMzgsXCJFeHRyYVNhbXBsZXNcIl0sWzMzOSxcIlNhbXBsZUZvcm1hdFwiXSxbMzQwLFwiU01pblNhbXBsZVZhbHVlXCJdLFszNDEsXCJTTWF4U2FtcGxlVmFsdWVcIl0sWzM0MixcIlRyYW5zZmVyUmFuZ2VcIl0sWzM0MyxcIkNsaXBQYXRoXCJdLFszNDQsXCJYQ2xpcFBhdGhVbml0c1wiXSxbMzQ1LFwiWUNsaXBQYXRoVW5pdHNcIl0sWzM0NixcIkluZGV4ZWRcIl0sWzM0NyxcIkpQRUdUYWJsZXNcIl0sWzM1MSxcIk9QSVByb3h5XCJdLFs0MDAsXCJHbG9iYWxQYXJhbWV0ZXJzSUZEXCJdLFs0MDEsXCJQcm9maWxlVHlwZVwiXSxbNDAyLFwiRmF4UHJvZmlsZVwiXSxbNDAzLFwiQ29kaW5nTWV0aG9kc1wiXSxbNDA0LFwiVmVyc2lvblllYXJcIl0sWzQwNSxcIk1vZGVOdW1iZXJcIl0sWzQzMyxcIkRlY29kZVwiXSxbNDM0LFwiRGVmYXVsdEltYWdlQ29sb3JcIl0sWzQzNSxcIlQ4Mk9wdGlvbnNcIl0sWzQzNyxcIkpQRUdUYWJsZXNcIl0sWzUxMixcIkpQRUdQcm9jXCJdLFs1MTUsXCJKUEVHUmVzdGFydEludGVydmFsXCJdLFs1MTcsXCJKUEVHTG9zc2xlc3NQcmVkaWN0b3JzXCJdLFs1MTgsXCJKUEVHUG9pbnRUcmFuc2Zvcm1zXCJdLFs1MTksXCJKUEVHUVRhYmxlc1wiXSxbNTIwLFwiSlBFR0RDVGFibGVzXCJdLFs1MjEsXCJKUEVHQUNUYWJsZXNcIl0sWzU1OSxcIlN0cmlwUm93Q291bnRzXCJdLFs5OTksXCJVU1BUT01pc2NlbGxhbmVvdXNcIl0sWzE4MjQ3LFwiWFBfRElQX1hNTFwiXSxbMTgyNDgsXCJTdGl0Y2hJbmZvXCJdLFsyODY3MixcIlNvbnlSYXdGaWxlVHlwZVwiXSxbMjg2ODgsXCJTb255VG9uZUN1cnZlXCJdLFsyODcyMSxcIlZpZ25ldHRpbmdDb3JyZWN0aW9uXCJdLFsyODcyMixcIlZpZ25ldHRpbmdDb3JyUGFyYW1zXCJdLFsyODcyNCxcIkNocm9tYXRpY0FiZXJyYXRpb25Db3JyZWN0aW9uXCJdLFsyODcyNSxcIkNocm9tYXRpY0FiZXJyYXRpb25Db3JyUGFyYW1zXCJdLFsyODcyNixcIkRpc3RvcnRpb25Db3JyZWN0aW9uXCJdLFsyODcyNyxcIkRpc3RvcnRpb25Db3JyUGFyYW1zXCJdLFsyOTg5NSxcIlNvbnlDcm9wVG9wTGVmdFwiXSxbMjk4OTYsXCJTb255Q3JvcFNpemVcIl0sWzMyNzgxLFwiSW1hZ2VJRFwiXSxbMzI5MzEsXCJXYW5nVGFnMVwiXSxbMzI5MzIsXCJXYW5nQW5ub3RhdGlvblwiXSxbMzI5MzMsXCJXYW5nVGFnM1wiXSxbMzI5MzQsXCJXYW5nVGFnNFwiXSxbMzI5NTMsXCJJbWFnZVJlZmVyZW5jZVBvaW50c1wiXSxbMzI5NTQsXCJSZWdpb25YZm9ybVRhY2tQb2ludFwiXSxbMzI5NTUsXCJXYXJwUXVhZHJpbGF0ZXJhbFwiXSxbMzI5NTYsXCJBZmZpbmVUcmFuc2Zvcm1NYXRcIl0sWzMyOTk1LFwiTWF0dGVpbmdcIl0sWzMyOTk2LFwiRGF0YVR5cGVcIl0sWzMyOTk3LFwiSW1hZ2VEZXB0aFwiXSxbMzI5OTgsXCJUaWxlRGVwdGhcIl0sWzMzMzAwLFwiSW1hZ2VGdWxsV2lkdGhcIl0sWzMzMzAxLFwiSW1hZ2VGdWxsSGVpZ2h0XCJdLFszMzMwMixcIlRleHR1cmVGb3JtYXRcIl0sWzMzMzAzLFwiV3JhcE1vZGVzXCJdLFszMzMwNCxcIkZvdkNvdFwiXSxbMzMzMDUsXCJNYXRyaXhXb3JsZFRvU2NyZWVuXCJdLFszMzMwNixcIk1hdHJpeFdvcmxkVG9DYW1lcmFcIl0sWzMzNDA1LFwiTW9kZWwyXCJdLFszMzQyMSxcIkNGQVJlcGVhdFBhdHRlcm5EaW1cIl0sWzMzNDIyLFwiQ0ZBUGF0dGVybjJcIl0sWzMzNDIzLFwiQmF0dGVyeUxldmVsXCJdLFszMzQyNCxcIktvZGFrSUZEXCJdLFszMzQ0NSxcIk1ERmlsZVRhZ1wiXSxbMzM0NDYsXCJNRFNjYWxlUGl4ZWxcIl0sWzMzNDQ3LFwiTURDb2xvclRhYmxlXCJdLFszMzQ0OCxcIk1ETGFiTmFtZVwiXSxbMzM0NDksXCJNRFNhbXBsZUluZm9cIl0sWzMzNDUwLFwiTURQcmVwRGF0ZVwiXSxbMzM0NTEsXCJNRFByZXBUaW1lXCJdLFszMzQ1MixcIk1ERmlsZVVuaXRzXCJdLFszMzU4OSxcIkFkdmVudFNjYWxlXCJdLFszMzU5MCxcIkFkdmVudFJldmlzaW9uXCJdLFszMzYyOCxcIlVJQzFUYWdcIl0sWzMzNjI5LFwiVUlDMlRhZ1wiXSxbMzM2MzAsXCJVSUMzVGFnXCJdLFszMzYzMSxcIlVJQzRUYWdcIl0sWzMzOTE4LFwiSW50ZXJncmFwaFBhY2tldERhdGFcIl0sWzMzOTE5LFwiSW50ZXJncmFwaEZsYWdSZWdpc3RlcnNcIl0sWzMzOTIxLFwiSU5HUlJlc2VydmVkXCJdLFszNDAxNixcIlNpdGVcIl0sWzM0MDE3LFwiQ29sb3JTZXF1ZW5jZVwiXSxbMzQwMTgsXCJJVDhIZWFkZXJcIl0sWzM0MDE5LFwiUmFzdGVyUGFkZGluZ1wiXSxbMzQwMjAsXCJCaXRzUGVyUnVuTGVuZ3RoXCJdLFszNDAyMSxcIkJpdHNQZXJFeHRlbmRlZFJ1bkxlbmd0aFwiXSxbMzQwMjIsXCJDb2xvclRhYmxlXCJdLFszNDAyMyxcIkltYWdlQ29sb3JJbmRpY2F0b3JcIl0sWzM0MDI0LFwiQmFja2dyb3VuZENvbG9ySW5kaWNhdG9yXCJdLFszNDAyNSxcIkltYWdlQ29sb3JWYWx1ZVwiXSxbMzQwMjYsXCJCYWNrZ3JvdW5kQ29sb3JWYWx1ZVwiXSxbMzQwMjcsXCJQaXhlbEludGVuc2l0eVJhbmdlXCJdLFszNDAyOCxcIlRyYW5zcGFyZW5jeUluZGljYXRvclwiXSxbMzQwMjksXCJDb2xvckNoYXJhY3Rlcml6YXRpb25cIl0sWzM0MDMwLFwiSENVc2FnZVwiXSxbMzQwMzEsXCJUcmFwSW5kaWNhdG9yXCJdLFszNDAzMixcIkNNWUtFcXVpdmFsZW50XCJdLFszNDE1MixcIkFGQ1BfSVBUQ1wiXSxbMzQyMzIsXCJQaXhlbE1hZ2ljSkJJR09wdGlvbnNcIl0sWzM0MjYzLFwiSlBMQ2FydG9JRkRcIl0sWzM0MzA2LFwiV0JfR1JHQkxldmVsc1wiXSxbMzQzMTAsXCJMZWFmRGF0YVwiXSxbMzQ2ODcsXCJUSUZGX0ZYRXh0ZW5zaW9uc1wiXSxbMzQ2ODgsXCJNdWx0aVByb2ZpbGVzXCJdLFszNDY4OSxcIlNoYXJlZERhdGFcIl0sWzM0NjkwLFwiVDg4T3B0aW9uc1wiXSxbMzQ3MzIsXCJJbWFnZUxheWVyXCJdLFszNDc1MCxcIkpCSUdPcHRpb25zXCJdLFszNDg1NixcIk9wdG8tRWxlY3RyaWNDb252RmFjdG9yXCJdLFszNDg1NyxcIkludGVybGFjZVwiXSxbMzQ5MDgsXCJGYXhSZWN2UGFyYW1zXCJdLFszNDkwOSxcIkZheFN1YkFkZHJlc3NcIl0sWzM0OTEwLFwiRmF4UmVjdlRpbWVcIl0sWzM0OTI5LFwiRmVkZXhFRFJcIl0sWzM0OTU0LFwiTGVhZlN1YklGRFwiXSxbMzczODcsXCJGbGFzaEVuZXJneVwiXSxbMzczODgsXCJTcGF0aWFsRnJlcXVlbmN5UmVzcG9uc2VcIl0sWzM3Mzg5LFwiTm9pc2VcIl0sWzM3MzkwLFwiRm9jYWxQbGFuZVhSZXNvbHV0aW9uXCJdLFszNzM5MSxcIkZvY2FsUGxhbmVZUmVzb2x1dGlvblwiXSxbMzczOTIsXCJGb2NhbFBsYW5lUmVzb2x1dGlvblVuaXRcIl0sWzM3Mzk3LFwiRXhwb3N1cmVJbmRleFwiXSxbMzczOTgsXCJUSUZGLUVQU3RhbmRhcmRJRFwiXSxbMzczOTksXCJTZW5zaW5nTWV0aG9kXCJdLFszNzQzNCxcIkNJUDNEYXRhRmlsZVwiXSxbMzc0MzUsXCJDSVAzU2hlZXRcIl0sWzM3NDM2LFwiQ0lQM1NpZGVcIl0sWzM3NDM5LFwiU3RvTml0c1wiXSxbMzc2NzksXCJNU0RvY3VtZW50VGV4dFwiXSxbMzc2ODAsXCJNU1Byb3BlcnR5U2V0U3RvcmFnZVwiXSxbMzc2ODEsXCJNU0RvY3VtZW50VGV4dFBvc2l0aW9uXCJdLFszNzcyNCxcIkltYWdlU291cmNlRGF0YVwiXSxbNDA5NjUsXCJJbnRlcm9wSUZEXCJdLFs0MDk3NixcIlNhbXN1bmdSYXdQb2ludGVyc09mZnNldFwiXSxbNDA5NzcsXCJTYW1zdW5nUmF3UG9pbnRlcnNMZW5ndGhcIl0sWzQxMjE3LFwiU2Ftc3VuZ1Jhd0J5dGVPcmRlclwiXSxbNDEyMTgsXCJTYW1zdW5nUmF3VW5rbm93blwiXSxbNDE0ODQsXCJTcGF0aWFsRnJlcXVlbmN5UmVzcG9uc2VcIl0sWzQxNDg1LFwiTm9pc2VcIl0sWzQxNDg5LFwiSW1hZ2VOdW1iZXJcIl0sWzQxNDkwLFwiU2VjdXJpdHlDbGFzc2lmaWNhdGlvblwiXSxbNDE0OTEsXCJJbWFnZUhpc3RvcnlcIl0sWzQxNDk0LFwiVElGRi1FUFN0YW5kYXJkSURcIl0sWzQxOTk1LFwiRGV2aWNlU2V0dGluZ0Rlc2NyaXB0aW9uXCJdLFs0MjExMixcIkdEQUxNZXRhZGF0YVwiXSxbNDIxMTMsXCJHREFMTm9EYXRhXCJdLFs0NDk5MixcIkV4cGFuZFNvZnR3YXJlXCJdLFs0NDk5MyxcIkV4cGFuZExlbnNcIl0sWzQ0OTk0LFwiRXhwYW5kRmlsbVwiXSxbNDQ5OTUsXCJFeHBhbmRGaWx0ZXJMZW5zXCJdLFs0NDk5NixcIkV4cGFuZFNjYW5uZXJcIl0sWzQ0OTk3LFwiRXhwYW5kRmxhc2hMYW1wXCJdLFs0NjI3NSxcIkhhc3NlbGJsYWRSYXdJbWFnZVwiXSxbNDgxMjksXCJQaXhlbEZvcm1hdFwiXSxbNDgxMzAsXCJUcmFuc2Zvcm1hdGlvblwiXSxbNDgxMzEsXCJVbmNvbXByZXNzZWRcIl0sWzQ4MTMyLFwiSW1hZ2VUeXBlXCJdLFs0ODI1NixcIkltYWdlV2lkdGhcIl0sWzQ4MjU3LFwiSW1hZ2VIZWlnaHRcIl0sWzQ4MjU4LFwiV2lkdGhSZXNvbHV0aW9uXCJdLFs0ODI1OSxcIkhlaWdodFJlc29sdXRpb25cIl0sWzQ4MzIwLFwiSW1hZ2VPZmZzZXRcIl0sWzQ4MzIxLFwiSW1hZ2VCeXRlQ291bnRcIl0sWzQ4MzIyLFwiQWxwaGFPZmZzZXRcIl0sWzQ4MzIzLFwiQWxwaGFCeXRlQ291bnRcIl0sWzQ4MzI0LFwiSW1hZ2VEYXRhRGlzY2FyZFwiXSxbNDgzMjUsXCJBbHBoYURhdGFEaXNjYXJkXCJdLFs1MDIxNSxcIk9jZVNjYW5qb2JEZXNjXCJdLFs1MDIxNixcIk9jZUFwcGxpY2F0aW9uU2VsZWN0b3JcIl0sWzUwMjE3LFwiT2NlSUROdW1iZXJcIl0sWzUwMjE4LFwiT2NlSW1hZ2VMb2dpY1wiXSxbNTAyNTUsXCJBbm5vdGF0aW9uc1wiXSxbNTA0NTksXCJIYXNzZWxibGFkRXhpZlwiXSxbNTA1NDcsXCJPcmlnaW5hbEZpbGVOYW1lXCJdLFs1MDU2MCxcIlVTUFRPT3JpZ2luYWxDb250ZW50VHlwZVwiXSxbNTA2NTYsXCJDUjJDRkFQYXR0ZXJuXCJdLFs1MDcxMCxcIkNGQVBsYW5lQ29sb3JcIl0sWzUwNzExLFwiQ0ZBTGF5b3V0XCJdLFs1MDcxMixcIkxpbmVhcml6YXRpb25UYWJsZVwiXSxbNTA3MTMsXCJCbGFja0xldmVsUmVwZWF0RGltXCJdLFs1MDcxNCxcIkJsYWNrTGV2ZWxcIl0sWzUwNzE1LFwiQmxhY2tMZXZlbERlbHRhSFwiXSxbNTA3MTYsXCJCbGFja0xldmVsRGVsdGFWXCJdLFs1MDcxNyxcIldoaXRlTGV2ZWxcIl0sWzUwNzE4LFwiRGVmYXVsdFNjYWxlXCJdLFs1MDcxOSxcIkRlZmF1bHRDcm9wT3JpZ2luXCJdLFs1MDcyMCxcIkRlZmF1bHRDcm9wU2l6ZVwiXSxbNTA3MzMsXCJCYXllckdyZWVuU3BsaXRcIl0sWzUwNzM3LFwiQ2hyb21hQmx1clJhZGl1c1wiXSxbNTA3MzgsXCJBbnRpQWxpYXNTdHJlbmd0aFwiXSxbNTA3NTIsXCJSYXdJbWFnZVNlZ21lbnRhdGlvblwiXSxbNTA3ODAsXCJCZXN0UXVhbGl0eVNjYWxlXCJdLFs1MDc4NCxcIkFsaWFzTGF5ZXJNZXRhZGF0YVwiXSxbNTA4MjksXCJBY3RpdmVBcmVhXCJdLFs1MDgzMCxcIk1hc2tlZEFyZWFzXCJdLFs1MDkzNSxcIk5vaXNlUmVkdWN0aW9uQXBwbGllZFwiXSxbNTA5NzQsXCJTdWJUaWxlQmxvY2tTaXplXCJdLFs1MDk3NSxcIlJvd0ludGVybGVhdmVGYWN0b3JcIl0sWzUxMDA4LFwiT3Bjb2RlTGlzdDFcIl0sWzUxMDA5LFwiT3Bjb2RlTGlzdDJcIl0sWzUxMDIyLFwiT3Bjb2RlTGlzdDNcIl0sWzUxMDQxLFwiTm9pc2VQcm9maWxlXCJdLFs1MTExNCxcIkNhY2hlVmVyc2lvblwiXSxbNTExMjUsXCJEZWZhdWx0VXNlckNyb3BcIl0sWzUxMTU3LFwiTmlrb25ORUZJbmZvXCJdLFs2NTAyNCxcIktkY0lGRFwiXV07RihFLFwiaWZkMFwiLGN0KSxGKEUsXCJleGlmXCIsY3QpLFUoQixcImdwc1wiLFtbMjMse006XCJNYWduZXRpYyBOb3J0aFwiLFQ6XCJUcnVlIE5vcnRoXCJ9XSxbMjUse0s6XCJLaWxvbWV0ZXJzXCIsTTpcIk1pbGVzXCIsTjpcIk5hdXRpY2FsIE1pbGVzXCJ9XV0pO2NsYXNzIGZ0IGV4dGVuZHMgcmV7c3RhdGljIGNhbkhhbmRsZShlLHQpe3JldHVybiAyMjQ9PT1lLmdldFVpbnQ4KHQrMSkmJjEyNDYxMjAyNjI9PT1lLmdldFVpbnQzMih0KzQpJiYwPT09ZS5nZXRVaW50OCh0KzgpfXBhcnNlKCl7cmV0dXJuIHRoaXMucGFyc2VUYWdzKCksdGhpcy50cmFuc2xhdGUoKSx0aGlzLm91dHB1dH1wYXJzZVRhZ3MoKXt0aGlzLnJhdz1uZXcgTWFwKFtbMCx0aGlzLmNodW5rLmdldFVpbnQxNigwKV0sWzIsdGhpcy5jaHVuay5nZXRVaW50OCgyKV0sWzMsdGhpcy5jaHVuay5nZXRVaW50MTYoMyldLFs1LHRoaXMuY2h1bmsuZ2V0VWludDE2KDUpXSxbNyx0aGlzLmNodW5rLmdldFVpbnQ4KDcpXSxbOCx0aGlzLmNodW5rLmdldFVpbnQ4KDgpXV0pfX1jKGZ0LFwidHlwZVwiLFwiamZpZlwiKSxjKGZ0LFwiaGVhZGVyTGVuZ3RoXCIsOSksVC5zZXQoXCJqZmlmXCIsZnQpLFUoRSxcImpmaWZcIixbWzAsXCJKRklGVmVyc2lvblwiXSxbMixcIlJlc29sdXRpb25Vbml0XCJdLFszLFwiWFJlc29sdXRpb25cIl0sWzUsXCJZUmVzb2x1dGlvblwiXSxbNyxcIlRodW1ibmFpbFdpZHRoXCJdLFs4LFwiVGh1bWJuYWlsSGVpZ2h0XCJdXSk7Y2xhc3MgZHQgZXh0ZW5kcyByZXtwYXJzZSgpe3JldHVybiB0aGlzLnBhcnNlVGFncygpLHRoaXMudHJhbnNsYXRlKCksdGhpcy5vdXRwdXR9cGFyc2VUYWdzKCl7dGhpcy5yYXc9bmV3IE1hcChbWzAsdGhpcy5jaHVuay5nZXRVaW50MzIoMCldLFs0LHRoaXMuY2h1bmsuZ2V0VWludDMyKDQpXSxbOCx0aGlzLmNodW5rLmdldFVpbnQ4KDgpXSxbOSx0aGlzLmNodW5rLmdldFVpbnQ4KDkpXSxbMTAsdGhpcy5jaHVuay5nZXRVaW50OCgxMCldLFsxMSx0aGlzLmNodW5rLmdldFVpbnQ4KDExKV0sWzEyLHRoaXMuY2h1bmsuZ2V0VWludDgoMTIpXSwuLi5BcnJheS5mcm9tKHRoaXMucmF3KV0pfX1jKGR0LFwidHlwZVwiLFwiaWhkclwiKSxULnNldChcImloZHJcIixkdCksVShFLFwiaWhkclwiLFtbMCxcIkltYWdlV2lkdGhcIl0sWzQsXCJJbWFnZUhlaWdodFwiXSxbOCxcIkJpdERlcHRoXCJdLFs5LFwiQ29sb3JUeXBlXCJdLFsxMCxcIkNvbXByZXNzaW9uXCJdLFsxMSxcIkZpbHRlclwiXSxbMTIsXCJJbnRlcmxhY2VcIl1dKSxVKEIsXCJpaGRyXCIsW1s5LHswOlwiR3JheXNjYWxlXCIsMjpcIlJHQlwiLDM6XCJQYWxldHRlXCIsNDpcIkdyYXlzY2FsZSB3aXRoIEFscGhhXCIsNjpcIlJHQiB3aXRoIEFscGhhXCIsREVGQVVMVDpcIlVua25vd25cIn1dLFsxMCx7MDpcIkRlZmxhdGUvSW5mbGF0ZVwiLERFRkFVTFQ6XCJVbmtub3duXCJ9XSxbMTEsezA6XCJBZGFwdGl2ZVwiLERFRkFVTFQ6XCJVbmtub3duXCJ9XSxbMTIsezA6XCJOb25pbnRlcmxhY2VkXCIsMTpcIkFkYW03IEludGVybGFjZVwiLERFRkFVTFQ6XCJVbmtub3duXCJ9XV0pO2NsYXNzIHB0IGV4dGVuZHMgcmV7c3RhdGljIGNhbkhhbmRsZShlLHQpe3JldHVybiAyMjY9PT1lLmdldFVpbnQ4KHQrMSkmJjEyMjkxNDQ5Mjc9PT1lLmdldFVpbnQzMih0KzQpfXN0YXRpYyBmaW5kUG9zaXRpb24oZSx0KXtsZXQgaT1zdXBlci5maW5kUG9zaXRpb24oZSx0KTtyZXR1cm4gaS5jaHVua051bWJlcj1lLmdldFVpbnQ4KHQrMTYpLGkuY2h1bmtDb3VudD1lLmdldFVpbnQ4KHQrMTcpLGkubXVsdGlTZWdtZW50PWkuY2h1bmtDb3VudD4xLGl9c3RhdGljIGhhbmRsZU11bHRpU2VnbWVudHMoZSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2xldCB0PWZ1bmN0aW9uKGUpe2xldCB0PWVbMF0uY29uc3RydWN0b3IsaT0wO2ZvcihsZXQgdCBvZiBlKWkrPXQubGVuZ3RoO2xldCBuPW5ldyB0KGkpLHM9MDtmb3IobGV0IHQgb2YgZSluLnNldCh0LHMpLHMrPXQubGVuZ3RoO3JldHVybiBufShlLm1hcCgoZT0+ZS5jaHVuay50b1VpbnQ4KCkpKSk7cmV0dXJuIG5ldyBJKHQpfShlKX1wYXJzZSgpe3JldHVybiB0aGlzLnJhdz1uZXcgTWFwLHRoaXMucGFyc2VIZWFkZXIoKSx0aGlzLnBhcnNlVGFncygpLHRoaXMudHJhbnNsYXRlKCksdGhpcy5vdXRwdXR9cGFyc2VIZWFkZXIoKXtsZXR7cmF3OmV9PXRoaXM7dGhpcy5jaHVuay5ieXRlTGVuZ3RoPDg0JiZnKFwiSUNDIGhlYWRlciBpcyB0b28gc2hvcnRcIik7Zm9yKGxldFt0LGldb2YgT2JqZWN0LmVudHJpZXMoZ3QpKXt0PXBhcnNlSW50KHQsMTApO2xldCBuPWkodGhpcy5jaHVuayx0KTtcIlxcMFxcMFxcMFxcMFwiIT09biYmZS5zZXQodCxuKX19cGFyc2VUYWdzKCl7bGV0IGUsdCxpLG4scyx7cmF3OnJ9PXRoaXMsYT10aGlzLmNodW5rLmdldFVpbnQzMigxMjgpLG89MTMyLGw9dGhpcy5jaHVuay5ieXRlTGVuZ3RoO2Zvcig7YS0tOyl7aWYoZT10aGlzLmNodW5rLmdldFN0cmluZyhvLDQpLHQ9dGhpcy5jaHVuay5nZXRVaW50MzIobys0KSxpPXRoaXMuY2h1bmsuZ2V0VWludDMyKG8rOCksbj10aGlzLmNodW5rLmdldFN0cmluZyh0LDQpLHQraT5sKXJldHVybiB2b2lkIGNvbnNvbGUud2FybihcInJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgZmlyc3QgSUNDIGNodW5rLiBFbmFibGUgb3B0aW9ucy50aWZmLm11bHRpU2VnbWVudCB0byByZWFkIGFsbCBJQ0Mgc2VnbWVudHMuXCIpO3M9dGhpcy5wYXJzZVRhZyhuLHQsaSksdm9pZCAwIT09cyYmXCJcXDBcXDBcXDBcXDBcIiE9PXMmJnIuc2V0KGUscyksbys9MTJ9fXBhcnNlVGFnKGUsdCxpKXtzd2l0Y2goZSl7Y2FzZVwiZGVzY1wiOnJldHVybiB0aGlzLnBhcnNlRGVzYyh0KTtjYXNlXCJtbHVjXCI6cmV0dXJuIHRoaXMucGFyc2VNbHVjKHQpO2Nhc2VcInRleHRcIjpyZXR1cm4gdGhpcy5wYXJzZVRleHQodCxpKTtjYXNlXCJzaWcgXCI6cmV0dXJuIHRoaXMucGFyc2VTaWcodCl9aWYoISh0K2k+dGhpcy5jaHVuay5ieXRlTGVuZ3RoKSlyZXR1cm4gdGhpcy5jaHVuay5nZXRVaW50OEFycmF5KHQsaSl9cGFyc2VEZXNjKGUpe2xldCB0PXRoaXMuY2h1bmsuZ2V0VWludDMyKGUrOCktMTtyZXR1cm4gbSh0aGlzLmNodW5rLmdldFN0cmluZyhlKzEyLHQpKX1wYXJzZVRleHQoZSx0KXtyZXR1cm4gbSh0aGlzLmNodW5rLmdldFN0cmluZyhlKzgsdC04KSl9cGFyc2VTaWcoZSl7cmV0dXJuIG0odGhpcy5jaHVuay5nZXRTdHJpbmcoZSs4LDQpKX1wYXJzZU1sdWMoZSl7bGV0e2NodW5rOnR9PXRoaXMsaT10LmdldFVpbnQzMihlKzgpLG49dC5nZXRVaW50MzIoZSsxMikscz1lKzE2LHI9W107Zm9yKGxldCBhPTA7YTxpO2ErKyl7bGV0IGk9dC5nZXRTdHJpbmcocyswLDIpLGE9dC5nZXRTdHJpbmcocysyLDIpLG89dC5nZXRVaW50MzIocys0KSxsPXQuZ2V0VWludDMyKHMrOCkrZSxoPW0odC5nZXRVbmljb2RlU3RyaW5nKGwsbykpO3IucHVzaCh7bGFuZzppLGNvdW50cnk6YSx0ZXh0Omh9KSxzKz1ufXJldHVybiAxPT09aT9yWzBdLnRleHQ6cn10cmFuc2xhdGVWYWx1ZShlLHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3RbZV18fHRbZS50b0xvd2VyQ2FzZSgpXXx8ZTp0W2VdfHxlfX1jKHB0LFwidHlwZVwiLFwiaWNjXCIpLGMocHQsXCJtdWx0aVNlZ21lbnRcIiwhMCksYyhwdCxcImhlYWRlckxlbmd0aFwiLDE4KTtjb25zdCBndD17NDptdCw4OmZ1bmN0aW9uKGUsdCl7cmV0dXJuW2UuZ2V0VWludDgodCksZS5nZXRVaW50OCh0KzEpPj40LGUuZ2V0VWludDgodCsxKSUxNl0ubWFwKChlPT5lLnRvU3RyaW5nKDEwKSkpLmpvaW4oXCIuXCIpfSwxMjptdCwxNjptdCwyMDptdCwyNDpmdW5jdGlvbihlLHQpe2NvbnN0IGk9ZS5nZXRVaW50MTYodCksbj1lLmdldFVpbnQxNih0KzIpLTEscz1lLmdldFVpbnQxNih0KzQpLHI9ZS5nZXRVaW50MTYodCs2KSxhPWUuZ2V0VWludDE2KHQrOCksbz1lLmdldFVpbnQxNih0KzEwKTtyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoaSxuLHMscixhLG8pKX0sMzY6bXQsNDA6bXQsNDg6bXQsNTI6bXQsNjQ6KGUsdCk9PmUuZ2V0VWludDMyKHQpLDgwOm10fTtmdW5jdGlvbiBtdChlLHQpe3JldHVybiBtKGUuZ2V0U3RyaW5nKHQsNCkpfVQuc2V0KFwiaWNjXCIscHQpLFUoRSxcImljY1wiLFtbNCxcIlByb2ZpbGVDTU1UeXBlXCJdLFs4LFwiUHJvZmlsZVZlcnNpb25cIl0sWzEyLFwiUHJvZmlsZUNsYXNzXCJdLFsxNixcIkNvbG9yU3BhY2VEYXRhXCJdLFsyMCxcIlByb2ZpbGVDb25uZWN0aW9uU3BhY2VcIl0sWzI0LFwiUHJvZmlsZURhdGVUaW1lXCJdLFszNixcIlByb2ZpbGVGaWxlU2lnbmF0dXJlXCJdLFs0MCxcIlByaW1hcnlQbGF0Zm9ybVwiXSxbNDQsXCJDTU1GbGFnc1wiXSxbNDgsXCJEZXZpY2VNYW51ZmFjdHVyZXJcIl0sWzUyLFwiRGV2aWNlTW9kZWxcIl0sWzU2LFwiRGV2aWNlQXR0cmlidXRlc1wiXSxbNjQsXCJSZW5kZXJpbmdJbnRlbnRcIl0sWzY4LFwiQ29ubmVjdGlvblNwYWNlSWxsdW1pbmFudFwiXSxbODAsXCJQcm9maWxlQ3JlYXRvclwiXSxbODQsXCJQcm9maWxlSURcIl0sW1wiSGVhZGVyXCIsXCJQcm9maWxlSGVhZGVyXCJdLFtcIk1TMDBcIixcIldDU1Byb2ZpbGVzXCJdLFtcImJUUkNcIixcIkJsdWVUUkNcIl0sW1wiYlhZWlwiLFwiQmx1ZU1hdHJpeENvbHVtblwiXSxbXCJiZmRcIixcIlVDUkJHXCJdLFtcImJrcHRcIixcIk1lZGlhQmxhY2tQb2ludFwiXSxbXCJjYWx0XCIsXCJDYWxpYnJhdGlvbkRhdGVUaW1lXCJdLFtcImNoYWRcIixcIkNocm9tYXRpY0FkYXB0YXRpb25cIl0sW1wiY2hybVwiLFwiQ2hyb21hdGljaXR5XCJdLFtcImNpaXNcIixcIkNvbG9yaW1ldHJpY0ludGVudEltYWdlU3RhdGVcIl0sW1wiY2xvdFwiLFwiQ29sb3JhbnRUYWJsZU91dFwiXSxbXCJjbHJvXCIsXCJDb2xvcmFudE9yZGVyXCJdLFtcImNscnRcIixcIkNvbG9yYW50VGFibGVcIl0sW1wiY3BydFwiLFwiUHJvZmlsZUNvcHlyaWdodFwiXSxbXCJjcmRpXCIsXCJDUkRJbmZvXCJdLFtcImRlc2NcIixcIlByb2ZpbGVEZXNjcmlwdGlvblwiXSxbXCJkZXZzXCIsXCJEZXZpY2VTZXR0aW5nc1wiXSxbXCJkbWRkXCIsXCJEZXZpY2VNb2RlbERlc2NcIl0sW1wiZG1uZFwiLFwiRGV2aWNlTWZnRGVzY1wiXSxbXCJkc2NtXCIsXCJQcm9maWxlRGVzY3JpcHRpb25NTFwiXSxbXCJmcGNlXCIsXCJGb2NhbFBsYW5lQ29sb3JpbWV0cnlFc3RpbWF0ZXNcIl0sW1wiZ1RSQ1wiLFwiR3JlZW5UUkNcIl0sW1wiZ1hZWlwiLFwiR3JlZW5NYXRyaXhDb2x1bW5cIl0sW1wiZ2FtdFwiLFwiR2FtdXRcIl0sW1wia1RSQ1wiLFwiR3JheVRSQ1wiXSxbXCJsdW1pXCIsXCJMdW1pbmFuY2VcIl0sW1wibWVhc1wiLFwiTWVhc3VyZW1lbnRcIl0sW1wibWV0YVwiLFwiTWV0YWRhdGFcIl0sW1wibW1vZFwiLFwiTWFrZUFuZE1vZGVsXCJdLFtcIm5jbDJcIixcIk5hbWVkQ29sb3IyXCJdLFtcIm5jb2xcIixcIk5hbWVkQ29sb3JcIl0sW1wibmRpblwiLFwiTmF0aXZlRGlzcGxheUluZm9cIl0sW1wicHJlMFwiLFwiUHJldmlldzBcIl0sW1wicHJlMVwiLFwiUHJldmlldzFcIl0sW1wicHJlMlwiLFwiUHJldmlldzJcIl0sW1wicHMyaVwiLFwiUFMyUmVuZGVyaW5nSW50ZW50XCJdLFtcInBzMnNcIixcIlBvc3RTY3JpcHQyQ1NBXCJdLFtcInBzZDBcIixcIlBvc3RTY3JpcHQyQ1JEMFwiXSxbXCJwc2QxXCIsXCJQb3N0U2NyaXB0MkNSRDFcIl0sW1wicHNkMlwiLFwiUG9zdFNjcmlwdDJDUkQyXCJdLFtcInBzZDNcIixcIlBvc3RTY3JpcHQyQ1JEM1wiXSxbXCJwc2VxXCIsXCJQcm9maWxlU2VxdWVuY2VEZXNjXCJdLFtcInBzaWRcIixcIlByb2ZpbGVTZXF1ZW5jZUlkZW50aWZpZXJcIl0sW1wicHN2bVwiLFwiUFMyQ1JEVk1TaXplXCJdLFtcInJUUkNcIixcIlJlZFRSQ1wiXSxbXCJyWFlaXCIsXCJSZWRNYXRyaXhDb2x1bW5cIl0sW1wicmVzcFwiLFwiT3V0cHV0UmVzcG9uc2VcIl0sW1wicmhvY1wiLFwiUmVmbGVjdGlvbkhhcmRjb3B5T3JpZ0NvbG9yaW1ldHJ5XCJdLFtcInJpZzBcIixcIlBlcmNlcHR1YWxSZW5kZXJpbmdJbnRlbnRHYW11dFwiXSxbXCJyaWcyXCIsXCJTYXR1cmF0aW9uUmVuZGVyaW5nSW50ZW50R2FtdXRcIl0sW1wicnBvY1wiLFwiUmVmbGVjdGlvblByaW50T3V0cHV0Q29sb3JpbWV0cnlcIl0sW1wic2FwZVwiLFwiU2NlbmVBcHBlYXJhbmNlRXN0aW1hdGVzXCJdLFtcInNjb2VcIixcIlNjZW5lQ29sb3JpbWV0cnlFc3RpbWF0ZXNcIl0sW1wic2NyZFwiLFwiU2NyZWVuaW5nRGVzY1wiXSxbXCJzY3JuXCIsXCJTY3JlZW5pbmdcIl0sW1widGFyZ1wiLFwiQ2hhclRhcmdldFwiXSxbXCJ0ZWNoXCIsXCJUZWNobm9sb2d5XCJdLFtcInZjZ3RcIixcIlZpZGVvQ2FyZEdhbW1hXCJdLFtcInZpZXdcIixcIlZpZXdpbmdDb25kaXRpb25zXCJdLFtcInZ1ZWRcIixcIlZpZXdpbmdDb25kRGVzY1wiXSxbXCJ3dHB0XCIsXCJNZWRpYVdoaXRlUG9pbnRcIl1dKTtjb25zdCBTdD17XCI0ZDJwXCI6XCJFcmR0IFN5c3RlbXNcIixBQU1BOlwiQWFtYXppbmcgVGVjaG5vbG9naWVzXCIsQUNFUjpcIkFjZXJcIixBQ0xUOlwiQWNvbHl0ZSBDb2xvciBSZXNlYXJjaFwiLEFDVEk6XCJBY3RpeCBTeXRlbXNcIixBREFSOlwiQWRhcmEgVGVjaG5vbG9neVwiLEFEQkU6XCJBZG9iZVwiLEFESTpcIkFESSBTeXN0ZW1zXCIsQUdGQTpcIkFnZmEgR3JhcGhpY3NcIixBTE1EOlwiQWxwcyBFbGVjdHJpY1wiLEFMUFM6XCJBbHBzIEVsZWN0cmljXCIsQUxXTjpcIkFsd2FuIENvbG9yIEV4cGVydGlzZVwiLEFNVEk6XCJBbWlhYmxlIFRlY2hub2xvZ2llc1wiLEFPQzpcIkFPQyBJbnRlcm5hdGlvbmFsXCIsQVBBRzpcIkFwYWdvXCIsQVBQTDpcIkFwcGxlIENvbXB1dGVyXCIsQVNUOlwiQVNUXCIsXCJBVCZUXCI6XCJBVCZUXCIsQkFFTDpcIkJBUkJJRVJJIGVsZWN0cm9uaWNcIixCUkNPOlwiQmFyY28gTlZcIixCUktQOlwiQnJlYWtwb2ludFwiLEJST1Q6XCJCcm90aGVyXCIsQlVMTDpcIkJ1bGxcIixCVVM6XCJCdXMgQ29tcHV0ZXIgU3lzdGVtc1wiLFwiQy1JVFwiOlwiQy1JdG9oXCIsQ0FNUjpcIkludGVsXCIsQ0FOTzpcIkNhbm9uXCIsQ0FSUjpcIkNhcnJvbGwgVG91Y2hcIixDQVNJOlwiQ2FzaW9cIixDQlVTOlwiQ29sb3JidXMgUExcIixDRUw6XCJDcm9zc2ZpZWxkXCIsQ0VMeDpcIkNyb3NzZmllbGRcIixDR1M6XCJDR1MgUHVibGlzaGluZyBUZWNobm9sb2dpZXMgSW50ZXJuYXRpb25hbFwiLENITTpcIlJvY2hlc3RlciBSb2JvdGljc1wiLENJR0w6XCJDb2xvdXIgSW1hZ2luZyBHcm91cCwgTG9uZG9uXCIsQ0lUSTpcIkNpdGl6ZW5cIixDTDAwOlwiQ2FuZGVsYVwiLENMSVE6XCJDb2xvciBJUVwiLENNQ086XCJDaHJvbWFjb1wiLENNaVg6XCJDSFJPTWlYXCIsQ09MTzpcIkNvbG9yZ3JhcGhpYyBDb21tdW5pY2F0aW9uc1wiLENPTVA6XCJDb21wYXFcIixDT01wOlwiQ29tcGVxL0ZvY3VzIFRlY2hub2xvZ3lcIixDT05SOlwiQ29ucmFjIERpc3BsYXkgUHJvZHVjdHNcIixDT1JEOlwiQ29yZGF0YSBUZWNobm9sb2dpZXNcIixDUFE6XCJDb21wYXFcIixDUFJPOlwiQ29sb3JQcm9cIixDUk46XCJDb3JuZXJzdG9uZVwiLENUWDpcIkNUWCBJbnRlcm5hdGlvbmFsXCIsQ1ZJUzpcIkNvbG9yVmlzaW9uXCIsQ1dDOlwiRnVqaXRzdSBMYWJvcmF0b3JpZXNcIixEQVJJOlwiRGFyaXVzIFRlY2hub2xvZ3lcIixEQVRBOlwiRGF0YXByb2R1Y3RzXCIsRENQOlwiRHJ5IENyZWVrIFBob3RvXCIsRENSQzpcIkRpZ2l0YWwgQ29udGVudHMgUmVzb3VyY2UgQ2VudGVyLCBDaHVuZy1BbmcgVW5pdmVyc2l0eVwiLERFTEw6XCJEZWxsIENvbXB1dGVyXCIsRElDOlwiRGFpbmlwcG9uIEluayBhbmQgQ2hlbWljYWxzXCIsRElDTzpcIkRpY29uaXhcIixESUdJOlwiRGlnaXRhbFwiLFwiREwmQ1wiOlwiRGlnaXRhbCBMaWdodCAmIENvbG9yXCIsRFBMRzpcIkRvcHBlbGdhbmdlclwiLERTOlwiRGFpbmlwcG9uIFNjcmVlblwiLERTT0w6XCJET09TT0xcIixEVVBOOlwiRHVQb250XCIsRVBTTzpcIkVwc29uXCIsRVNLTzpcIkVza28tR3JhcGhpY3NcIixFVFJJOlwiRWxlY3Ryb25pY3MgYW5kIFRlbGVjb21tdW5pY2F0aW9ucyBSZXNlYXJjaCBJbnN0aXR1dGVcIixFVkVSOlwiRXZlcmV4IFN5c3RlbXNcIixFWEFDOlwiRXhhY3RDT0RFXCIsRWl6bzpcIkVpem9cIixGQUxDOlwiRmFsY28gRGF0YSBQcm9kdWN0c1wiLEZGOlwiRnVqaSBQaG90byBGaWxtXCIsRkZFSTpcIkZ1amlGaWxtIEVsZWN0cm9uaWMgSW1hZ2luZ1wiLEZOUkQ6XCJGbm9yZCBTb2Z0d2FyZVwiLEZPUkE6XCJGb3JhXCIsRk9SRTpcIkZvcmVmcm9udCBUZWNobm9sb2d5XCIsRlA6XCJGdWppdHN1XCIsRlBBOlwiV2F5VGVjaCBEZXZlbG9wbWVudFwiLEZVSkk6XCJGdWppdHN1XCIsRlg6XCJGdWppIFhlcm94XCIsR0NDOlwiR0NDIFRlY2hub2xvZ2llc1wiLEdHU0w6XCJHbG9iYWwgR3JhcGhpY3MgU29mdHdhcmVcIixHTUI6XCJHcmV0YWdtYWNiZXRoXCIsR01HOlwiR01HXCIsR09MRDpcIkdvbGRTdGFyIFRlY2hub2xvZ3lcIixHT09HOlwiR29vZ2xlXCIsR1BSVDpcIkdpYW50cHJpbnRcIixHVE1COlwiR3JldGFnbWFjYmV0aFwiLEdWQzpcIldheVRlY2ggRGV2ZWxvcG1lbnRcIixHVzJLOlwiU29ueVwiLEhDSTpcIkhDSVwiLEhETTpcIkhlaWRlbGJlcmdlciBEcnVja21hc2NoaW5lblwiLEhFUk06XCJIZXJtZXNcIixISVRBOlwiSGl0YWNoaSBBbWVyaWNhXCIsSFA6XCJIZXdsZXR0LVBhY2thcmRcIixIVEM6XCJIaXRhY2hpXCIsSGlUaTpcIkhpVGkgRGlnaXRhbFwiLElCTTpcIklCTVwiLElETlQ6XCJTY2l0ZXhcIixJRUM6XCJIZXdsZXR0LVBhY2thcmRcIixJSVlBOlwiSWl5YW1hIE5vcnRoIEFtZXJpY2FcIixJS0VHOlwiSWtlZ2FtaSBFbGVjdHJvbmljc1wiLElNQUc6XCJJbWFnZSBTeXN0ZW1zXCIsSU1JOlwiSW5ncmFtIE1pY3JvXCIsSU5UQzpcIkludGVsXCIsSU5UTDpcIk4vQSAoSU5UTClcIixJTlRSOlwiSW50cmEgRWxlY3Ryb25pY3NcIixJT0NPOlwiSW9jb21tIEludGVybmF0aW9uYWwgVGVjaG5vbG9neVwiLElQUzpcIkluZm9QcmludCBTb2x1dGlvbnMgQ29tcGFueVwiLElSSVM6XCJTY2l0ZXhcIixJU0w6XCJJY2hpa2F3YSBTb2Z0IExhYm9yYXRvcnlcIixJVE5MOlwiTi9BIChJVE5MKVwiLElWTTpcIklWTVwiLElXQVQ6XCJJd2F0c3UgRWxlY3RyaWNcIixJZG50OlwiU2NpdGV4XCIsSW5jYTpcIkluY2EgRGlnaXRhbCBQcmludGVyc1wiLElyaXM6XCJTY2l0ZXhcIixKUEVHOlwiSm9pbnQgUGhvdG9ncmFwaGljIEV4cGVydHMgR3JvdXBcIixKU0ZUOlwiSmV0c29mdCBEZXZlbG9wbWVudFwiLEpWQzpcIkpWQyBJbmZvcm1hdGlvbiBQcm9kdWN0c1wiLEtBUlQ6XCJTY2l0ZXhcIixLRkM6XCJLRkMgQ29tcHV0ZWsgQ29tcG9uZW50c1wiLEtMSDpcIktMSCBDb21wdXRlcnNcIixLTUhEOlwiS29uaWNhIE1pbm9sdGFcIixLTkNBOlwiS29uaWNhXCIsS09EQTpcIktvZGFrXCIsS1lPQzpcIkt5b2NlcmFcIixLYXJ0OlwiU2NpdGV4XCIsTENBRzpcIkxlaWNhXCIsTENDRDpcIkxlZWRzIENvbG91clwiLExEQUs6XCJMZWZ0IERha290YVwiLExFQUQ6XCJMZWFkaW5nIFRlY2hub2xvZ3lcIixMRVhNOlwiTGV4bWFyayBJbnRlcm5hdGlvbmFsXCIsTElOSzpcIkxpbmsgQ29tcHV0ZXJcIixMSU5POlwiTGlub3Ryb25pY1wiLExJVEU6XCJMaXRlLU9uXCIsTGVhZjpcIkxlYWZcIixMaW5vOlwiTGlub3Ryb25pY1wiLE1BR0M6XCJNYWcgQ29tcHV0cm9uaWNcIixNQUdJOlwiTUFHIElubm92aXNpb25cIixNQU5OOlwiTWFubmVzbWFublwiLE1JQ046XCJNaWNyb24gVGVjaG5vbG9neVwiLE1JQ1I6XCJNaWNyb3Rla1wiLE1JQ1Y6XCJNaWNyb3ZpdGVjXCIsTUlOTzpcIk1pbm9sdGFcIixNSVRTOlwiTWl0c3ViaXNoaSBFbGVjdHJvbmljcyBBbWVyaWNhXCIsTUlUczpcIk1pdHN1YmFcIixNTkxUOlwiTWlub2x0YVwiLE1PREc6XCJNb2RncmFwaFwiLE1PTkk6XCJNb25pdHJvbml4XCIsTU9OUzpcIk1vbmFjbyBTeXN0ZW1zXCIsTU9SUzpcIk1vcnNlIFRlY2hub2xvZ3lcIixNT1RJOlwiTW90aXZlIFN5c3RlbXNcIixNU0ZUOlwiTWljcm9zb2Z0XCIsTVVUTzpcIk1VVE9IIElORFVTVFJJRVNcIixNaXRzOlwiTWl0c3ViaXNoaSBFbGVjdHJpY1wiLE5BTkE6XCJOQU5BT1wiLE5FQzpcIk5FQ1wiLE5FWFA6XCJOZXhQcmVzcyBTb2x1dGlvbnNcIixOSVNTOlwiTmlzc2VpIFNhbmd5byBBbWVyaWNhXCIsTktPTjpcIk5pa29uXCIsTk9ORTpcIm5vbmVcIixPQ0U6XCJPY2UgVGVjaG5vbG9naWVzXCIsT0NFQzpcIk9jZUNvbG9yXCIsT0tJOlwiT2tpXCIsT0tJRDpcIk9raWRhdGFcIixPS0lQOlwiT2tpZGF0YVwiLE9MSVY6XCJPbGl2ZXR0aVwiLE9MWU06XCJPbHltcHVzXCIsT05ZWDpcIk9ueXggR3JhcGhpY3NcIixPUFRJOlwiT3B0aXF1ZXN0XCIsUEFDSzpcIlBhY2thcmQgQmVsbFwiLFBBTkE6XCJNYXRzdXNoaXRhIEVsZWN0cmljIEluZHVzdHJpYWxcIixQQU5UOlwiUGFudG9uZVwiLFBCTjpcIlBhY2thcmQgQmVsbFwiLFBGVTpcIlBGVVwiLFBISUw6XCJQaGlsaXBzIENvbnN1bWVyIEVsZWN0cm9uaWNzXCIsUE5UWDpcIkhPWUFcIixQT25lOlwiUGhhc2UgT25lIEEvU1wiLFBSRU06XCJQcmVtaWVyIENvbXB1dGVyIElubm92YXRpb25zXCIsUFJJTjpcIlByaW5jZXRvbiBHcmFwaGljIFN5c3RlbXNcIixQUklQOlwiUHJpbmNldG9uIFB1Ymxpc2hpbmcgTGFic1wiLFFMVVg6XCJIb25nIEtvbmdcIixRTVM6XCJRTVNcIixRUENEOlwiUVBjYXJkIEFCXCIsUVVBRDpcIlF1YWRMYXNlclwiLFFVTUU6XCJRdW1lXCIsUkFESTpcIlJhZGl1c1wiLFJERHg6XCJJbnRlZ3JhdGVkIENvbG9yIFNvbHV0aW9uc1wiLFJERzpcIlJvbGFuZCBER1wiLFJFRE06XCJSRURNUyBHcm91cFwiLFJFTEk6XCJSZWxpc3lzXCIsUkdNUzpcIlJvbGYgR2llcmxpbmcgTXVsdGl0b29sc1wiLFJJQ086XCJSaWNvaFwiLFJOTEQ6XCJFZG11bmQgUm9uYWxkXCIsUk9ZQTpcIlJveWFsXCIsUlBDOlwiUmljb2ggUHJpbnRpbmcgU3lzdGVtc1wiLFJUTDpcIlJveWFsIEluZm9ybWF0aW9uIEVsZWN0cm9uaWNzXCIsU0FNUDpcIlNhbXBvXCIsU0FNUzpcIlNhbXN1bmdcIixTQU5UOlwiSmFpbWUgU2FudGFuYSBQb21hcmVzXCIsU0NJVDpcIlNjaXRleFwiLFNDUk46XCJEYWluaXBwb24gU2NyZWVuXCIsU0RQOlwiU2NpdGV4XCIsU0VDOlwiU2Ftc3VuZ1wiLFNFSUs6XCJTZWlrbyBJbnN0cnVtZW50c1wiLFNFSWs6XCJTZWlrb3NoYVwiLFNHVVk6XCJTY2FuR3V5LmNvbVwiLFNIQVI6XCJTaGFycCBMYWJvcmF0b3JpZXNcIixTSUNDOlwiSW50ZXJuYXRpb25hbCBDb2xvciBDb25zb3J0aXVtXCIsU09OWTpcIlNvbnlcIixTUENMOlwiU3BlY3RyYUNhbFwiLFNUQVI6XCJTdGFyXCIsU1RDOlwiU2FtcG8gVGVjaG5vbG9neVwiLFNjaXQ6XCJTY2l0ZXhcIixTZHA6XCJTY2l0ZXhcIixTb255OlwiU29ueVwiLFRBTE86XCJUYWxvbiBUZWNobm9sb2d5XCIsVEFORDpcIlRhbmR5XCIsVEFUVTpcIlRhdHVuZ1wiLFRBWEE6XCJUQVhBTiBBbWVyaWNhXCIsVERTOlwiVG9reW8gRGVuc2hpIFNla2VpXCIsVEVDTzpcIlRFQ08gSW5mb3JtYXRpb24gU3lzdGVtc1wiLFRFR1I6XCJUZWdyYVwiLFRFS1Q6XCJUZWt0cm9uaXhcIixUSTpcIlRleGFzIEluc3RydW1lbnRzXCIsVE1LUjpcIlR5cGVNYWtlclwiLFRPU0I6XCJUb3NoaWJhXCIsVE9TSDpcIlRvc2hpYmFcIixUT1RLOlwiVE9UT0tVIEVMRUNUUklDXCIsVFJJVTpcIlRyaXVtcGhcIixUU0JUOlwiVG9zaGliYVwiLFRUWDpcIlRUWCBDb21wdXRlciBQcm9kdWN0c1wiLFRWTTpcIlRWTSBQcm9mZXNzaW9uYWwgTW9uaXRvclwiLFRXOlwiVFcgQ2FzcGVyXCIsVUxTWDpcIlVsZWFkIFN5c3RlbXNcIixVTklTOlwiVW5pc3lzXCIsVVRaRjpcIlV0eiBGZWhsYXUgJiBTb2huXCIsVkFSSTpcIlZhcml0eXBlclwiLFZJRVc6XCJWaWV3c29uaWNcIixWSVNMOlwiVmlzdWFsIGNvbW11bmljYXRpb25cIixWSVZPOlwiVml2byBNb2JpbGUgQ29tbXVuaWNhdGlvblwiLFdBTkc6XCJXYW5nXCIsV0xCUjpcIldpbGJ1ciBJbWFnaW5nXCIsV1RHMjpcIldhcmUgVG8gR29cIixXWVNFOlwiV1lTRSBUZWNobm9sb2d5XCIsWEVSWDpcIlhlcm94XCIsWFJJVDpcIlgtUml0ZVwiLFpSQU46XCJab3JhblwiLFplYnI6XCJaZWJyYSBUZWNobm9sb2dpZXNcIixhcHBsOlwiQXBwbGUgQ29tcHV0ZXJcIixiSUNDOlwiYmFzSUNDb2xvclwiLGJlcmc6XCJiZXJnZGVzaWduXCIsY2V5ZDpcIkludGVncmF0ZWQgQ29sb3IgU29sdXRpb25zXCIsY2xzcDpcIk1hY0Rlcm1pZCBDb2xvclNwYW5cIixkczpcIkRhaW5pcHBvbiBTY3JlZW5cIixkdXBuOlwiRHVQb250XCIsZmZlaTpcIkZ1amlGaWxtIEVsZWN0cm9uaWMgSW1hZ2luZ1wiLGZsdXg6XCJGbHV4RGF0YVwiLGlyaXM6XCJTY2l0ZXhcIixrYXJ0OlwiU2NpdGV4XCIsbGNtczpcIkxpdHRsZSBDTVNcIixsaW5vOlwiTGlub3Ryb25pY1wiLG5vbmU6XCJub25lXCIsb2I0ZDpcIkVyZHQgU3lzdGVtc1wiLG9iaWM6XCJNZWRpZ3JhcGhcIixxdWJ5OlwiUXVieXggU2FybFwiLHNjaXQ6XCJTY2l0ZXhcIixzY3JuOlwiRGFpbmlwcG9uIFNjcmVlblwiLHNkcDpcIlNjaXRleFwiLHNpd2k6XCJTSVdJIEdSQUZJS0FcIix5eHltOlwiWXh5TWFzdGVyXCJ9LEN0PXtzY25yOlwiU2Nhbm5lclwiLG1udHI6XCJNb25pdG9yXCIscHJ0cjpcIlByaW50ZXJcIixsaW5rOlwiRGV2aWNlIExpbmtcIixhYnN0OlwiQWJzdHJhY3RcIixzcGFjOlwiQ29sb3IgU3BhY2UgQ29udmVyc2lvbiBQcm9maWxlXCIsbm1jbDpcIk5hbWVkIENvbG9yXCIsY2VuYzpcIkNvbG9yRW5jb2RpbmdTcGFjZSBwcm9maWxlXCIsbWlkOlwiTXVsdGlwbGV4SWRlbnRpZmljYXRpb24gcHJvZmlsZVwiLG1sbms6XCJNdWx0aXBsZXhMaW5rIHByb2ZpbGVcIixtdmlzOlwiTXVsdGlwbGV4VmlzdWFsaXphdGlvbiBwcm9maWxlXCIsbmtwZjpcIk5pa29uIElucHV0IERldmljZSBQcm9maWxlIChOT04tU1RBTkRBUkQhKVwifTtVKEIsXCJpY2NcIixbWzQsU3RdLFsxMixDdF0sWzQwLE9iamVjdC5hc3NpZ24oe30sU3QsQ3QpXSxbNDgsU3RdLFs4MCxTdF0sWzY0LHswOlwiUGVyY2VwdHVhbFwiLDE6XCJSZWxhdGl2ZSBDb2xvcmltZXRyaWNcIiwyOlwiU2F0dXJhdGlvblwiLDM6XCJBYnNvbHV0ZSBDb2xvcmltZXRyaWNcIn1dLFtcInRlY2hcIix7YW1kOlwiQWN0aXZlIE1hdHJpeCBEaXNwbGF5XCIsY3J0OlwiQ2F0aG9kZSBSYXkgVHViZSBEaXNwbGF5XCIsa3BjZDpcIlBob3RvIENEXCIscG1kOlwiUGFzc2l2ZSBNYXRyaXggRGlzcGxheVwiLGRjYW06XCJEaWdpdGFsIENhbWVyYVwiLGRjcGo6XCJEaWdpdGFsIENpbmVtYSBQcm9qZWN0b3JcIixkbXBjOlwiRGlnaXRhbCBNb3Rpb24gUGljdHVyZSBDYW1lcmFcIixkc3ViOlwiRHllIFN1YmxpbWF0aW9uIFByaW50ZXJcIixlcGhvOlwiRWxlY3Ryb3Bob3RvZ3JhcGhpYyBQcmludGVyXCIsZXN0YTpcIkVsZWN0cm9zdGF0aWMgUHJpbnRlclwiLGZsZXg6XCJGbGV4b2dyYXBoeVwiLGZwcm46XCJGaWxtIFdyaXRlclwiLGZzY246XCJGaWxtIFNjYW5uZXJcIixncmF2OlwiR3JhdnVyZVwiLGlqZXQ6XCJJbmsgSmV0IFByaW50ZXJcIixpbWdzOlwiUGhvdG8gSW1hZ2UgU2V0dGVyXCIsbXBmcjpcIk1vdGlvbiBQaWN0dXJlIEZpbG0gUmVjb3JkZXJcIixtcGZzOlwiTW90aW9uIFBpY3R1cmUgRmlsbSBTY2FubmVyXCIsb2ZmczpcIk9mZnNldCBMaXRob2dyYXBoeVwiLHBqdHY6XCJQcm9qZWN0aW9uIFRlbGV2aXNpb25cIixycGhvOlwiUGhvdG9ncmFwaGljIFBhcGVyIFByaW50ZXJcIixyc2NuOlwiUmVmbGVjdGl2ZSBTY2FubmVyXCIsc2lsazpcIlNpbGtzY3JlZW5cIix0d2F4OlwiVGhlcm1hbCBXYXggUHJpbnRlclwiLHZpZGM6XCJWaWRlbyBDYW1lcmFcIix2aWRtOlwiVmlkZW8gTW9uaXRvclwifV1dKTtjbGFzcyB5dCBleHRlbmRzIHJle3N0YXRpYyBjYW5IYW5kbGUoZSx0LGkpe3JldHVybiAyMzc9PT1lLmdldFVpbnQ4KHQrMSkmJlwiUGhvdG9zaG9wXCI9PT1lLmdldFN0cmluZyh0KzQsOSkmJnZvaWQgMCE9PXRoaXMuY29udGFpbnNJcHRjOGJpbShlLHQsaSl9c3RhdGljIGhlYWRlckxlbmd0aChlLHQsaSl7bGV0IG4scz10aGlzLmNvbnRhaW5zSXB0YzhiaW0oZSx0LGkpO2lmKHZvaWQgMCE9PXMpcmV0dXJuIG49ZS5nZXRVaW50OCh0K3MrNyksbiUyIT0wJiYobis9MSksMD09PW4mJihuPTQpLHMrOCtufXN0YXRpYyBjb250YWluc0lwdGM4YmltKGUsdCxpKXtmb3IobGV0IG49MDtuPGk7bisrKWlmKHRoaXMuaXNJcHRjU2VnbWVudEhlYWQoZSx0K24pKXJldHVybiBufXN0YXRpYyBpc0lwdGNTZWdtZW50SGVhZChlLHQpe3JldHVybiA1Nj09PWUuZ2V0VWludDgodCkmJjk0Mzg2ODIzNz09PWUuZ2V0VWludDMyKHQpJiYxMDI4PT09ZS5nZXRVaW50MTYodCs0KX1wYXJzZSgpe2xldHtyYXc6ZX09dGhpcyx0PXRoaXMuY2h1bmsuYnl0ZUxlbmd0aC0xLGk9ITE7Zm9yKGxldCBuPTA7bjx0O24rKylpZigyOD09PXRoaXMuY2h1bmsuZ2V0VWludDgobikmJjI9PT10aGlzLmNodW5rLmdldFVpbnQ4KG4rMSkpe2k9ITA7bGV0IHQ9dGhpcy5jaHVuay5nZXRVaW50MTYobiszKSxzPXRoaXMuY2h1bmsuZ2V0VWludDgobisyKSxyPXRoaXMuY2h1bmsuZ2V0TGF0aW4xU3RyaW5nKG4rNSx0KTtlLnNldChzLHRoaXMucGx1cmFsaXplVmFsdWUoZS5nZXQocykscikpLG4rPTQrdH1lbHNlIGlmKGkpYnJlYWs7cmV0dXJuIHRoaXMudHJhbnNsYXRlKCksdGhpcy5vdXRwdXR9cGx1cmFsaXplVmFsdWUoZSx0KXtyZXR1cm4gdm9pZCAwIT09ZT9lIGluc3RhbmNlb2YgQXJyYXk/KGUucHVzaCh0KSxlKTpbZSx0XTp0fX1jKHl0LFwidHlwZVwiLFwiaXB0Y1wiKSxjKHl0LFwidHJhbnNsYXRlVmFsdWVzXCIsITEpLGMoeXQsXCJyZXZpdmVWYWx1ZXNcIiwhMSksVC5zZXQoXCJpcHRjXCIseXQpLFUoRSxcImlwdGNcIixbWzAsXCJBcHBsaWNhdGlvblJlY29yZFZlcnNpb25cIl0sWzMsXCJPYmplY3RUeXBlUmVmZXJlbmNlXCJdLFs0LFwiT2JqZWN0QXR0cmlidXRlUmVmZXJlbmNlXCJdLFs1LFwiT2JqZWN0TmFtZVwiXSxbNyxcIkVkaXRTdGF0dXNcIl0sWzgsXCJFZGl0b3JpYWxVcGRhdGVcIl0sWzEwLFwiVXJnZW5jeVwiXSxbMTIsXCJTdWJqZWN0UmVmZXJlbmNlXCJdLFsxNSxcIkNhdGVnb3J5XCJdLFsyMCxcIlN1cHBsZW1lbnRhbENhdGVnb3JpZXNcIl0sWzIyLFwiRml4dHVyZUlkZW50aWZpZXJcIl0sWzI1LFwiS2V5d29yZHNcIl0sWzI2LFwiQ29udGVudExvY2F0aW9uQ29kZVwiXSxbMjcsXCJDb250ZW50TG9jYXRpb25OYW1lXCJdLFszMCxcIlJlbGVhc2VEYXRlXCJdLFszNSxcIlJlbGVhc2VUaW1lXCJdLFszNyxcIkV4cGlyYXRpb25EYXRlXCJdLFszOCxcIkV4cGlyYXRpb25UaW1lXCJdLFs0MCxcIlNwZWNpYWxJbnN0cnVjdGlvbnNcIl0sWzQyLFwiQWN0aW9uQWR2aXNlZFwiXSxbNDUsXCJSZWZlcmVuY2VTZXJ2aWNlXCJdLFs0NyxcIlJlZmVyZW5jZURhdGVcIl0sWzUwLFwiUmVmZXJlbmNlTnVtYmVyXCJdLFs1NSxcIkRhdGVDcmVhdGVkXCJdLFs2MCxcIlRpbWVDcmVhdGVkXCJdLFs2MixcIkRpZ2l0YWxDcmVhdGlvbkRhdGVcIl0sWzYzLFwiRGlnaXRhbENyZWF0aW9uVGltZVwiXSxbNjUsXCJPcmlnaW5hdGluZ1Byb2dyYW1cIl0sWzcwLFwiUHJvZ3JhbVZlcnNpb25cIl0sWzc1LFwiT2JqZWN0Q3ljbGVcIl0sWzgwLFwiQnlsaW5lXCJdLFs4NSxcIkJ5bGluZVRpdGxlXCJdLFs5MCxcIkNpdHlcIl0sWzkyLFwiU3VibG9jYXRpb25cIl0sWzk1LFwiU3RhdGVcIl0sWzEwMCxcIkNvdW50cnlDb2RlXCJdLFsxMDEsXCJDb3VudHJ5XCJdLFsxMDMsXCJPcmlnaW5hbFRyYW5zbWlzc2lvblJlZmVyZW5jZVwiXSxbMTA1LFwiSGVhZGxpbmVcIl0sWzExMCxcIkNyZWRpdFwiXSxbMTE1LFwiU291cmNlXCJdLFsxMTYsXCJDb3B5cmlnaHROb3RpY2VcIl0sWzExOCxcIkNvbnRhY3RcIl0sWzEyMCxcIkNhcHRpb25cIl0sWzEyMSxcIkxvY2FsQ2FwdGlvblwiXSxbMTIyLFwiV3JpdGVyXCJdLFsxMjUsXCJSYXN0ZXJpemVkQ2FwdGlvblwiXSxbMTMwLFwiSW1hZ2VUeXBlXCJdLFsxMzEsXCJJbWFnZU9yaWVudGF0aW9uXCJdLFsxMzUsXCJMYW5ndWFnZUlkZW50aWZpZXJcIl0sWzE1MCxcIkF1ZGlvVHlwZVwiXSxbMTUxLFwiQXVkaW9TYW1wbGluZ1JhdGVcIl0sWzE1MixcIkF1ZGlvU2FtcGxpbmdSZXNvbHV0aW9uXCJdLFsxNTMsXCJBdWRpb0R1cmF0aW9uXCJdLFsxNTQsXCJBdWRpb091dGN1ZVwiXSxbMTg0LFwiSm9iSURcIl0sWzE4NSxcIk1hc3RlckRvY3VtZW50SURcIl0sWzE4NixcIlNob3J0RG9jdW1lbnRJRFwiXSxbMTg3LFwiVW5pcXVlRG9jdW1lbnRJRFwiXSxbMTg4LFwiT3duZXJJRFwiXSxbMjAwLFwiT2JqZWN0UHJldmlld0ZpbGVGb3JtYXRcIl0sWzIwMSxcIk9iamVjdFByZXZpZXdGaWxlVmVyc2lvblwiXSxbMjAyLFwiT2JqZWN0UHJldmlld0RhdGFcIl0sWzIyMSxcIlByZWZzXCJdLFsyMjUsXCJDbGFzc2lmeVN0YXRlXCJdLFsyMjgsXCJTaW1pbGFyaXR5SW5kZXhcIl0sWzIzMCxcIkRvY3VtZW50Tm90ZXNcIl0sWzIzMSxcIkRvY3VtZW50SGlzdG9yeVwiXSxbMjMyLFwiRXhpZkNhbWVyYUluZm9cIl0sWzI1NSxcIkNhdGFsb2dTZXRzXCJdXSksVShCLFwiaXB0Y1wiLFtbMTAsezA6XCIwIChyZXNlcnZlZClcIiwxOlwiMSAobW9zdCB1cmdlbnQpXCIsMjpcIjJcIiwzOlwiM1wiLDQ6XCI0XCIsNTpcIjUgKG5vcm1hbCB1cmdlbmN5KVwiLDY6XCI2XCIsNzpcIjdcIiw4OlwiOCAobGVhc3QgdXJnZW50KVwiLDk6XCI5ICh1c2VyLWRlZmluZWQgcHJpb3JpdHkpXCJ9XSxbNzUse2E6XCJNb3JuaW5nXCIsYjpcIkJvdGggTW9ybmluZyBhbmQgRXZlbmluZ1wiLHA6XCJFdmVuaW5nXCJ9XSxbMTMxLHtMOlwiTGFuZHNjYXBlXCIsUDpcIlBvcnRyYWl0XCIsUzpcIlNxdWFyZVwifV1dKTtleHBvcnQgZGVmYXVsdCB0dDtleHBvcnR7dGUgYXMgRXhpZnIscSBhcyBPcHRpb25zLFggYXMgYWxsRm9ybWF0dGVycyxHIGFzIGNodW5rZWRQcm9wcyxVIGFzIGNyZWF0ZURpY3Rpb25hcnksRiBhcyBleHRlbmREaWN0aW9uYXJ5LE0gYXMgZmV0Y2hVcmxBc0FycmF5QnVmZmVyLHcgYXMgZmlsZVBhcnNlcnMsQSBhcyBmaWxlUmVhZGVycyxTZSBhcyBncHMsbWUgYXMgZ3BzT25seU9wdGlvbnMsSyBhcyBpbmhlcml0YWJsZXMsUGUgYXMgb3JpZW50YXRpb24sSWUgYXMgb3JpZW50YXRpb25Pbmx5T3B0aW9ucyxWIGFzIG90aGVyU2VnbWVudHMsaWUgYXMgcGFyc2UsUiBhcyByZWFkQmxvYkFzQXJyYXlCdWZmZXIsd2UgYXMgcm90YXRlQ2FudmFzLFRlIGFzIHJvdGF0ZUNzcyxBZSBhcyByb3RhdGlvbixrZSBhcyByb3RhdGlvbnMsVCBhcyBzZWdtZW50UGFyc2Vycyx6IGFzIHNlZ21lbnRzLGogYXMgc2VnbWVudHNBbmRCbG9ja3Msc3QgYXMgc2lkZWNhcixFIGFzIHRhZ0tleXMsTiBhcyB0YWdSZXZpdmVycyxCIGFzIHRhZ1ZhbHVlcyx5ZSBhcyB0aHVtYm5haWwsQ2UgYXMgdGh1bWJuYWlsT25seU9wdGlvbnMsYmUgYXMgdGh1bWJuYWlsVXJsLEggYXMgdGlmZkJsb2NrcyxXIGFzIHRpZmZFeHRyYWN0YWJsZXN9O1xuIl0sIm5hbWVzIjpbImUiLCJzZWxmIiwiZ2xvYmFsIiwidCIsIm5hdmlnYXRvciIsImkiLCJIVE1MSW1hZ2VFbGVtZW50IiwibiIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJzIiwiQnVmZmVyIiwiciIsIkJpZ0ludCIsImEiLCJvIiwibCIsInJlcXVpcmUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJjb25zb2xlIiwid2FybiIsImgiLCJmZXRjaCIsInUiLCJoZWFkZXJzIiwicG9ydCIsImhvc3RuYW1lIiwicGF0aG5hbWUiLCJwcm90b2NvbCIsInNlYXJjaCIsImMiLCJVUkwiLCJmIiwibWV0aG9kIiwicGF0aCIsImVuY29kZVVSSSIsIk51bWJlciIsImQiLCJyZXF1ZXN0Iiwic3RhdHVzQ29kZSIsImxvY2F0aW9uIiwidG9TdHJpbmciLCJjYXRjaCIsInN0YXR1cyIsImFycmF5QnVmZmVyIiwib24iLCJwdXNoIiwiY29uY2F0IiwiZW5kIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInAiLCJNYXAiLCJzaXplIiwidmFsdWVzIiwiZmlsdGVyIiwibGVuZ3RoIiwiZyIsIkVycm9yIiwic3RhY2siLCJtIiwiZW5kc1dpdGgiLCJzbGljZSIsInRyaW0iLCJTIiwiaWZkMCIsImVuYWJsZWQiLCJleGlmIiwibWFrZXJOb3RlIiwidXNlckNvbW1lbnQiLCJncHMiLCJpbnRlcm9wIiwiaWZkMSIsImpmaWYiLCJ4bXAiLCJpcHRjIiwiaWNjIiwiQyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFwcGx5IiwieSIsIlRleHREZWNvZGVyIiwiYiIsImRlY29kZSIsImZyb20iLCJkZWNvZGVVUklDb21wb25lbnQiLCJlc2NhcGUiLCJJIiwibGUiLCJjb25zdHJ1Y3RvciIsIkFycmF5IiwiaXNBcnJheSIsIlVpbnQ4QXJyYXkiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJfc3dhcERhdGFWaWV3IiwiYnVmZmVyIiwiX3N3YXBBcnJheUJ1ZmZlciIsIl9zd2FwQnVmZmVyIiwiZGF0YVZpZXciLCJfbGVuZ3RoVG9FbmQiLCJzZXQiLCJ0b1VpbnQ4Iiwic3ViYXJyYXkiLCJnZXRVaW50OEFycmF5IiwiZ2V0U3RyaW5nIiwiZ2V0TGF0aW4xU3RyaW5nIiwiZ2V0VW5pY29kZVN0cmluZyIsImdldFVpbnQxNiIsImdldEludDgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsImdldEZsb2F0IiwiZ2V0RG91YmxlIiwiZ2V0VWludEJ5dGVzIiwiZ2V0VWludDY0IiwiZ2V0VWludCIsIm5hbWUiLCJlbnN1cmVDaHVuayIsIlAiLCJrIiwia2luZCIsImdldCIsImhhcyIsImtleUxpc3QiLCJrZXlzIiwidyIsIlQiLCJBIiwiRCIsIk8iLCJzcmMiLCJCbG9iIiwieCIsIlIiLCJzdGFydHNXaXRoIiwidiIsImluY2x1ZGVzIiwiTSIsInJlYWQiLCJGaWxlUmVhZGVyIiwib25sb2FkZW5kIiwicmVzdWx0Iiwib25lcnJvciIsInJlYWRBc0FycmF5QnVmZmVyIiwiTCIsInRhZ0tleXMiLCJhbGxLZXlzIiwidGFnVmFsdWVzIiwiYWxsVmFsdWVzIiwiVSIsIkYiLCJFIiwiQiIsIk4iLCJHIiwiViIsInoiLCJIIiwiaiIsIlciLCJLIiwiWCIsIl8iLCJ0cmFuc2xhdGUiLCJ0cmFuc2xhdGVLZXlzIiwidHJhbnNsYXRlVmFsdWVzIiwicmV2aXZlVmFsdWVzIiwiWSIsIm5lZWRlZCIsImRlcHMiLCJTZXQiLCJrZXkiLCJwYXJzZSIsImFwcGx5SW5oZXJpdGFibGVzIiwiY2FuQmVGaWx0ZXJlZCIsImRpY3QiLCJ0cmFuc2xhdGVUYWdTZXQiLCJwaWNrIiwic2tpcCIsImluZGV4T2YiLCJhZGQiLCJmaW5hbGl6ZUZpbHRlcnMiLCJlZSIsIiQiLCJ0aWZmIiwiaWhkciIsIm11bHRpU2VnbWVudCIsInNhbml0aXplIiwibWVyZ2VPdXRwdXQiLCJzaWxlbnRFcnJvcnMiLCJjaHVua2VkIiwiZmlyc3RDaHVua1NpemUiLCJmaXJzdENodW5rU2l6ZU5vZGUiLCJmaXJzdENodW5rU2l6ZUJyb3dzZXIiLCJjaHVua1NpemUiLCJjaHVua0xpbWl0IiwiSiIsInEiLCJ1c2VDYWNoZWQiLCJzZXR1cEZyb21UcnVlIiwic2V0dXBGcm9tVW5kZWZpbmVkIiwic2V0dXBGcm9tQXJyYXkiLCJzZXR1cEZyb21PYmplY3QiLCJmaWx0ZXJOZXN0ZWRTZWdtZW50VGFncyIsInRyYXZlcnNlVGlmZkRlcGVuZGVuY3lUcmVlIiwiY2hlY2tMb2FkZWRQbHVnaW5zIiwic2V0dXBHbG9iYWxGaWx0ZXJzIiwiaW1hZ2UiLCJ0aHVtYm5haWwiLCJhc3NpZ24iLCJaIiwiYmF0Y2hFbmFibGVXaXRoQm9vbCIsImJhdGNoRW5hYmxlV2l0aFVzZXJWYWx1ZSIsIlEiLCJzb21lIiwib25seVRpZmYiLCJtYXAiLCJ0ZSIsImVycm9ycyIsIm9wdGlvbnMiLCJmaWxlIiwic2V0dXAiLCJmaWxlUGFyc2VyIiwiY2FuSGFuZGxlIiwicGFyc2VycyIsImNsb3NlIiwib3V0cHV0IiwiZXhlY3V0ZVBhcnNlcnMiLCJwdXNoVG9FcnJvcnMiLCJhc3NpZ25Ub091dHB1dCIsImFsbCIsImV4dHJhY3RUaHVtYm5haWwiLCJzdGFydCIsInR5cGUiLCJqcGVnIiwiZ2V0T3JGaW5kU2VnbWVudCIsImVuc3VyZVNlZ21lbnRDaHVuayIsImllIiwibmUiLCJmcmVlemUiLCJfX3Byb3RvX18iLCJFeGlmciIsImZpbGVQYXJzZXJzIiwic2VnbWVudFBhcnNlcnMiLCJmaWxlUmVhZGVycyIsInRhZ1Jldml2ZXJzIiwiY3JlYXRlRGljdGlvbmFyeSIsImV4dGVuZERpY3Rpb25hcnkiLCJmZXRjaFVybEFzQXJyYXlCdWZmZXIiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJjaHVua2VkUHJvcHMiLCJvdGhlclNlZ21lbnRzIiwic2VnbWVudHMiLCJ0aWZmQmxvY2tzIiwic2VnbWVudHNBbmRCbG9ja3MiLCJ0aWZmRXh0cmFjdGFibGVzIiwiaW5oZXJpdGFibGVzIiwiYWxsRm9ybWF0dGVycyIsIk9wdGlvbnMiLCJzZSIsImF2YWlsYWJsZSIsImNodW5rIiwicmVhZENodW5rIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJleHRlbmRPcHRpb25zIiwiaW5qZWN0U2VnbWVudCIsImNyZWF0ZVBhcnNlciIsImNyZWF0ZVBhcnNlcnMiLCJhcHBlbmQiLCJyZWFkU2VnbWVudHMiLCJyZSIsImZpbmRQb3NpdGlvbiIsImhlYWRlckxlbmd0aCIsIm9mZnNldCIsIm5vcm1hbGl6ZUlucHV0IiwiZ2xvYmFsT3B0aW9ucyIsImxvY2FsT3B0aW9ucyIsImNhblRyYW5zbGF0ZSIsInRyYW5zbGF0ZWQiLCJ0cmFuc2xhdGVCbG9jayIsInJhdyIsImZyb21FbnRyaWVzIiwidHJhbnNsYXRlVmFsdWUiLCJERUZBVUxUIiwiYXNzaWduT2JqZWN0VG9PdXRwdXQiLCJhZSIsIm9lIiwiaGUiLCJmaW5kQXBwU2VnbWVudHMiLCJhcHBTZWdtZW50cyIsIm1lcmdlTXVsdGlTZWdtZW50cyIsIm1lcmdlZEFwcFNlZ21lbnRzIiwic2V0dXBTZWdtZW50RmluZGVyQXJncyIsImZpbmRBbGwiLCJ3YW50ZWQiLCJyZW1haW5pbmciLCJ1bmZpbmlzaGVkTXVsdGlTZWdtZW50IiwicmVhZFdob2xlIiwiZmluZEFwcFNlZ21lbnRzSW5SYW5nZSIsImNhblJlYWROZXh0Q2h1bmsiLCJuZXh0Q2h1bmtPZmZzZXQiLCJyZWFkTmV4dENodW5rIiwiY2h1bmtOdW1iZXIiLCJjaHVua0NvdW50IiwiZGVsZXRlIiwicmVjb3JkVW5rbm93blNlZ21lbnRzIiwibWFya2VyIiwidW5rbm93blNlZ21lbnRzIiwic3RvcEFmdGVyU29zIiwicmVjb3JkSnBlZ1NlZ21lbnRzIiwianBlZ1NlZ21lbnRzIiwiaGFuZGxlTXVsdGlTZWdtZW50cyIsImdldFNlZ21lbnQiLCJmaW5kIiwidWUiLCJjZSIsInBhcnNlSGVhZGVyIiwiaGVhZGVyUGFyc2VkIiwicGFyc2VUYWdzIiwicGFyc2VUYWciLCJ0b1VwcGVyQ2FzZSIsInBhcnNlVGFnVmFsdWUiLCJVaW50MTZBcnJheSIsIlVpbnQzMkFycmF5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJmZSIsInBhcnNlSWZkMEJsb2NrIiwic2FmZVBhcnNlIiwiY3JlYXRlT3V0cHV0IiwiaGFuZGxlRXJyb3IiLCJmaW5kSWZkME9mZnNldCIsImlmZDBPZmZzZXQiLCJmaW5kSWZkMU9mZnNldCIsImlmZDFPZmZzZXQiLCJwYXJzZUJsb2NrIiwiZXhpZk9mZnNldCIsImludGVyb3BPZmZzZXQiLCJncHNPZmZzZXQiLCJwYXJzZUV4aWZCbG9jayIsInVucGFjayIsInBhcnNlR3BzQmxvY2siLCJkZSIsInBhcnNlSW50ZXJvcEJsb2NrIiwicGFyc2VUaHVtYm5haWxCbG9jayIsImlmZDFQYXJzZWQiLCJlbnRyaWVzIiwicGUiLCJkZWZhdWx0IiwiZ2UiLCJtZSIsIlNlIiwibGF0aXR1ZGUiLCJsb25naXR1ZGUiLCJDZSIsInllIiwiYmUiLCJjcmVhdGVPYmplY3RVUkwiLCJJZSIsIlBlIiwia2UiLCJkaW1lbnNpb25Td2FwcGVkIiwic2NhbGVYIiwic2NhbGVZIiwiZGVnIiwicmFkIiwiTWF0aCIsIlBJIiwid2UiLCJUZSIsInVzZXJBZ2VudCIsIm1hdGNoIiwiQWUiLCJjYW52YXMiLCJjc3MiLCJEZSIsIk9lIiwicmFuZ2VzIiwiX3RyeUV4dGVuZCIsIl9leHRlbmQiLCJhbGxvY1Vuc2FmZSIsInVpbnRWaWV3IiwibGlzdCIsInhlIiwibWluIiwibWF4Iiwic2hpZnQiLCJ2ZSIsImlucHV0IiwicmVhZENodW5rZWQiLCJmdWxseVJlYWQiLCJjaHVua3NSZWFkIiwic2FmZVdyYXBBZGRyZXNzIiwiX3JlYWRDaHVuayIsIk1lIiwiZ3BzT25seU9wdGlvbnMiLCJ0aHVtYm5haWxPbmx5T3B0aW9ucyIsInRodW1ibmFpbFVybCIsIm9yaWVudGF0aW9uT25seU9wdGlvbnMiLCJvcmllbnRhdGlvbiIsInJvdGF0aW9ucyIsInJvdGF0ZUNhbnZhcyIsInJvdGF0ZUNzcyIsInJvdGF0aW9uIiwiaHR0cEhlYWRlcnMiLCJyYW5nZSIsImpvaW4iLCJwcm90b3R5cGUiLCJSZSIsInBhcnNlQm94ZXMiLCJwYXJzZUJveEhlYWQiLCJwYXJzZVN1YkJveGVzIiwiYm94ZXMiLCJmaW5kQm94IiwicGFyc2VCb3hGdWxsSGVhZCIsInZlcnNpb24iLCJMZSIsImZpbmRJY2MiLCJmaW5kRXhpZiIsInJlZ2lzdGVyU2VnbWVudCIsImZpbmRFeGlmTG9jSWRJbklpbmYiLCJmaW5kRXh0ZW50SW5JbG9jIiwiZ2V0OGJpdHMiLCJVZSIsIkZlIiwiRWUiLCJCZSIsIk5lIiwiR2UiLCJWZSIsInBvcCIsInplIiwic3BsaXQiLCJEYXRlIiwiaXNOYU4iLCJzZXRIb3VycyIsInNldE1pbnV0ZXMiLCJzZXRTZWNvbmRzIiwiSGUiLCJqZSIsImZyb21Db2RlUG9pbnQiLCJXZSIsImV4dGVuZGVkIiwiWmUiLCJyZXBsYWNlIiwiZXQiLCJYZSIsInByb3BlcnRpZXMiLCJKZSIsIm5zIiwiX2UiLCJLZSIsInFlIiwidW5wYWNrTWF0Y2giLCJRZSIsInNlcmlhbGl6ZSIsIlJlZ0V4cCIsImF0dHJTdHJpbmciLCJpbm5lclhtbCIsImF0dHJzIiwiY2hpbGRyZW4iLCJpc1ByaW1pdGl2ZSIsImlzTGlzdENvbnRhaW5lciIsImlzTGlzdCIsImlzTGlzdEl0ZW0iLCIkZSIsIlllIiwiZXhlYyIsInRvTG93ZXJDYXNlIiwidHQiLCJpdCIsIm50Iiwic3QiLCJydCIsImF0IiwicHJvbWlzZXMiLCJmcyIsInJlYWRGaWxlIiwib3BlbiIsImZoIiwic3RhdCIsImZsb29yIiwiY2VpbCIsImF0b2IiLCJjaGFyQ29kZUF0Iiwib3QiLCJhZGFwdFRpZmZQcm9wQXNTZWdtZW50IiwibHQiLCJodCIsInV0IiwiZmluZFBuZ0NodW5rc0luUmFuZ2UiLCJtZXRhQ2h1bmtzIiwiZmluZEloZHIiLCJwYXJzZVRleHRDaHVua3MiLCJjYXRjaEVycm9yIiwiZmluZFhtcCIsInVua25vd25DaHVua3MiLCJpbmplY3RLZXlWYWxUb0loZHIiLCJpbmZsYXRlU3luYyIsImN0IiwiZnQiLCJkdCIsInB0IiwiZ3QiLCJwYXJzZUludCIsInBhcnNlRGVzYyIsInBhcnNlTWx1YyIsInBhcnNlVGV4dCIsInBhcnNlU2lnIiwibGFuZyIsImNvdW50cnkiLCJ0ZXh0IiwibXQiLCJVVEMiLCJTdCIsIkFBTUEiLCJBQ0VSIiwiQUNMVCIsIkFDVEkiLCJBREFSIiwiQURCRSIsIkFESSIsIkFHRkEiLCJBTE1EIiwiQUxQUyIsIkFMV04iLCJBTVRJIiwiQU9DIiwiQVBBRyIsIkFQUEwiLCJBU1QiLCJCQUVMIiwiQlJDTyIsIkJSS1AiLCJCUk9UIiwiQlVMTCIsIkJVUyIsIkNBTVIiLCJDQU5PIiwiQ0FSUiIsIkNBU0kiLCJDQlVTIiwiQ0VMIiwiQ0VMeCIsIkNHUyIsIkNITSIsIkNJR0wiLCJDSVRJIiwiQ0wwMCIsIkNMSVEiLCJDTUNPIiwiQ01pWCIsIkNPTE8iLCJDT01QIiwiQ09NcCIsIkNPTlIiLCJDT1JEIiwiQ1BRIiwiQ1BSTyIsIkNSTiIsIkNUWCIsIkNWSVMiLCJDV0MiLCJEQVJJIiwiREFUQSIsIkRDUCIsIkRDUkMiLCJERUxMIiwiRElDIiwiRElDTyIsIkRJR0kiLCJEUExHIiwiRFMiLCJEU09MIiwiRFVQTiIsIkVQU08iLCJFU0tPIiwiRVRSSSIsIkVWRVIiLCJFWEFDIiwiRWl6byIsIkZBTEMiLCJGRiIsIkZGRUkiLCJGTlJEIiwiRk9SQSIsIkZPUkUiLCJGUCIsIkZQQSIsIkZVSkkiLCJGWCIsIkdDQyIsIkdHU0wiLCJHTUIiLCJHTUciLCJHT0xEIiwiR09PRyIsIkdQUlQiLCJHVE1CIiwiR1ZDIiwiR1cySyIsIkhDSSIsIkhETSIsIkhFUk0iLCJISVRBIiwiSFAiLCJIVEMiLCJIaVRpIiwiSUJNIiwiSUROVCIsIklFQyIsIklJWUEiLCJJS0VHIiwiSU1BRyIsIklNSSIsIklOVEMiLCJJTlRMIiwiSU5UUiIsIklPQ08iLCJJUFMiLCJJUklTIiwiSVNMIiwiSVROTCIsIklWTSIsIklXQVQiLCJJZG50IiwiSW5jYSIsIklyaXMiLCJKUEVHIiwiSlNGVCIsIkpWQyIsIktBUlQiLCJLRkMiLCJLTEgiLCJLTUhEIiwiS05DQSIsIktPREEiLCJLWU9DIiwiS2FydCIsIkxDQUciLCJMQ0NEIiwiTERBSyIsIkxFQUQiLCJMRVhNIiwiTElOSyIsIkxJTk8iLCJMSVRFIiwiTGVhZiIsIkxpbm8iLCJNQUdDIiwiTUFHSSIsIk1BTk4iLCJNSUNOIiwiTUlDUiIsIk1JQ1YiLCJNSU5PIiwiTUlUUyIsIk1JVHMiLCJNTkxUIiwiTU9ERyIsIk1PTkkiLCJNT05TIiwiTU9SUyIsIk1PVEkiLCJNU0ZUIiwiTVVUTyIsIk1pdHMiLCJOQU5BIiwiTkVDIiwiTkVYUCIsIk5JU1MiLCJOS09OIiwiTk9ORSIsIk9DRSIsIk9DRUMiLCJPS0kiLCJPS0lEIiwiT0tJUCIsIk9MSVYiLCJPTFlNIiwiT05ZWCIsIk9QVEkiLCJQQUNLIiwiUEFOQSIsIlBBTlQiLCJQQk4iLCJQRlUiLCJQSElMIiwiUE5UWCIsIlBPbmUiLCJQUkVNIiwiUFJJTiIsIlBSSVAiLCJRTFVYIiwiUU1TIiwiUVBDRCIsIlFVQUQiLCJRVU1FIiwiUkFESSIsIlJERHgiLCJSREciLCJSRURNIiwiUkVMSSIsIlJHTVMiLCJSSUNPIiwiUk5MRCIsIlJPWUEiLCJSUEMiLCJSVEwiLCJTQU1QIiwiU0FNUyIsIlNBTlQiLCJTQ0lUIiwiU0NSTiIsIlNEUCIsIlNFQyIsIlNFSUsiLCJTRUlrIiwiU0dVWSIsIlNIQVIiLCJTSUNDIiwiU09OWSIsIlNQQ0wiLCJTVEFSIiwiU1RDIiwiU2NpdCIsIlNkcCIsIlNvbnkiLCJUQUxPIiwiVEFORCIsIlRBVFUiLCJUQVhBIiwiVERTIiwiVEVDTyIsIlRFR1IiLCJURUtUIiwiVEkiLCJUTUtSIiwiVE9TQiIsIlRPU0giLCJUT1RLIiwiVFJJVSIsIlRTQlQiLCJUVFgiLCJUVk0iLCJUVyIsIlVMU1giLCJVTklTIiwiVVRaRiIsIlZBUkkiLCJWSUVXIiwiVklTTCIsIlZJVk8iLCJXQU5HIiwiV0xCUiIsIldURzIiLCJXWVNFIiwiWEVSWCIsIlhSSVQiLCJaUkFOIiwiWmViciIsImFwcGwiLCJiSUNDIiwiYmVyZyIsImNleWQiLCJjbHNwIiwiZHMiLCJkdXBuIiwiZmZlaSIsImZsdXgiLCJpcmlzIiwia2FydCIsImxjbXMiLCJsaW5vIiwibm9uZSIsIm9iNGQiLCJvYmljIiwicXVieSIsInNjaXQiLCJzY3JuIiwic2RwIiwic2l3aSIsInl4eW0iLCJDdCIsInNjbnIiLCJtbnRyIiwicHJ0ciIsImxpbmsiLCJhYnN0Iiwic3BhYyIsIm5tY2wiLCJjZW5jIiwibWlkIiwibWxuayIsIm12aXMiLCJua3BmIiwiYW1kIiwiY3J0Iiwia3BjZCIsInBtZCIsImRjYW0iLCJkY3BqIiwiZG1wYyIsImRzdWIiLCJlcGhvIiwiZXN0YSIsImZsZXgiLCJmcHJuIiwiZnNjbiIsImdyYXYiLCJpamV0IiwiaW1ncyIsIm1wZnIiLCJtcGZzIiwib2ZmcyIsInBqdHYiLCJycGhvIiwicnNjbiIsInNpbGsiLCJ0d2F4IiwidmlkYyIsInZpZG0iLCJ5dCIsImNvbnRhaW5zSXB0YzhiaW0iLCJpc0lwdGNTZWdtZW50SGVhZCIsInBsdXJhbGl6ZVZhbHVlIiwic2lkZWNhciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/exifr/dist/full.esm.mjs\n");

/***/ })

};
;